export default "#define GLSLIFY 1\n#define saturate(t) clamp(t, 0., 1.)\n#define PI 3.14159265359\n#define TPI PI * 2.\n#define EXP 2.71828182846\nfloat w1 = 3.0;\nfloat w2 = 1.0;\nfloat w3 = 20.0;\nfloat A = 1.0;\nfloat R = 3.0;\n\nvarying vec4 vTranformed;\n\nuniform float uTime;\nuniform float uSpeedColor;\nuniform vec2 uResolution;\nuniform vec2 uStep;\n\nuniform vec3 uColor1;\nuniform vec3 uColor2;\nuniform vec3 uColor3;\nuniform vec3 uColor4;\nuniform vec3 uColor5;\nuniform vec3 uColor6;\nuniform float uOpacity;\nvarying vec3 vNormal;\n\nuniform float fresnelBias;\nuniform float fresnelPower;\nuniform float fresnelScale;\nuniform float fresnelIntesity;\nfloat fr(vec3 viewDirection, vec3 worldNormal) {\n  return saturate(fresnelBias + fresnelScale * pow( 1. + dot( viewDirection, worldNormal), fresnelPower ));\n}\n\nfloat horizontal(in vec2 xy, float t)\t{\n  float v = sin(w1 * xy.x + A * t );\n\treturn v;\n}\n    \nfloat diagonal(in vec2 xy, float t)\t{\n    float v = cos( w2 * ( xy.x * cos(t) + 5.0 * xy.y * sin(t) ) + A * t );\n    return v;\n}\nfloat radial(in vec2 xy, float t)\t{\n    float x = 0.3 * xy.x - 0.5 + cos(t);\n    float y = 0.3 * xy.y - 0.5 + sin(t * 0.5);\n    float v = sin( w3 * sqrt( x * x + y * y + 1.0) + A * t );\n    return v;\n}\nvoid main()\t{\n  float time = uTime / uSpeedColor;\n  vec2 xy = gl_FragCoord.xy / uResolution.xy ;\n  float v = horizontal(xy, time);\n  v += diagonal(xy , time); \n  v += radial(xy , time);\n\n  float circle = PI * 2.;\n  float quart = PI * .5;\n  float fresnel = fr(vTranformed.xyz, vNormal) * fresnelIntesity;\n  float distanceX = length(length(vTranformed.xz) + length(xy));\n  float distanceY = length(length(vTranformed.yz) + length(xy));\n  float maskX = cos((sin(time) + (distanceX - xy.x)) - PI);\n  float maskY = cos((sin(time) + (distanceY - xy.y)) - PI);\n  float maskXY = (vTranformed.z  * v + uStep.x) * uStep.y;\n\n  vec3 m1 = mix(uColor1, uColor2, saturate(maskX));\n  vec3 m3 = mix(m1, uColor3, maskY);\n  vec3 m2 = mix(uColor4, uColor5, saturate(maskY));\n  vec3 m4 = mix(m2, uColor6, maskX);\n\n  vec3 col = mix(m3, m4, saturate(maskXY) - fresnel); \n  gl_FragColor = vec4(col, uOpacity);\n}";
