export default "#define GLSLIFY 1\n#define saturate(t) clamp(t, 0., 1.)\n#define PI 3.14159265359\n#define TPI PI * 2.\n#define EXP 2.71828182846\n\nfloat w1 = 3.0;\nfloat w2 = 1.0;\nfloat w3 = 20.0;\nfloat A = 1.0;\nfloat R = 3.0;\n\nuniform bool uLowGpu;\nuniform sampler2D uTexture;\nuniform float uSpeedColor;\nuniform vec2 uResolution;\nuniform float uTime;\nuniform vec2 uStep;\n\nuniform vec3 uColor1;\nuniform vec3 uColor2;\nuniform vec3 uColor3;\nuniform vec3 uColor4;\nuniform vec3 uColor5;\nuniform vec3 uColor6;\nuniform float uOpacity;\nuniform float uWhiteness;\n\nvarying vec2 vUv;\nfloat horizontal(in vec2 xy, float t)\t{\n  float v = sin(w1 * xy.x + A * t );\n\treturn v;\n}\n    \nfloat diagonal(in vec2 xy, float t)\t{\n    float v = cos( w2 * ( xy.x * cos(t) + 5.0 * xy.y * sin(t) ) + A * t );\n    return v;\n}\nfloat radial(in vec2 xy, float t)\t{\n    float x = 0.3 * xy.x - 0.5 + cos(t);\n    float y = 0.3 * xy.y - 0.5 + sin(t * 0.5);\n    float v = sin( w3 * sqrt( x * x + y * y + 1.0) + A * t );\n    return v;\n}\n\nfloat map(float a, float b, float c, float d, float x) {\n    return (( x - a ) * ( d - c ) / ( b - a ) ) + c;\n}\n\nfloat log_map(float a,float b,float c,float d,float x) {\n    float x1 = map( a , b , 1.0 , EXP , x );\n    return log( x1 ) * ( d - c ) + c;\n}\n\nvoid main()\t{\n  float time = uTime / uSpeedColor;\n\n  vec2 xy = gl_FragCoord.xy / uResolution.xy ;\n  vec4 texture = texture2D(uTexture, vUv);\n  vec3 col = vec3(1.);\n  if(!uLowGpu) {\n    float v = horizontal(xy, time);\n    v += diagonal(xy , time); \n    v += radial(xy , time);\n    v += log_map(texture.z , uTime,  texture.x, texture.x, xy.y);\n\n    float circle = PI * 2.;\n    float quart = PI * .5;\n    float distanceX = length( length(texture.xz) + length(xy) )  ;\n    float distanceY = length( length(texture.yz) + length(xy) )  ;\n    float maskX = cos((sin(time) + (distanceX - xy.x)) - PI  )  ;\n    float maskY = cos((sin(time) + (distanceY - xy.y)) - PI  ) ;\n    float maskXY =  (((texture.z) * v + uStep.x) * uStep.y) ;\n\n    vec3 mix1 = mix(uColor1, uColor2, (saturate(maskX)) );\n    vec3 mix3 = mix(mix1, uColor3, ((maskY)) );\n    vec3 mix2 = mix(uColor4, uColor5, (saturate(maskY)) );\n    vec3 mix4 = mix(mix2, uColor6, ((maskX)) );\n\n    col = mix(mix3, mix4,  (saturate(maskXY )) ); \n  } \n\n  gl_FragColor = vec4(col + uWhiteness, texture * uOpacity ) ;\n}";