{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/gsap/dist/SplitText.js","node_modules/gsap/dist/gsap.js","static/js/examples/3dScrollytelling/ScrollMarquee.js","static/js/examples/3dScrollytelling/ThreeScrollytelling.js","static/js/examples/HoverClippingNavigation/HoverClippingNavigation.js","static/js/examples/ImageSequence/ContentAnimation.js","static/js/examples/ImageSequence/ImageSequence.js","static/js/examples/MouseDrivenVerticalCarousel/MouseDrivenVerticalCarousel.js","static/js/examples/PanningGallery/PanningGallery.js","static/js/examples/ScrollingMarquee/ScrollingMarquee.js","static/js/examples/TemplateExample/TemplateComponent.js","static/js/index.js"],"names":[],"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n\tvar emojiExp = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF](?:[\\u200D\\uFE0F][\\uD800-\\uDBFF][\\uDC00-\\uDFFF]){2,}|\\uD83D\\uDC69(?:\\u200D(?:(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67|(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC6F\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3C-\\uDD3E\\uDDD6-\\uDDDF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642])\\uFE0F|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC69\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC68(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708]))\\uFE0F|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83D\\uDC69\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]))|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDD1-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\u200D(?:(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F)/;\n\tfunction getText(e) {\n\t  var type = e.nodeType,\n\t      result = \"\";\n\n\t  if (type === 1 || type === 9 || type === 11) {\n\t    if (typeof e.textContent === \"string\") {\n\t      return e.textContent;\n\t    } else {\n\t      for (e = e.firstChild; e; e = e.nextSibling) {\n\t        result += getText(e);\n\t      }\n\t    }\n\t  } else if (type === 3 || type === 4) {\n\t    return e.nodeValue;\n\t  }\n\n\t  return result;\n\t}\n\n\t/*!\n\t * SplitText: 3.8.0\n\t * https://greensock.com\n\t *\n\t * @license Copyright 2008-2021, GreenSock. All rights reserved.\n\t * Subject to the terms at https://greensock.com/standard-license or for\n\t * Club GreenSock members, the agreement issued with that membership.\n\t * @author: Jack Doyle, jack@greensock.com\n\t*/\n\n\tvar _doc,\n\t    _win,\n\t    _coreInitted,\n\t    _stripExp = /(?:\\r|\\n|\\t\\t)/g,\n\t    _multipleSpacesExp = /(?:\\s\\s+)/g,\n\t    _initCore = function _initCore() {\n\t  _doc = document;\n\t  _win = window;\n\t  _coreInitted = 1;\n\t},\n\t    _getComputedStyle = function _getComputedStyle(element) {\n\t  return _win.getComputedStyle(element);\n\t},\n\t    _isArray = Array.isArray,\n\t    _slice = [].slice,\n\t    _toArray = function _toArray(value, leaveStrings) {\n\t  var type;\n\t  return _isArray(value) ? value : (type = typeof value) === \"string\" && !leaveStrings && value ? _slice.call(_doc.querySelectorAll(value), 0) : value && type === \"object\" && \"length\" in value ? _slice.call(value, 0) : value ? [value] : [];\n\t},\n\t    _isAbsolute = function _isAbsolute(vars) {\n\t  return vars.position === \"absolute\" || vars.absolute === true;\n\t},\n\t    _findSpecialChars = function _findSpecialChars(text, chars) {\n\t  var i = chars.length,\n\t      s;\n\n\t  while (--i > -1) {\n\t    s = chars[i];\n\n\t    if (text.substr(0, s.length) === s) {\n\t      return s.length;\n\t    }\n\t  }\n\t},\n\t    _divStart = \" style='position:relative;display:inline-block;'\",\n\t    _cssClassFunc = function _cssClassFunc(cssClass, tag) {\n\t  if (cssClass === void 0) {\n\t    cssClass = \"\";\n\t  }\n\n\t  var iterate = ~cssClass.indexOf(\"++\"),\n\t      num = 1;\n\n\t  if (iterate) {\n\t    cssClass = cssClass.split(\"++\").join(\"\");\n\t  }\n\n\t  return function () {\n\t    return \"<\" + tag + _divStart + (cssClass ? \" class='\" + cssClass + (iterate ? num++ : \"\") + \"'>\" : \">\");\n\t  };\n\t},\n\t    _swapText = function _swapText(element, oldText, newText) {\n\t  var type = element.nodeType;\n\n\t  if (type === 1 || type === 9 || type === 11) {\n\t    for (element = element.firstChild; element; element = element.nextSibling) {\n\t      _swapText(element, oldText, newText);\n\t    }\n\t  } else if (type === 3 || type === 4) {\n\t    element.nodeValue = element.nodeValue.split(oldText).join(newText);\n\t  }\n\t},\n\t    _pushReversed = function _pushReversed(a, merge) {\n\t  var i = merge.length;\n\n\t  while (--i > -1) {\n\t    a.push(merge[i]);\n\t  }\n\t},\n\t    _isBeforeWordDelimiter = function _isBeforeWordDelimiter(e, root, wordDelimiter) {\n\t  var next;\n\n\t  while (e && e !== root) {\n\t    next = e._next || e.nextSibling;\n\n\t    if (next) {\n\t      return next.textContent.charAt(0) === wordDelimiter;\n\t    }\n\n\t    e = e.parentNode || e._parent;\n\t  }\n\t},\n\t    _deWordify = function _deWordify(e) {\n\t  var children = _toArray(e.childNodes),\n\t      l = children.length,\n\t      i,\n\t      child;\n\n\t  for (i = 0; i < l; i++) {\n\t    child = children[i];\n\n\t    if (child._isSplit) {\n\t      _deWordify(child);\n\t    } else {\n\t      if (i && child.previousSibling && child.previousSibling.nodeType === 3) {\n\t        child.previousSibling.nodeValue += child.nodeType === 3 ? child.nodeValue : child.firstChild.nodeValue;\n\t        e.removeChild(child);\n\t      } else if (child.nodeType !== 3) {\n\t        e.insertBefore(child.firstChild, child);\n\t        e.removeChild(child);\n\t      }\n\t    }\n\t  }\n\t},\n\t    _getStyleAsNumber = function _getStyleAsNumber(name, computedStyle) {\n\t  return parseFloat(computedStyle[name]) || 0;\n\t},\n\t    _setPositionsAfterSplit = function _setPositionsAfterSplit(element, vars, allChars, allWords, allLines, origWidth, origHeight) {\n\t  var cs = _getComputedStyle(element),\n\t      paddingLeft = _getStyleAsNumber(\"paddingLeft\", cs),\n\t      lineOffsetY = -999,\n\t      borderTopAndBottom = _getStyleAsNumber(\"borderBottomWidth\", cs) + _getStyleAsNumber(\"borderTopWidth\", cs),\n\t      borderLeftAndRight = _getStyleAsNumber(\"borderLeftWidth\", cs) + _getStyleAsNumber(\"borderRightWidth\", cs),\n\t      padTopAndBottom = _getStyleAsNumber(\"paddingTop\", cs) + _getStyleAsNumber(\"paddingBottom\", cs),\n\t      padLeftAndRight = _getStyleAsNumber(\"paddingLeft\", cs) + _getStyleAsNumber(\"paddingRight\", cs),\n\t      lineThreshold = _getStyleAsNumber(\"fontSize\", cs) * (vars.lineThreshold || 0.2),\n\t      textAlign = cs.textAlign,\n\t      charArray = [],\n\t      wordArray = [],\n\t      lineArray = [],\n\t      wordDelimiter = vars.wordDelimiter || \" \",\n\t      tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n\t      types = vars.type || vars.split || \"chars,words,lines\",\n\t      lines = allLines && ~types.indexOf(\"lines\") ? [] : null,\n\t      words = ~types.indexOf(\"words\"),\n\t      chars = ~types.indexOf(\"chars\"),\n\t      absolute = _isAbsolute(vars),\n\t      linesClass = vars.linesClass,\n\t      iterateLine = ~(linesClass || \"\").indexOf(\"++\"),\n\t      spaceNodesToRemove = [],\n\t      isFlex = cs.display === \"flex\",\n\t      prevInlineDisplay = element.style.display,\n\t      i,\n\t      j,\n\t      l,\n\t      node,\n\t      nodes,\n\t      isChild,\n\t      curLine,\n\t      addWordSpaces,\n\t      style,\n\t      lineNode,\n\t      lineWidth,\n\t      offset;\n\n\t  iterateLine && (linesClass = linesClass.split(\"++\").join(\"\"));\n\t  isFlex && (element.style.display = \"block\");\n\t  j = element.getElementsByTagName(\"*\");\n\t  l = j.length;\n\t  nodes = [];\n\n\t  for (i = 0; i < l; i++) {\n\t    nodes[i] = j[i];\n\t  }\n\n\t  if (lines || absolute) {\n\t    for (i = 0; i < l; i++) {\n\t      node = nodes[i];\n\t      isChild = node.parentNode === element;\n\n\t      if (isChild || absolute || chars && !words) {\n\t        offset = node.offsetTop;\n\n\t        if (lines && isChild && Math.abs(offset - lineOffsetY) > lineThreshold && (node.nodeName !== \"BR\" || i === 0)) {\n\t          curLine = [];\n\t          lines.push(curLine);\n\t          lineOffsetY = offset;\n\t        }\n\n\t        if (absolute) {\n\t          node._x = node.offsetLeft;\n\t          node._y = offset;\n\t          node._w = node.offsetWidth;\n\t          node._h = node.offsetHeight;\n\t        }\n\n\t        if (lines) {\n\t          if (node._isSplit && isChild || !chars && isChild || words && isChild || !words && node.parentNode.parentNode === element && !node.parentNode._isSplit) {\n\t            curLine.push(node);\n\t            node._x -= paddingLeft;\n\n\t            if (_isBeforeWordDelimiter(node, element, wordDelimiter)) {\n\t              node._wordEnd = true;\n\t            }\n\t          }\n\n\t          if (node.nodeName === \"BR\" && (node.nextSibling && node.nextSibling.nodeName === \"BR\" || i === 0)) {\n\t            lines.push([]);\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\n\t  for (i = 0; i < l; i++) {\n\t    node = nodes[i];\n\t    isChild = node.parentNode === element;\n\n\t    if (node.nodeName === \"BR\") {\n\t      if (lines || absolute) {\n\t        node.parentNode && node.parentNode.removeChild(node);\n\t        nodes.splice(i--, 1);\n\t        l--;\n\t      } else if (!words) {\n\t        element.appendChild(node);\n\t      }\n\n\t      continue;\n\t    }\n\n\t    if (absolute) {\n\t      style = node.style;\n\n\t      if (!words && !isChild) {\n\t        node._x += node.parentNode._x;\n\t        node._y += node.parentNode._y;\n\t      }\n\n\t      style.left = node._x + \"px\";\n\t      style.top = node._y + \"px\";\n\t      style.position = \"absolute\";\n\t      style.display = \"block\";\n\t      style.width = node._w + 1 + \"px\";\n\t      style.height = node._h + \"px\";\n\t    }\n\n\t    if (!words && chars) {\n\t      if (node._isSplit) {\n\t        node._next = j = node.nextSibling;\n\t        node.parentNode.appendChild(node);\n\n\t        while (j && j.nodeType === 3 && j.textContent === \" \") {\n\t          node._next = j.nextSibling;\n\t          node.parentNode.appendChild(j);\n\t          j = j.nextSibling;\n\t        }\n\t      } else if (node.parentNode._isSplit) {\n\t        node._parent = node.parentNode;\n\n\t        if (!node.previousSibling && node.firstChild) {\n\t          node.firstChild._isFirst = true;\n\t        }\n\n\t        if (node.nextSibling && node.nextSibling.textContent === \" \" && !node.nextSibling.nextSibling) {\n\t          spaceNodesToRemove.push(node.nextSibling);\n\t        }\n\n\t        node._next = node.nextSibling && node.nextSibling._isFirst ? null : node.nextSibling;\n\t        node.parentNode.removeChild(node);\n\t        nodes.splice(i--, 1);\n\t        l--;\n\t      } else if (!isChild) {\n\t        offset = !node.nextSibling && _isBeforeWordDelimiter(node.parentNode, element, wordDelimiter);\n\t        node.parentNode._parent && node.parentNode._parent.appendChild(node);\n\t        offset && node.parentNode.appendChild(_doc.createTextNode(\" \"));\n\n\t        if (tag === \"span\") {\n\t          node.style.display = \"inline\";\n\t        }\n\n\t        charArray.push(node);\n\t      }\n\t    } else if (node.parentNode._isSplit && !node._isSplit && node.innerHTML !== \"\") {\n\t      wordArray.push(node);\n\t    } else if (chars && !node._isSplit) {\n\t      if (tag === \"span\") {\n\t        node.style.display = \"inline\";\n\t      }\n\n\t      charArray.push(node);\n\t    }\n\t  }\n\n\t  i = spaceNodesToRemove.length;\n\n\t  while (--i > -1) {\n\t    spaceNodesToRemove[i].parentNode.removeChild(spaceNodesToRemove[i]);\n\t  }\n\n\t  if (lines) {\n\t    if (absolute) {\n\t      lineNode = _doc.createElement(tag);\n\t      element.appendChild(lineNode);\n\t      lineWidth = lineNode.offsetWidth + \"px\";\n\t      offset = lineNode.offsetParent === element ? 0 : element.offsetLeft;\n\t      element.removeChild(lineNode);\n\t    }\n\n\t    style = element.style.cssText;\n\t    element.style.cssText = \"display:none;\";\n\n\t    while (element.firstChild) {\n\t      element.removeChild(element.firstChild);\n\t    }\n\n\t    addWordSpaces = wordDelimiter === \" \" && (!absolute || !words && !chars);\n\n\t    for (i = 0; i < lines.length; i++) {\n\t      curLine = lines[i];\n\t      lineNode = _doc.createElement(tag);\n\t      lineNode.style.cssText = \"display:block;text-align:\" + textAlign + \";position:\" + (absolute ? \"absolute;\" : \"relative;\");\n\n\t      if (linesClass) {\n\t        lineNode.className = linesClass + (iterateLine ? i + 1 : \"\");\n\t      }\n\n\t      lineArray.push(lineNode);\n\t      l = curLine.length;\n\n\t      for (j = 0; j < l; j++) {\n\t        if (curLine[j].nodeName !== \"BR\") {\n\t          node = curLine[j];\n\t          lineNode.appendChild(node);\n\t          addWordSpaces && node._wordEnd && lineNode.appendChild(_doc.createTextNode(\" \"));\n\n\t          if (absolute) {\n\t            if (j === 0) {\n\t              lineNode.style.top = node._y + \"px\";\n\t              lineNode.style.left = paddingLeft + offset + \"px\";\n\t            }\n\n\t            node.style.top = \"0px\";\n\n\t            if (offset) {\n\t              node.style.left = node._x - offset + \"px\";\n\t            }\n\t          }\n\t        }\n\t      }\n\n\t      if (l === 0) {\n\t        lineNode.innerHTML = \"&nbsp;\";\n\t      } else if (!words && !chars) {\n\t        _deWordify(lineNode);\n\n\t        _swapText(lineNode, String.fromCharCode(160), \" \");\n\t      }\n\n\t      if (absolute) {\n\t        lineNode.style.width = lineWidth;\n\t        lineNode.style.height = node._h + \"px\";\n\t      }\n\n\t      element.appendChild(lineNode);\n\t    }\n\n\t    element.style.cssText = style;\n\t  }\n\n\t  if (absolute) {\n\t    if (origHeight > element.clientHeight) {\n\t      element.style.height = origHeight - padTopAndBottom + \"px\";\n\n\t      if (element.clientHeight < origHeight) {\n\t        element.style.height = origHeight + borderTopAndBottom + \"px\";\n\t      }\n\t    }\n\n\t    if (origWidth > element.clientWidth) {\n\t      element.style.width = origWidth - padLeftAndRight + \"px\";\n\n\t      if (element.clientWidth < origWidth) {\n\t        element.style.width = origWidth + borderLeftAndRight + \"px\";\n\t      }\n\t    }\n\t  }\n\n\t  isFlex && (prevInlineDisplay ? element.style.display = prevInlineDisplay : element.style.removeProperty(\"display\"));\n\n\t  _pushReversed(allChars, charArray);\n\n\t  words && _pushReversed(allWords, wordArray);\n\n\t  _pushReversed(allLines, lineArray);\n\t},\n\t    _splitRawText = function _splitRawText(element, vars, wordStart, charStart) {\n\t  var tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n\t      types = vars.type || vars.split || \"chars,words,lines\",\n\t      chars = ~types.indexOf(\"chars\"),\n\t      absolute = _isAbsolute(vars),\n\t      wordDelimiter = vars.wordDelimiter || \" \",\n\t      space = wordDelimiter !== \" \" ? \"\" : absolute ? \"&#173; \" : \" \",\n\t      wordEnd = \"</\" + tag + \">\",\n\t      wordIsOpen = 1,\n\t      specialChars = vars.specialChars ? typeof vars.specialChars === \"function\" ? vars.specialChars : _findSpecialChars : null,\n\t      text,\n\t      splitText,\n\t      i,\n\t      j,\n\t      l,\n\t      character,\n\t      hasTagStart,\n\t      testResult,\n\t      container = _doc.createElement(\"div\"),\n\t      parent = element.parentNode;\n\n\t  parent.insertBefore(container, element);\n\t  container.textContent = element.nodeValue;\n\t  parent.removeChild(element);\n\t  element = container;\n\t  text = getText(element);\n\t  hasTagStart = text.indexOf(\"<\") !== -1;\n\n\t  if (vars.reduceWhiteSpace !== false) {\n\t    text = text.replace(_multipleSpacesExp, \" \").replace(_stripExp, \"\");\n\t  }\n\n\t  if (hasTagStart) {\n\t    text = text.split(\"<\").join(\"{{LT}}\");\n\t  }\n\n\t  l = text.length;\n\t  splitText = (text.charAt(0) === \" \" ? space : \"\") + wordStart();\n\n\t  for (i = 0; i < l; i++) {\n\t    character = text.charAt(i);\n\n\t    if (specialChars && (testResult = specialChars(text.substr(i), vars.specialChars))) {\n\t      character = text.substr(i, testResult || 1);\n\t      splitText += chars && character !== \" \" ? charStart() + character + \"</\" + tag + \">\" : character;\n\t      i += testResult - 1;\n\t    } else if (character === wordDelimiter && text.charAt(i - 1) !== wordDelimiter && i) {\n\t      splitText += wordIsOpen ? wordEnd : \"\";\n\t      wordIsOpen = 0;\n\n\t      while (text.charAt(i + 1) === wordDelimiter) {\n\t        splitText += space;\n\t        i++;\n\t      }\n\n\t      if (i === l - 1) {\n\t        splitText += space;\n\t      } else if (text.charAt(i + 1) !== \")\") {\n\t        splitText += space + wordStart();\n\t        wordIsOpen = 1;\n\t      }\n\t    } else if (character === \"{\" && text.substr(i, 6) === \"{{LT}}\") {\n\t      splitText += chars ? charStart() + \"{{LT}}\" + \"</\" + tag + \">\" : \"{{LT}}\";\n\t      i += 5;\n\t    } else if (character.charCodeAt(0) >= 0xD800 && character.charCodeAt(0) <= 0xDBFF || text.charCodeAt(i + 1) >= 0xFE00 && text.charCodeAt(i + 1) <= 0xFE0F) {\n\t      j = ((text.substr(i, 12).split(emojiExp) || [])[1] || \"\").length || 2;\n\t      splitText += chars && character !== \" \" ? charStart() + text.substr(i, j) + \"</\" + tag + \">\" : text.substr(i, j);\n\t      i += j - 1;\n\t    } else {\n\t      splitText += chars && character !== \" \" ? charStart() + character + \"</\" + tag + \">\" : character;\n\t    }\n\t  }\n\n\t  element.outerHTML = splitText + (wordIsOpen ? wordEnd : \"\");\n\t  hasTagStart && _swapText(parent, \"{{LT}}\", \"<\");\n\t},\n\t    _split = function _split(element, vars, wordStart, charStart) {\n\t  var children = _toArray(element.childNodes),\n\t      l = children.length,\n\t      absolute = _isAbsolute(vars),\n\t      i,\n\t      child;\n\n\t  if (element.nodeType !== 3 || l > 1) {\n\t    vars.absolute = false;\n\n\t    for (i = 0; i < l; i++) {\n\t      child = children[i];\n\t      child._next = child._isFirst = child._parent = child._wordEnd = null;\n\n\t      if (child.nodeType !== 3 || /\\S+/.test(child.nodeValue)) {\n\t        if (absolute && child.nodeType !== 3 && _getComputedStyle(child).display === \"inline\") {\n\t          child.style.display = \"inline-block\";\n\t          child.style.position = \"relative\";\n\t        }\n\n\t        child._isSplit = true;\n\n\t        _split(child, vars, wordStart, charStart);\n\t      }\n\t    }\n\n\t    vars.absolute = absolute;\n\t    element._isSplit = true;\n\t    return;\n\t  }\n\n\t  _splitRawText(element, vars, wordStart, charStart);\n\t};\n\n\tvar SplitText = function () {\n\t  function SplitText(element, vars) {\n\t    _coreInitted || _initCore();\n\t    this.elements = _toArray(element);\n\t    this.chars = [];\n\t    this.words = [];\n\t    this.lines = [];\n\t    this._originals = [];\n\t    this.vars = vars || {};\n\t     this.split(vars);\n\t  }\n\n\t  var _proto = SplitText.prototype;\n\n\t  _proto.split = function split(vars) {\n\t    this.isSplit && this.revert();\n\t    this.vars = vars = vars || this.vars;\n\t    this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;\n\n\t    var i = this.elements.length,\n\t        tag = vars.tag ? vars.tag : vars.span ? \"span\" : \"div\",\n\t        wordStart = _cssClassFunc(vars.wordsClass, tag),\n\t        charStart = _cssClassFunc(vars.charsClass, tag),\n\t        origHeight,\n\t        origWidth,\n\t        e;\n\n\t    while (--i > -1) {\n\t      e = this.elements[i];\n\t      this._originals[i] = e.innerHTML;\n\t      origHeight = e.clientHeight;\n\t      origWidth = e.clientWidth;\n\n\t      _split(e, vars, wordStart, charStart);\n\n\t      _setPositionsAfterSplit(e, vars, this.chars, this.words, this.lines, origWidth, origHeight);\n\t    }\n\n\t    this.chars.reverse();\n\t    this.words.reverse();\n\t    this.lines.reverse();\n\t    this.isSplit = true;\n\t    return this;\n\t  };\n\n\t  _proto.revert = function revert() {\n\t    var originals = this._originals;\n\n\t    if (!originals) {\n\t      throw \"revert() call wasn't scoped properly.\";\n\t    }\n\n\t    this.elements.forEach(function (e, i) {\n\t      return e.innerHTML = originals[i];\n\t    });\n\t    this.chars = [];\n\t    this.words = [];\n\t    this.lines = [];\n\t    this.isSplit = false;\n\t    return this;\n\t  };\n\n\t  SplitText.create = function create(element, vars) {\n\t    return new SplitText(element, vars);\n\t  };\n\n\t  return SplitText;\n\t}();\n\tSplitText.version = \"3.8.0\";\n\n\texports.SplitText = SplitText;\n\texports.default = SplitText;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  /*!\n   * GSAP 3.8.0\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2021, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n      lineHeight: \"\"\n    }\n  },\n      _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n  },\n      _suppressOverwrites,\n      _bigNum = 1e8,\n      _tinyNum = 1 / _bigNum,\n      _2PI = Math.PI * 2,\n      _HALF_PI = _2PI / 4,\n      _gsID = 0,\n      _sqrt = Math.sqrt,\n      _cos = Math.cos,\n      _sin = Math.sin,\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n  },\n      _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function () {},\n      _isArray = Array.isArray,\n      _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi,\n      _numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g,\n      _numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g,\n      _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi,\n      _relExp = /[+-]=-?[.\\d]+/,\n      _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi,\n      _unitExp = /[\\d.+\\-=]+(?:e[-+]\\d*)*/i,\n      _globalTimeline,\n      _win,\n      _coreInitted,\n      _doc,\n      _globals = {},\n      _installScope = {},\n      _coreReady,\n      _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n  },\n      _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n  },\n      _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n  },\n      _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n  },\n      _emptyFunc = function _emptyFunc() {\n    return 0;\n  },\n      _reservedProps = {},\n      _lazyTweens = [],\n      _lazyLookup = {},\n      _lastRenderedFrame,\n      _plugins = {},\n      _effects = {},\n      _nextGCFrame = 30,\n      _harnessPlugins = [],\n      _callbackNames = \"\",\n      _harness = function _harness(targets) {\n    var target = targets[0],\n        harnessPlugin,\n        i;\n    _isObject(target) || _isFunction(target) || (targets = [targets]);\n\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n      i = _harnessPlugins.length;\n\n      while (i-- && !_harnessPlugins[i].targetTest(target)) {}\n\n      harnessPlugin = _harnessPlugins[i];\n    }\n\n    i = targets.length;\n\n    while (i--) {\n      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n\n    return targets;\n  },\n      _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n  },\n      _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n  },\n      _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 10000000) / 10000000 || 0;\n  },\n      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    var l = toFind.length,\n        i = 0;\n\n    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}\n\n    return i < l;\n  },\n      _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length,\n        a = _lazyTweens.slice(0),\n        i,\n        tween;\n\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n\n    for (i = 0; i < l; i++) {\n      tween = a[i];\n      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n  },\n      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && _lazyRender();\n    animation.render(time, suppressEvents, force);\n    _lazyTweens.length && _lazyRender();\n  },\n      _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n  },\n      _passThrough = function _passThrough(p) {\n    return p;\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _setKeyframeDefaults = function _setKeyframeDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || p === \"duration\" || p === \"ease\" || (obj[p] = defaults[p]);\n    }\n  },\n      _merge = function _merge(base, toMerge) {\n    for (var p in toMerge) {\n      base[p] = toMerge[p];\n    }\n\n    return base;\n  },\n      _mergeDeep = function _mergeDeep(base, toMerge) {\n    for (var p in toMerge) {\n      p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n\n    return base;\n  },\n      _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {},\n        p;\n\n    for (p in obj) {\n      p in excluding || (copy[p] = obj[p]);\n    }\n\n    return copy;\n  },\n      _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline,\n        func = vars.keyframes ? _setKeyframeDefaults : _setDefaults;\n\n    if (_isNotFalse(vars.inherit)) {\n      while (parent) {\n        func(vars, parent.vars.defaults);\n        parent = parent.parent || parent._dp;\n      }\n    }\n\n    return vars;\n  },\n      _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length,\n        match = i === a2.length;\n\n    while (match && i-- && a1[i] === a2[i]) {}\n\n    return i < 0;\n  },\n      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = parent[lastProp],\n        t;\n\n    if (sortBy) {\n      t = child[sortBy];\n\n      while (prev && prev[sortBy] > t) {\n        prev = prev._prev;\n      }\n    }\n\n    if (prev) {\n      child._next = prev._next;\n      prev._next = child;\n    } else {\n      child._next = parent[firstProp];\n      parent[firstProp] = child;\n    }\n\n    if (child._next) {\n      child._next._prev = child;\n    } else {\n      parent[lastProp] = child;\n    }\n\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n  },\n      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = child._prev,\n        next = child._next;\n\n    if (prev) {\n      prev._next = next;\n    } else if (parent[firstProp] === child) {\n      parent[firstProp] = next;\n    }\n\n    if (next) {\n      next._prev = prev;\n    } else if (parent[lastProp] === child) {\n      parent[lastProp] = prev;\n    }\n\n    child._next = child._prev = child.parent = null;\n  },\n      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);\n    child._act = 0;\n  },\n      _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n      var a = animation;\n\n      while (a) {\n        a._dirty = 1;\n        a = a.parent;\n      }\n    }\n\n    return animation;\n  },\n      _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n\n    while (parent && parent.parent) {\n      parent._dirty = 1;\n      parent.totalDuration();\n      parent = parent.parent;\n    }\n\n    return animation;\n  },\n      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n  },\n      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n  },\n      _animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime /= cycleDuration);\n    return tTime && whole === tTime ? whole - 1 : whole;\n  },\n      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n  },\n      _setEnd = function _setEnd(animation) {\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n  },\n      _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    var parent = animation._dp;\n\n    if (parent && parent.smoothChildTiming && animation._ts) {\n      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n\n      _setEnd(animation);\n\n      parent._dirty || _uncache(parent, animation);\n    }\n\n    return animation;\n  },\n      _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n\n    if (child._time || child._initted && !child._dur) {\n      t = _parentToChildTotalTime(timeline.rawTime(), child);\n\n      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n        child.render(t, true);\n      }\n    }\n\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n      if (timeline._dur < timeline.duration()) {\n        t = timeline;\n\n        while (t._dp) {\n          t.rawTime() >= 0 && t.totalTime(t._tTime);\n          t = t._dp;\n        }\n      }\n\n      timeline._zTime = -_tinyNum;\n    }\n  },\n      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    return timeline;\n  },\n      _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n  },\n      _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {\n    _initTween(tween, totalTime);\n\n    if (!tween._initted) {\n      return 1;\n    }\n\n    if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n      _lazyTweens.push(tween);\n\n      tween._lazy = [totalTime, suppressEvents];\n      return 1;\n    }\n  },\n      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n  },\n      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n  },\n      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio,\n        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,\n        repeatDelay = tween._rDelay,\n        tTime = 0,\n        pt,\n        iteration,\n        prevIteration;\n\n    if (repeatDelay && tween._repeat) {\n      tTime = _clamp(0, tween._tDur, totalTime);\n      iteration = _animationCycle(tTime, repeatDelay);\n      prevIteration = _animationCycle(tween._tTime, repeatDelay);\n      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n\n      if (iteration !== prevIteration) {\n        prevRatio = 1 - ratio;\n        tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n      }\n    }\n\n    if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {\n        return;\n      }\n\n      prevIteration = tween._zTime;\n      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);\n      suppressEvents || (suppressEvents = totalTime && !prevIteration);\n      tween.ratio = ratio;\n      tween._from && (ratio = 1 - ratio);\n      tween._time = 0;\n      tween._tTime = tTime;\n      pt = tween._pt;\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n\n      tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);\n      tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n\n      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n        ratio && _removeFromParent(tween, 1);\n\n        if (!suppressEvents) {\n          _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n\n          tween._prom && tween._prom();\n        }\n      }\n    } else if (!tween._zTime) {\n      tween._zTime = totalTime;\n    }\n  },\n      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n\n    if (time > prevTime) {\n      child = animation._first;\n\n      while (child && child._start <= time) {\n        if (!child._dur && child.data === \"isPause\" && child._start > prevTime) {\n          return child;\n        }\n\n        child = child._next;\n      }\n    } else {\n      child = animation._last;\n\n      while (child && child._start >= time) {\n        if (!child._dur && child.data === \"isPause\" && child._start < prevTime) {\n          return child;\n        }\n\n        child = child._prev;\n      }\n    }\n  },\n      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat,\n        dur = _roundPrecise(duration) || 0,\n        totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n  },\n      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n  },\n      _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n  },\n      _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels,\n        recent = animation._recent || _zeroPosition,\n        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,\n        i,\n        offset,\n        isPercent;\n\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n      offset = position.charAt(0);\n      isPercent = position.substr(-1) === \"%\";\n      i = position.indexOf(\"=\");\n\n      if (offset === \"<\" || offset === \">\") {\n        i >= 0 && (position = position.replace(/=/, \"\"));\n        return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n      }\n\n      if (i < 0) {\n        position in labels || (labels[position] = clippedDuration);\n        return labels[position];\n      }\n\n      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n\n      if (isPercent && percentAnimation) {\n        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n      }\n\n      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n\n    return position == null ? clippedDuration : +position;\n  },\n      _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]),\n        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),\n        vars = params[varsIndex],\n        irVars,\n        parent;\n\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n\n    if (type) {\n      irVars = vars;\n      parent = timeline;\n\n      while (parent && !(\"immediateRender\" in irVars)) {\n        irVars = parent.vars.defaults || {};\n        parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n      }\n\n      vars.immediateRender = _isNotFalse(irVars.immediateRender);\n      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];\n    }\n\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n  },\n      _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n  },\n      _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n  },\n      getUnit = function getUnit(value) {\n    if (typeof value !== \"string\") {\n      return \"\";\n    }\n\n    var v = _unitExp.exec(value);\n\n    return v ? value.substr(v.index + v[0].length) : \"\";\n  },\n      clamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function (v) {\n      return _clamp(min, max, v);\n    });\n  },\n      _slice = [].slice,\n      _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n  },\n      _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n      accumulator = [];\n    }\n\n    return ar.forEach(function (value) {\n      var _accumulator;\n\n      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n  },\n      toArray = function toArray(value, scope, leaveStrings) {\n    return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];\n  },\n      selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function (v) {\n      var el = value.current || value.nativeElement || value;\n      return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n  },\n      shuffle = function shuffle(a) {\n    return a.sort(function () {\n      return .5 - Math.random();\n    });\n  },\n      distribute = function distribute(v) {\n    if (_isFunction(v)) {\n      return v;\n    }\n\n    var vars = _isObject(v) ? v : {\n      each: v\n    },\n        ease = _parseEase(vars.ease),\n        from = vars.from || 0,\n        base = parseFloat(vars.base) || 0,\n        cache = {},\n        isDecimal = from > 0 && from < 1,\n        ratios = isNaN(from) || isDecimal,\n        axis = vars.axis,\n        ratioX = from,\n        ratioY = from;\n\n    if (_isString(from)) {\n      ratioX = ratioY = {\n        center: .5,\n        edges: .5,\n        end: 1\n      }[from] || 0;\n    } else if (!isDecimal && ratios) {\n      ratioX = from[0];\n      ratioY = from[1];\n    }\n\n    return function (i, target, a) {\n      var l = (a || vars).length,\n          distances = cache[l],\n          originX,\n          originY,\n          x,\n          y,\n          d,\n          j,\n          max,\n          min,\n          wrapAt;\n\n      if (!distances) {\n        wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [1, _bigNum])[1];\n\n        if (!wrapAt) {\n          max = -_bigNum;\n\n          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}\n\n          wrapAt--;\n        }\n\n        distances = cache[l] = [];\n        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n        originY = ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n        max = 0;\n        min = _bigNum;\n\n        for (j = 0; j < l; j++) {\n          x = j % wrapAt - originX;\n          y = originY - (j / wrapAt | 0);\n          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n          d > max && (max = d);\n          d < min && (min = d);\n        }\n\n        from === \"random\" && shuffle(distances);\n        distances.max = max - min;\n        distances.min = min;\n        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n        distances.b = l < 0 ? base - l : base;\n        distances.u = getUnit(vars.amount || vars.each) || 0;\n        ease = ease && l < 0 ? _invertEase(ease) : ease;\n      }\n\n      l = (distances[i] - distances.min) / distances.max || 0;\n      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;\n    };\n  },\n      _roundModifier = function _roundModifier(v) {\n    var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length);\n    return function (raw) {\n      var n = Math.round(parseFloat(raw) / v) * v * p;\n      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));\n    };\n  },\n      snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo),\n        radius,\n        is2D;\n\n    if (!isArray && _isObject(snapTo)) {\n      radius = isArray = snapTo.radius || _bigNum;\n\n      if (snapTo.values) {\n        snapTo = toArray(snapTo.values);\n\n        if (is2D = !_isNumber(snapTo[0])) {\n          radius *= radius;\n        }\n      } else {\n        snapTo = _roundModifier(snapTo.increment);\n      }\n    }\n\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {\n      is2D = snapTo(raw);\n      return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function (raw) {\n      var x = parseFloat(is2D ? raw.x : raw),\n          y = parseFloat(is2D ? raw.y : 0),\n          min = _bigNum,\n          closest = 0,\n          i = snapTo.length,\n          dx,\n          dy;\n\n      while (i--) {\n        if (is2D) {\n          dx = snapTo[i].x - x;\n          dy = snapTo[i].y - y;\n          dx = dx * dx + dy * dy;\n        } else {\n          dx = Math.abs(snapTo[i] - x);\n        }\n\n        if (dx < min) {\n          min = dx;\n          closest = i;\n        }\n      }\n\n      closest = !radius || min <= radius ? snapTo[closest] : raw;\n      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n  },\n      random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {\n      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n  },\n      pipe = function pipe() {\n    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\n      functions[_key] = arguments[_key];\n    }\n\n    return function (value) {\n      return functions.reduce(function (v, f) {\n        return f(v);\n      }, value);\n    };\n  },\n      unitize = function unitize(func, unit) {\n    return function (value) {\n      return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n  },\n      normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n  },\n      _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function (index) {\n      return a[~~wrapper(index)];\n    });\n  },\n      wrap = function wrap(min, max, value) {\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {\n      return (range + (value - min) % range) % range + min;\n    });\n  },\n      wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min,\n        total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {\n      value = (total + (value - min) % total) % total || 0;\n      return min + (value > range ? total - value : value);\n    });\n  },\n      _replaceRandom = function _replaceRandom(value) {\n    var prev = 0,\n        s = \"\",\n        i,\n        nums,\n        end,\n        isArray;\n\n    while (~(i = value.indexOf(\"random(\", prev))) {\n      end = value.indexOf(\")\", i);\n      isArray = value.charAt(i + 7) === \"[\";\n      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n      prev = end + 1;\n    }\n\n    return s + value.substr(prev, value.length - prev);\n  },\n      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin,\n        outRange = outMax - outMin;\n    return _conditionalReturn(value, function (value) {\n      return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n  },\n      interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function (p) {\n      return (1 - p) * start + p * end;\n    };\n\n    if (!func) {\n      var isString = _isString(start),\n          master = {},\n          p,\n          i,\n          interpolators,\n          l,\n          il;\n\n      progress === true && (mutate = 1) && (progress = null);\n\n      if (isString) {\n        start = {\n          p: start\n        };\n        end = {\n          p: end\n        };\n      } else if (_isArray(start) && !_isArray(end)) {\n        interpolators = [];\n        l = start.length;\n        il = l - 2;\n\n        for (i = 1; i < l; i++) {\n          interpolators.push(interpolate(start[i - 1], start[i]));\n        }\n\n        l--;\n\n        func = function func(p) {\n          p *= l;\n          var i = Math.min(il, ~~p);\n          return interpolators[i](p - i);\n        };\n\n        progress = end;\n      } else if (!mutate) {\n        start = _merge(_isArray(start) ? [] : {}, start);\n      }\n\n      if (!interpolators) {\n        for (p in end) {\n          _addPropTween.call(master, start, p, \"get\", end[p]);\n        }\n\n        func = function func(p) {\n          return _renderPropTweens(p, master) || (isString ? start.p : start);\n        };\n      }\n    }\n\n    return _conditionalReturn(progress, func);\n  },\n      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    var labels = timeline.labels,\n        min = _bigNum,\n        p,\n        distance,\n        label;\n\n    for (p in labels) {\n      distance = labels[p] - fromTime;\n\n      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n        label = p;\n        min = distance;\n      }\n    }\n\n    return label;\n  },\n      _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars,\n        callback = v[type],\n        params,\n        scope;\n\n    if (!callback) {\n      return;\n    }\n\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender();\n    return params ? callback.apply(scope, params) : callback.call(scope);\n  },\n      _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n\n    animation.scrollTrigger && animation.scrollTrigger.kill(false);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n  },\n      _quickTween,\n      _createPlugin = function _createPlugin(config) {\n    config = !config.name && config[\"default\"] || config;\n\n    var name = config.name,\n        isFunc = _isFunction(config),\n        Plugin = name && !isFunc && config.init ? function () {\n      this._props = [];\n    } : config,\n        instanceDefaults = {\n      init: _emptyFunc,\n      render: _renderPropTweens,\n      add: _addPropTween,\n      kill: _killPropTweensOf,\n      modifier: _addPluginModifier,\n      rawVars: 0\n    },\n        statics = {\n      targetTest: 0,\n      get: 0,\n      getSetter: _getSetter,\n      aliases: {},\n      register: 0\n    };\n\n    _wake();\n\n    if (config !== Plugin) {\n      if (_plugins[name]) {\n        return;\n      }\n\n      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));\n\n      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));\n\n      _plugins[Plugin.prop = name] = Plugin;\n\n      if (config.targetTest) {\n        _harnessPlugins.push(Plugin);\n\n        _reservedProps[name] = 1;\n      }\n\n      name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\";\n    }\n\n    _addGlobal(name, Plugin);\n\n    config.register && config.register(gsap, Plugin, PropTween);\n  },\n      _255 = 255,\n      _colorLookup = {\n    aqua: [0, _255, _255],\n    lime: [0, _255, 0],\n    silver: [192, 192, 192],\n    black: [0, 0, 0],\n    maroon: [128, 0, 0],\n    teal: [0, 128, 128],\n    blue: [0, 0, _255],\n    navy: [0, 0, 128],\n    white: [_255, _255, _255],\n    olive: [128, 128, 0],\n    yellow: [_255, _255, 0],\n    orange: [_255, 165, 0],\n    gray: [128, 128, 128],\n    purple: [128, 0, 128],\n    green: [0, 128, 0],\n    red: [_255, 0, 0],\n    pink: [_255, 192, 203],\n    cyan: [0, _255, _255],\n    transparent: [_255, _255, _255, 0]\n  },\n      _hue = function _hue(h, m1, m2) {\n    h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n  },\n      splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,\n        r,\n        g,\n        b,\n        h,\n        s,\n        l,\n        max,\n        min,\n        d,\n        wasHSL;\n\n    if (!a) {\n      if (v.substr(-1) === \",\") {\n        v = v.substr(0, v.length - 1);\n      }\n\n      if (_colorLookup[v]) {\n        a = _colorLookup[v];\n      } else if (v.charAt(0) === \"#\") {\n        if (v.length < 6) {\n          r = v.charAt(1);\n          g = v.charAt(2);\n          b = v.charAt(3);\n          v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n        }\n\n        if (v.length === 9) {\n          a = parseInt(v.substr(1, 6), 16);\n          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];\n        }\n\n        v = parseInt(v.substr(1), 16);\n        a = [v >> 16, v >> 8 & _255, v & _255];\n      } else if (v.substr(0, 3) === \"hsl\") {\n        a = wasHSL = v.match(_strictNumExp);\n\n        if (!toHSL) {\n          h = +a[0] % 360 / 360;\n          s = +a[1] / 100;\n          l = +a[2] / 100;\n          g = l <= .5 ? l * (s + 1) : l + s - l * s;\n          r = l * 2 - g;\n          a.length > 3 && (a[3] *= 1);\n          a[0] = _hue(h + 1 / 3, r, g);\n          a[1] = _hue(h, r, g);\n          a[2] = _hue(h - 1 / 3, r, g);\n        } else if (~v.indexOf(\"=\")) {\n          a = v.match(_numExp);\n          forceAlpha && a.length < 4 && (a[3] = 1);\n          return a;\n        }\n      } else {\n        a = v.match(_strictNumExp) || _colorLookup.transparent;\n      }\n\n      a = a.map(Number);\n    }\n\n    if (toHSL && !wasHSL) {\n      r = a[0] / _255;\n      g = a[1] / _255;\n      b = a[2] / _255;\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0;\n      } else {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n        h *= 60;\n      }\n\n      a[0] = ~~(h + .5);\n      a[1] = ~~(s * 100 + .5);\n      a[2] = ~~(l * 100 + .5);\n    }\n\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n  },\n      _colorOrderData = function _colorOrderData(v) {\n    var values = [],\n        c = [],\n        i = -1;\n    v.split(_colorExp).forEach(function (v) {\n      var a = v.match(_numWithUnitExp) || [];\n      values.push.apply(values, a);\n      c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n  },\n      _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\",\n        colors = (s + result).match(_colorExp),\n        type = toHSL ? \"hsla(\" : \"rgba(\",\n        i = 0,\n        c,\n        shell,\n        d,\n        l;\n\n    if (!colors) {\n      return s;\n    }\n\n    colors = colors.map(function (color) {\n      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n\n    if (orderMatchData) {\n      d = _colorOrderData(s);\n      c = orderMatchData.c;\n\n      if (c.join(result) !== d.c.join(result)) {\n        shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n        l = shell.length - 1;\n\n        for (; i < l; i++) {\n          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n        }\n      }\n    }\n\n    if (!shell) {\n      shell = s.split(_colorExp);\n      l = shell.length - 1;\n\n      for (; i < l; i++) {\n        result += shell[i] + colors[i];\n      }\n    }\n\n    return result + shell[l];\n  },\n      _colorExp = function () {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\",\n        p;\n\n    for (p in _colorLookup) {\n      s += \"|\" + p + \"\\\\b\";\n    }\n\n    return new RegExp(s + \")\", \"gi\");\n  }(),\n      _hslExp = /hsl[a]?\\(/,\n      _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"),\n        toHSL;\n    _colorExp.lastIndex = 0;\n\n    if (_colorExp.test(combined)) {\n      toHSL = _hslExp.test(combined);\n      a[1] = _formatColors(a[1], toHSL);\n      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));\n      return true;\n    }\n  },\n      _tickerActive,\n      _ticker = function () {\n    var _getTime = Date.now,\n        _lagThreshold = 500,\n        _adjustedLag = 33,\n        _startTime = _getTime(),\n        _lastUpdate = _startTime,\n        _gap = 1000 / 240,\n        _nextTime = _gap,\n        _listeners = [],\n        _id,\n        _req,\n        _raf,\n        _self,\n        _delta,\n        _i,\n        _tick = function _tick(v) {\n      var elapsed = _getTime() - _lastUpdate,\n          manual = v === true,\n          overlap,\n          dispatch,\n          time,\n          frame;\n\n      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n      _lastUpdate += elapsed;\n      time = _lastUpdate - _startTime;\n      overlap = time - _nextTime;\n\n      if (overlap > 0 || manual) {\n        frame = ++_self.frame;\n        _delta = time - _self.time * 1000;\n        _self.time = time = time / 1000;\n        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n        dispatch = 1;\n      }\n\n      manual || (_id = _req(_tick));\n\n      if (dispatch) {\n        for (_i = 0; _i < _listeners.length; _i++) {\n          _listeners[_i](time, _delta, frame, v);\n        }\n      }\n    };\n\n    _self = {\n      time: 0,\n      frame: 0,\n      tick: function tick() {\n        _tick(true);\n      },\n      deltaRatio: function deltaRatio(fps) {\n        return _delta / (1000 / (fps || 60));\n      },\n      wake: function wake() {\n        if (_coreReady) {\n          if (!_coreInitted && _windowExists()) {\n            _win = _coreInitted = window;\n            _doc = _win.document || {};\n            _globals.gsap = gsap;\n            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n\n            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n\n            _raf = _win.requestAnimationFrame;\n          }\n\n          _id && _self.sleep();\n\n          _req = _raf || function (f) {\n            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n          };\n\n          _tickerActive = 1;\n\n          _tick(2);\n        }\n      },\n      sleep: function sleep() {\n        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n        _tickerActive = 0;\n        _req = _emptyFunc;\n      },\n      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n        _lagThreshold = threshold || 1 / _tinyNum;\n        _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n      },\n      fps: function fps(_fps) {\n        _gap = 1000 / (_fps || 240);\n        _nextTime = _self.time * 1000 + _gap;\n      },\n      add: function add(callback) {\n        _listeners.indexOf(callback) < 0 && _listeners.push(callback);\n\n        _wake();\n      },\n      remove: function remove(callback) {\n        var i;\n        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n      },\n      _listeners: _listeners\n    };\n    return _self;\n  }(),\n      _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n  },\n      _easeMap = {},\n      _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/,\n      _quotesExp = /[\"']/g,\n      _parseObjectInString = function _parseObjectInString(value) {\n    var obj = {},\n        split = value.substr(1, value.length - 3).split(\":\"),\n        key = split[0],\n        i = 1,\n        l = split.length,\n        index,\n        val,\n        parsedVal;\n\n    for (; i < l; i++) {\n      val = split[i];\n      index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n      parsedVal = val.substr(0, index);\n      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n      key = val.substr(index + 1).trim();\n    }\n\n    return obj;\n  },\n      _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1,\n        close = value.indexOf(\")\"),\n        nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n  },\n      _configEaseFromString = function _configEaseFromString(name) {\n    var split = (name + \"\").split(\"(\"),\n        ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n  },\n      _invertEase = function _invertEase(ease) {\n    return function (p) {\n      return 1 - ease(1 - p);\n    };\n  },\n      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first,\n        ease;\n\n    while (child) {\n      if (child instanceof Timeline) {\n        _propagateYoyoEase(child, isYoyo);\n      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n        if (child.timeline) {\n          _propagateYoyoEase(child.timeline, isYoyo);\n        } else {\n          ease = child._ease;\n          child._ease = child._yEase;\n          child._yEase = ease;\n          child._yoyo = isYoyo;\n        }\n      }\n\n      child = child._next;\n    }\n  },\n      _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n  },\n      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n      easeOut = function easeOut(p) {\n        return 1 - easeIn(1 - p);\n      };\n    }\n\n    if (easeInOut === void 0) {\n      easeInOut = function easeInOut(p) {\n        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n      };\n    }\n\n    var ease = {\n      easeIn: easeIn,\n      easeOut: easeOut,\n      easeInOut: easeInOut\n    },\n        lowercaseName;\n\n    _forEachName(names, function (name) {\n      _easeMap[name] = _globals[name] = ease;\n      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n\n      for (var p in ease) {\n        _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n      }\n    });\n\n    return ease;\n  },\n      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function (p) {\n      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n  },\n      _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1,\n        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),\n        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),\n        easeOut = function easeOut(p) {\n      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    p2 = _2PI / p2;\n\n    ease.config = function (amplitude, period) {\n      return _configElastic(type, amplitude, period);\n    };\n\n    return ease;\n  },\n      _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n      overshoot = 1.70158;\n    }\n\n    var easeOut = function easeOut(p) {\n      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    ease.config = function (overshoot) {\n      return _configBack(type, overshoot);\n    };\n\n    return ease;\n  };\n\n  _forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function (name, i) {\n    var power = i < 5 ? i + 1 : i;\n\n    _insertEase(name + \",Power\" + (power - 1), i ? function (p) {\n      return Math.pow(p, power);\n    } : function (p) {\n      return p;\n    }, function (p) {\n      return 1 - Math.pow(1 - p, power);\n    }, function (p) {\n      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n  });\n\n  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n\n  _insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n\n  (function (n, c) {\n    var n1 = 1 / c,\n        n2 = 2 * n1,\n        n3 = 2.5 * n1,\n        easeOut = function easeOut(p) {\n      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n\n    _insertEase(\"Bounce\", function (p) {\n      return 1 - easeOut(1 - p);\n    }, easeOut);\n  })(7.5625, 2.75);\n\n  _insertEase(\"Expo\", function (p) {\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\n  });\n\n  _insertEase(\"Circ\", function (p) {\n    return -(_sqrt(1 - p * p) - 1);\n  });\n\n  _insertEase(\"Sine\", function (p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n  });\n\n  _insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n\n  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n      if (steps === void 0) {\n        steps = 1;\n      }\n\n      var p1 = 1 / steps,\n          p2 = steps + (immediateStart ? 0 : 1),\n          p3 = immediateStart ? 1 : 0,\n          max = 1 - _tinyNum;\n      return function (p) {\n        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n      };\n    }\n  };\n  _defaults.ease = _easeMap[\"quad.out\"];\n\n  _forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function (name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n  });\n\n  var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n  };\n  var Animation = function () {\n    function Animation(vars) {\n      this.vars = vars;\n      this._delay = +vars.delay || 0;\n\n      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n        this._rDelay = vars.repeatDelay || 0;\n        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n      }\n\n      this._ts = 1;\n\n      _setDuration(this, +vars.duration, 1, 1);\n\n      this.data = vars.data;\n      _tickerActive || _ticker.wake();\n    }\n\n    var _proto = Animation.prototype;\n\n    _proto.delay = function delay(value) {\n      if (value || value === 0) {\n        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n        this._delay = value;\n        return this;\n      }\n\n      return this._delay;\n    };\n\n    _proto.duration = function duration(value) {\n      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n\n    _proto.totalDuration = function totalDuration(value) {\n      if (!arguments.length) {\n        return this._tDur;\n      }\n\n      this._dirty = 0;\n      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n      _wake();\n\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      var parent = this._dp;\n\n      if (parent && parent.smoothChildTiming && this._ts) {\n        _alignPlayhead(this, _totalTime);\n\n        !parent._dp || parent.parent || _postAddChecks(parent, this);\n\n        while (parent && parent.parent) {\n          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n            parent.totalTime(parent._tTime, true);\n          }\n\n          parent = parent.parent;\n        }\n\n        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n          _addToTimeline(this._dp, this, this._start - this._delay);\n        }\n      }\n\n      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n        this._ts || (this._pTime = _totalTime);\n\n        _lazySafeRender(this, _totalTime, suppressEvents);\n      }\n\n      return this;\n    };\n\n    _proto.time = function time(value, suppressEvents) {\n      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;\n    };\n\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n    };\n\n    _proto.progress = function progress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n    };\n\n    _proto.iteration = function iteration(value, suppressEvents) {\n      var cycleDuration = this.duration() + this._rDelay;\n\n      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    };\n\n    _proto.timeScale = function timeScale(value) {\n      if (!arguments.length) {\n        return this._rts === -_tinyNum ? 0 : this._rts;\n      }\n\n      if (this._rts === value) {\n        return this;\n      }\n\n      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;\n      this._rts = +value || 0;\n      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;\n\n      _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));\n\n      _setEnd(this);\n\n      return this;\n    };\n\n    _proto.paused = function paused(value) {\n      if (!arguments.length) {\n        return this._ps;\n      }\n\n      if (this._ps !== value) {\n        this._ps = value;\n\n        if (value) {\n          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());\n          this._ts = this._act = 0;\n        } else {\n          _wake();\n\n          this._ts = this._rts;\n          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));\n        }\n      }\n\n      return this;\n    };\n\n    _proto.startTime = function startTime(value) {\n      if (arguments.length) {\n        this._start = value;\n        var parent = this.parent || this._dp;\n        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n        return this;\n      }\n\n      return this._start;\n    };\n\n    _proto.endTime = function endTime(includeRepeats) {\n      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n    };\n\n    _proto.rawTime = function rawTime(wrapRepeats) {\n      var parent = this.parent || this._dp;\n      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n\n    _proto.globalTime = function globalTime(rawTime) {\n      var animation = this,\n          time = arguments.length ? rawTime : animation.rawTime();\n\n      while (animation) {\n        time = animation._start + time / (animation._ts || 1);\n        animation = animation._dp;\n      }\n\n      return time;\n    };\n\n    _proto.repeat = function repeat(value) {\n      if (arguments.length) {\n        this._repeat = value === Infinity ? -2 : value;\n        return _onUpdateTotalDuration(this);\n      }\n\n      return this._repeat === -2 ? Infinity : this._repeat;\n    };\n\n    _proto.repeatDelay = function repeatDelay(value) {\n      if (arguments.length) {\n        var time = this._time;\n        this._rDelay = value;\n\n        _onUpdateTotalDuration(this);\n\n        return time ? this.time(time) : this;\n      }\n\n      return this._rDelay;\n    };\n\n    _proto.yoyo = function yoyo(value) {\n      if (arguments.length) {\n        this._yoyo = value;\n        return this;\n      }\n\n      return this._yoyo;\n    };\n\n    _proto.seek = function seek(position, suppressEvents) {\n      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n    };\n\n    _proto.play = function play(from, suppressEvents) {\n      from != null && this.seek(from, suppressEvents);\n      return this.reversed(false).paused(false);\n    };\n\n    _proto.reverse = function reverse(from, suppressEvents) {\n      from != null && this.seek(from || this.totalDuration(), suppressEvents);\n      return this.reversed(true).paused(false);\n    };\n\n    _proto.pause = function pause(atTime, suppressEvents) {\n      atTime != null && this.seek(atTime, suppressEvents);\n      return this.paused(true);\n    };\n\n    _proto.resume = function resume() {\n      return this.paused(false);\n    };\n\n    _proto.reversed = function reversed(value) {\n      if (arguments.length) {\n        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));\n        return this;\n      }\n\n      return this._rts < 0;\n    };\n\n    _proto.invalidate = function invalidate() {\n      this._initted = this._act = 0;\n      this._zTime = -_tinyNum;\n      return this;\n    };\n\n    _proto.isActive = function isActive() {\n      var parent = this.parent || this._dp,\n          start = this._start,\n          rawTime;\n      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n      var vars = this.vars;\n\n      if (arguments.length > 1) {\n        if (!callback) {\n          delete vars[type];\n        } else {\n          vars[type] = callback;\n          params && (vars[type + \"Params\"] = params);\n          type === \"onUpdate\" && (this._onUpdate = callback);\n        }\n\n        return this;\n      }\n\n      return vars[type];\n    };\n\n    _proto.then = function then(onFulfilled) {\n      var self = this;\n      return new Promise(function (resolve) {\n        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,\n            _resolve = function _resolve() {\n          var _then = self.then;\n          self.then = null;\n          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n          resolve(f);\n          self.then = _then;\n        };\n\n        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n          _resolve();\n        } else {\n          self._prom = _resolve;\n        }\n      });\n    };\n\n    _proto.kill = function kill() {\n      _interrupt(this);\n    };\n\n    return Animation;\n  }();\n\n  _setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n  });\n\n  var Timeline = function (_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n\n    function Timeline(vars, position) {\n      var _this;\n\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      _this = _Animation.call(this, vars) || this;\n      _this.labels = {};\n      _this.smoothChildTiming = !!vars.smoothChildTiming;\n      _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n      _this._sort = _isNotFalse(vars.sortChildren);\n      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n      vars.reversed && _this.reverse();\n      vars.paused && _this.paused(true);\n      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n      return _this;\n    }\n\n    var _proto2 = Timeline.prototype;\n\n    _proto2.to = function to(targets, vars, position) {\n      _createTweenType(0, arguments, this);\n\n      return this;\n    };\n\n    _proto2.from = function from(targets, vars, position) {\n      _createTweenType(1, arguments, this);\n\n      return this;\n    };\n\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n      _createTweenType(2, arguments, this);\n\n      return this;\n    };\n\n    _proto2.set = function set(targets, vars, position) {\n      vars.duration = 0;\n      vars.parent = this;\n      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n      vars.immediateRender = !!vars.immediateRender;\n      new Tween(targets, vars, _parsePosition(this, position), 1);\n      return this;\n    };\n\n    _proto2.call = function call(callback, params, position) {\n      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    };\n\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.duration = duration;\n      vars.stagger = vars.stagger || stagger;\n      vars.onComplete = onCompleteAll;\n      vars.onCompleteParams = onCompleteAllParams;\n      vars.parent = this;\n      new Tween(targets, vars, _parsePosition(this, position));\n      return this;\n    };\n\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.runBackwards = 1;\n      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      toVars.startAt = fromVars;\n      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._dirty ? this.totalDuration() : this._tDur,\n          dur = this._dur,\n          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),\n          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),\n          time,\n          child,\n          next,\n          iteration,\n          cycleDuration,\n          prevPaused,\n          pauseTween,\n          timeScale,\n          prevStart,\n          prevIteration,\n          yoyo,\n          isYoyo;\n      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n\n      if (tTime !== this._tTime || force || crossingStart) {\n        if (prevTime !== this._time && dur) {\n          tTime += this._time - prevTime;\n          totalTime += this._time - prevTime;\n        }\n\n        time = tTime;\n        prevStart = this._start;\n        timeScale = this._ts;\n        prevPaused = !timeScale;\n\n        if (crossingStart) {\n          dur || (prevTime = this._zTime);\n          (totalTime || !suppressEvents) && (this._zTime = totalTime);\n        }\n\n        if (this._repeat) {\n          yoyo = this._yoyo;\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && totalTime < 0) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n          !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration);\n\n          if (yoyo && iteration & 1) {\n            time = dur - time;\n            isYoyo = 1;\n          }\n\n          if (iteration !== prevIteration && !this._lock) {\n            var rewinding = yoyo && prevIteration & 1,\n                doesWrap = rewinding === (yoyo && iteration & 1);\n            iteration < prevIteration && (rewinding = !rewinding);\n            prevTime = rewinding ? 0 : dur;\n            this._lock = 1;\n            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n            this._tTime = tTime;\n            !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n\n            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n              return this;\n            }\n\n            dur = this._dur;\n            tDur = this._tDur;\n\n            if (doesWrap) {\n              this._lock = 2;\n              prevTime = rewinding ? dur : -0.0001;\n              this.render(prevTime, true);\n              this.vars.repeatRefresh && !isYoyo && this.invalidate();\n            }\n\n            this._lock = 0;\n\n            if (!this._ts && !prevPaused) {\n              return this;\n            }\n\n            _propagateYoyoEase(this, isYoyo);\n          }\n        }\n\n        if (this._hasPause && !this._forcing && this._lock < 2) {\n          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n\n          if (pauseTween) {\n            tTime -= time - (time = pauseTween._start);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n        this._act = !timeScale;\n\n        if (!this._initted) {\n          this._onUpdate = this.vars.onUpdate;\n          this._initted = 1;\n          this._zTime = totalTime;\n          prevTime = 0;\n        }\n\n        if (!prevTime && time && !suppressEvents) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        if (time >= prevTime && totalTime >= 0) {\n          child = this._first;\n\n          while (child) {\n            next = child._next;\n\n            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = -_tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        } else {\n          child = this._last;\n          var adjustedTime = totalTime < 0 ? totalTime : time;\n\n          while (child) {\n            next = child._prev;\n\n            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        }\n\n        if (pauseTween && !suppressEvents) {\n          this.pause();\n          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n\n          if (this._ts) {\n            this._start = prevStart;\n\n            _setEnd(this);\n\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n        if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {\n          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto2.add = function add(child, position) {\n      var _this2 = this;\n\n      _isNumber(position) || (position = _parsePosition(this, position, child));\n\n      if (!(child instanceof Animation)) {\n        if (_isArray(child)) {\n          child.forEach(function (obj) {\n            return _this2.add(obj, position);\n          });\n          return this;\n        }\n\n        if (_isString(child)) {\n          return this.addLabel(child, position);\n        }\n\n        if (_isFunction(child)) {\n          child = Tween.delayedCall(0, child);\n        } else {\n          return this;\n        }\n      }\n\n      return this !== child ? _addToTimeline(this, child, position) : this;\n    };\n\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n      if (nested === void 0) {\n        nested = true;\n      }\n\n      if (tweens === void 0) {\n        tweens = true;\n      }\n\n      if (timelines === void 0) {\n        timelines = true;\n      }\n\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = -_bigNum;\n      }\n\n      var a = [],\n          child = this._first;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          if (child instanceof Tween) {\n            tweens && a.push(child);\n          } else {\n            timelines && a.push(child);\n            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n          }\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.getById = function getById(id) {\n      var animations = this.getChildren(1, 1, 1),\n          i = animations.length;\n\n      while (i--) {\n        if (animations[i].vars.id === id) {\n          return animations[i];\n        }\n      }\n    };\n\n    _proto2.remove = function remove(child) {\n      if (_isString(child)) {\n        return this.removeLabel(child);\n      }\n\n      if (_isFunction(child)) {\n        return this.killTweensOf(child);\n      }\n\n      _removeLinkedListItem(this, child);\n\n      if (child === this._recent) {\n        this._recent = this._last;\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      this._forcing = 1;\n\n      if (!this._dp && this._ts) {\n        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n      }\n\n      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n\n      this._forcing = 0;\n      return this;\n    };\n\n    _proto2.addLabel = function addLabel(label, position) {\n      this.labels[label] = _parsePosition(this, position);\n      return this;\n    };\n\n    _proto2.removeLabel = function removeLabel(label) {\n      delete this.labels[label];\n      return this;\n    };\n\n    _proto2.addPause = function addPause(position, callback, params) {\n      var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n      t.data = \"isPause\";\n      this._hasPause = 1;\n      return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n\n    _proto2.removePause = function removePause(position) {\n      var child = this._first;\n      position = _parsePosition(this, position);\n\n      while (child) {\n        if (child._start === position && child.data === \"isPause\") {\n          _removeFromParent(child);\n        }\n\n        child = child._next;\n      }\n    };\n\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      var tweens = this.getTweensOf(targets, onlyActive),\n          i = tweens.length;\n\n      while (i--) {\n        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n      }\n\n      return this;\n    };\n\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n      var a = [],\n          parsedTargets = toArray(targets),\n          child = this._first,\n          isGlobalTime = _isNumber(onlyActive),\n          children;\n\n      while (child) {\n        if (child instanceof Tween) {\n          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n            a.push(child);\n          }\n        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n          a.push.apply(a, children);\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.tweenTo = function tweenTo(position, vars) {\n      vars = vars || {};\n\n      var tl = this,\n          endTime = _parsePosition(tl, position),\n          _vars = vars,\n          startAt = _vars.startAt,\n          _onStart = _vars.onStart,\n          onStartParams = _vars.onStartParams,\n          immediateRender = _vars.immediateRender,\n          initted,\n          tween = Tween.to(tl, _setDefaults({\n        ease: vars.ease || \"none\",\n        lazy: false,\n        immediateRender: false,\n        time: endTime,\n        overwrite: \"auto\",\n        duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n        onStart: function onStart() {\n          tl.pause();\n\n          if (!initted) {\n            var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n            initted = 1;\n          }\n\n          _onStart && _onStart.apply(tween, onStartParams || []);\n        }\n      }, vars));\n\n      return immediateRender ? tween.render(0) : tween;\n    };\n\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n      return this.tweenTo(toPosition, _setDefaults({\n        startAt: {\n          time: _parsePosition(this, fromPosition)\n        }\n      }, vars));\n    };\n\n    _proto2.recent = function recent() {\n      return this._recent;\n    };\n\n    _proto2.nextLabel = function nextLabel(afterTime) {\n      if (afterTime === void 0) {\n        afterTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n      if (beforeTime === void 0) {\n        beforeTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n\n    _proto2.currentLabel = function currentLabel(value) {\n      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = 0;\n      }\n\n      var child = this._first,\n          labels = this.labels,\n          p;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          child._start += amount;\n          child._end += amount;\n        }\n\n        child = child._next;\n      }\n\n      if (adjustLabels) {\n        for (p in labels) {\n          if (labels[p] >= ignoreBeforeTime) {\n            labels[p] += amount;\n          }\n        }\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.invalidate = function invalidate() {\n      var child = this._first;\n      this._lock = 0;\n\n      while (child) {\n        child.invalidate();\n        child = child._next;\n      }\n\n      return _Animation.prototype.invalidate.call(this);\n    };\n\n    _proto2.clear = function clear(includeLabels) {\n      if (includeLabels === void 0) {\n        includeLabels = true;\n      }\n\n      var child = this._first,\n          next;\n\n      while (child) {\n        next = child._next;\n        this.remove(child);\n        child = next;\n      }\n\n      this._dp && (this._time = this._tTime = this._pTime = 0);\n      includeLabels && (this.labels = {});\n      return _uncache(this);\n    };\n\n    _proto2.totalDuration = function totalDuration(value) {\n      var max = 0,\n          self = this,\n          child = self._last,\n          prevStart = _bigNum,\n          prev,\n          start,\n          parent;\n\n      if (arguments.length) {\n        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n      }\n\n      if (self._dirty) {\n        parent = self.parent;\n\n        while (child) {\n          prev = child._prev;\n          child._dirty && child.totalDuration();\n          start = child._start;\n\n          if (start > prevStart && self._sort && child._ts && !self._lock) {\n            self._lock = 1;\n            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n          } else {\n            prevStart = start;\n          }\n\n          if (start < 0 && child._ts) {\n            max -= start;\n\n            if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n              self._start += start / self._ts;\n              self._time -= start;\n              self._tTime -= start;\n            }\n\n            self.shiftChildren(-start, false, -1e999);\n            prevStart = 0;\n          }\n\n          child._end > max && child._ts && (max = child._end);\n          child = prev;\n        }\n\n        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n\n        self._dirty = 0;\n      }\n\n      return self._tDur;\n    };\n\n    Timeline.updateRoot = function updateRoot(time) {\n      if (_globalTimeline._ts) {\n        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n\n        _lastRenderedFrame = _ticker.frame;\n      }\n\n      if (_ticker.frame >= _nextGCFrame) {\n        _nextGCFrame += _config.autoSleep || 120;\n        var child = _globalTimeline._first;\n        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {\n          while (child && !child._ts) {\n            child = child._next;\n          }\n\n          child || _ticker.sleep();\n        }\n      }\n    };\n\n    return Timeline;\n  }(Animation);\n\n  _setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n  });\n\n  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),\n        index = 0,\n        matchIndex = 0,\n        result,\n        startNums,\n        color,\n        endNum,\n        chunk,\n        startNum,\n        hasRandom,\n        a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n      end = _replaceRandom(end);\n    }\n\n    if (stringFilter) {\n      a = [start, end];\n      stringFilter(a, target, prop);\n      start = a[0];\n      end = a[1];\n    }\n\n    startNums = start.match(_complexStringNumExp) || [];\n\n    while (result = _complexStringNumExp.exec(end)) {\n      endNum = result[0];\n      chunk = end.substring(index, result.index);\n\n      if (color) {\n        color = (color + 1) % 5;\n      } else if (chunk.substr(-5) === \"rgba(\") {\n        color = 1;\n      }\n\n      if (endNum !== startNums[matchIndex++]) {\n        startNum = parseFloat(startNums[matchIndex - 1]) || 0;\n        pt._pt = {\n          _next: pt._pt,\n          p: chunk || matchIndex === 1 ? chunk : \",\",\n          s: startNum,\n          c: endNum.charAt(1) === \"=\" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === \"-\" ? -1 : 1) : parseFloat(endNum) - startNum,\n          m: color && color < 4 ? Math.round : 0\n        };\n        index = _complexStringNumExp.lastIndex;\n      }\n    }\n\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    pt.fp = funcParam;\n\n    if (_relExp.test(end) || hasRandom) {\n      pt.e = 0;\n    }\n\n    this._pt = pt;\n    return pt;\n  },\n      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop],\n        parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](),\n        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,\n        pt;\n\n    if (_isString(end)) {\n      if (~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n      }\n\n      if (end.charAt(1) === \"=\") {\n        pt = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === \"-\" ? -1 : 1) + (getUnit(parsedStart) || 0);\n\n        if (pt || pt === 0) {\n          end = pt;\n        }\n      }\n    }\n\n    if (parsedStart !== end) {\n      if (!isNaN(parsedStart * end) && end !== \"\") {\n        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n        funcParam && (pt.fp = funcParam);\n        modifier && pt.modifier(modifier, this, target);\n        return this._pt = pt;\n      }\n\n      !currentValue && !(prop in target) && _missingPlugin(prop, end);\n      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n  },\n      _processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n\n    var copy = {},\n        p;\n\n    for (p in vars) {\n      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n\n    return copy;\n  },\n      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n      if (tween !== _quickTween) {\n        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];\n        i = plugin._props.length;\n\n        while (i--) {\n          ptLookup[plugin._props[i]] = pt;\n        }\n      }\n    }\n\n    return plugin;\n  },\n      _overwritingTween,\n      _initTween = function _initTween(tween, time) {\n    var vars = tween.vars,\n        ease = vars.ease,\n        startAt = vars.startAt,\n        immediateRender = vars.immediateRender,\n        lazy = vars.lazy,\n        onUpdate = vars.onUpdate,\n        onUpdateParams = vars.onUpdateParams,\n        callbackScope = vars.callbackScope,\n        runBackwards = vars.runBackwards,\n        yoyoEase = vars.yoyoEase,\n        keyframes = vars.keyframes,\n        autoRevert = vars.autoRevert,\n        dur = tween._dur,\n        prevStartAt = tween._startAt,\n        targets = tween._targets,\n        parent = tween.parent,\n        fullTargets = parent && parent.data === \"nested\" ? parent.parent._targets : targets,\n        autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites,\n        tl = tween.timeline,\n        cleanVars,\n        i,\n        p,\n        pt,\n        target,\n        hasPriority,\n        gsData,\n        harness,\n        plugin,\n        ptLookup,\n        index,\n        harnessVars,\n        overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n      yoyoEase = tween._yEase;\n      tween._yEase = tween._ease;\n      tween._ease = yoyoEase;\n    }\n\n    tween._from = !tl && !!vars.runBackwards;\n\n    if (!tl) {\n      harness = targets[0] ? _getCache(targets[0]).harness : 0;\n      harnessVars = harness && vars[harness.prop];\n      cleanVars = _copyExcluding(vars, _reservedProps);\n      prevStartAt && prevStartAt.render(-1, true).kill();\n\n      if (startAt) {\n        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n          data: \"isStart\",\n          overwrite: false,\n          parent: parent,\n          immediateRender: true,\n          lazy: _isNotFalse(lazy),\n          startAt: null,\n          delay: 0,\n          onUpdate: onUpdate,\n          onUpdateParams: onUpdateParams,\n          callbackScope: callbackScope,\n          stagger: 0\n        }, startAt)));\n\n        time < 0 && !immediateRender && !autoRevert && tween._startAt.render(-1, true);\n\n        if (immediateRender) {\n          time > 0 && !autoRevert && (tween._startAt = 0);\n\n          if (dur && time <= 0) {\n            time && (tween._zTime = time);\n            return;\n          }\n        } else if (autoRevert === false) {\n          tween._startAt = 0;\n        }\n      } else if (runBackwards && dur) {\n        if (prevStartAt) {\n          !autoRevert && (tween._startAt = 0);\n        } else {\n          time && (immediateRender = false);\n          p = _setDefaults({\n            overwrite: false,\n            data: \"isFromStart\",\n            lazy: immediateRender && _isNotFalse(lazy),\n            immediateRender: immediateRender,\n            stagger: 0,\n            parent: parent\n          }, cleanVars);\n          harnessVars && (p[harness.prop] = harnessVars);\n\n          _removeFromParent(tween._startAt = Tween.set(targets, p));\n\n          time < 0 && tween._startAt.render(-1, true);\n\n          if (!immediateRender) {\n            _initTween(tween._startAt, _tinyNum);\n          } else if (!time) {\n            return;\n          }\n        }\n      }\n\n      tween._pt = 0;\n      lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n\n      for (i = 0; i < targets.length; i++) {\n        target = targets[i];\n        gsData = target._gsap || _harness(targets)[i]._gsap;\n        tween._ptLookup[i] = ptLookup = {};\n        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();\n        index = fullTargets === targets ? i : fullTargets.indexOf(target);\n\n        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n          plugin._props.forEach(function (name) {\n            ptLookup[name] = pt;\n          });\n\n          plugin.priority && (hasPriority = 1);\n        }\n\n        if (!harness || harnessVars) {\n          for (p in cleanVars) {\n            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n              plugin.priority && (hasPriority = 1);\n            } else {\n              ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n            }\n          }\n        }\n\n        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n\n        if (autoOverwrite && tween._pt) {\n          _overwritingTween = tween;\n\n          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));\n\n          overwritten = !tween.parent;\n          _overwritingTween = 0;\n        }\n\n        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n      }\n\n      hasPriority && _sortPropTweensByPriority(tween);\n      tween._onInit && tween._onInit(tween);\n    }\n\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten;\n  },\n      _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0,\n        propertyAliases = harness && harness.aliases,\n        copy,\n        p,\n        i,\n        aliases;\n\n    if (!propertyAliases) {\n      return vars;\n    }\n\n    copy = _merge({}, vars);\n\n    for (p in propertyAliases) {\n      if (p in copy) {\n        aliases = propertyAliases[p].split(\",\");\n        i = aliases.length;\n\n        while (i--) {\n          copy[aliases[i]] = copy[p];\n        }\n      }\n    }\n\n    return copy;\n  },\n      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n  },\n      _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase\",\n      _staggerPropsToSkip = (_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\").split(\",\");\n\n  var Tween = function (_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n\n    function Tween(targets, vars, position, skipInherit) {\n      var _this3;\n\n      if (typeof vars === \"number\") {\n        position.duration = vars;\n        vars = position;\n        position = null;\n      }\n\n      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n      var _this3$vars = _this3.vars,\n          duration = _this3$vars.duration,\n          delay = _this3$vars.delay,\n          immediateRender = _this3$vars.immediateRender,\n          stagger = _this3$vars.stagger,\n          overwrite = _this3$vars.overwrite,\n          keyframes = _this3$vars.keyframes,\n          defaults = _this3$vars.defaults,\n          scrollTrigger = _this3$vars.scrollTrigger,\n          yoyoEase = _this3$vars.yoyoEase,\n          parent = vars.parent || _globalTimeline,\n          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [targets] : toArray(targets),\n          tl,\n          i,\n          copy,\n          l,\n          p,\n          curTarget,\n          staggerFunc,\n          staggerVarsToMerge;\n      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n      _this3._ptLookup = [];\n      _this3._overwrite = overwrite;\n\n      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n        vars = _this3.vars;\n        tl = _this3.timeline = new Timeline({\n          data: \"nested\",\n          defaults: defaults || {}\n        });\n        tl.kill();\n        tl.parent = tl._dp = _assertThisInitialized(_this3);\n        tl._start = 0;\n\n        if (keyframes) {\n          _inheritDefaults(_setDefaults(tl.vars.defaults, {\n            ease: \"none\"\n          }));\n\n          stagger ? parsedTargets.forEach(function (t, i) {\n            return keyframes.forEach(function (frame, j) {\n              return tl.to(t, frame, j ? \">\" : i * stagger);\n            });\n          }) : keyframes.forEach(function (frame) {\n            return tl.to(parsedTargets, frame, \">\");\n          });\n        } else {\n          l = parsedTargets.length;\n          staggerFunc = stagger ? distribute(stagger) : _emptyFunc;\n\n          if (_isObject(stagger)) {\n            for (p in stagger) {\n              if (~_staggerTweenProps.indexOf(p)) {\n                staggerVarsToMerge || (staggerVarsToMerge = {});\n                staggerVarsToMerge[p] = stagger[p];\n              }\n            }\n          }\n\n          for (i = 0; i < l; i++) {\n            copy = {};\n\n            for (p in vars) {\n              if (_staggerPropsToSkip.indexOf(p) < 0) {\n                copy[p] = vars[p];\n              }\n            }\n\n            copy.stagger = 0;\n            yoyoEase && (copy.yoyoEase = yoyoEase);\n            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n            curTarget = parsedTargets[i];\n            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n\n            if (!stagger && l === 1 && copy.delay) {\n              _this3._delay = delay = copy.delay;\n              _this3._start += delay;\n              copy.delay = 0;\n            }\n\n            tl.to(curTarget, copy, staggerFunc(i, curTarget, parsedTargets));\n          }\n\n          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;\n        }\n\n        duration || _this3.duration(duration = tl.duration());\n      } else {\n        _this3.timeline = 0;\n      }\n\n      if (overwrite === true && !_suppressOverwrites) {\n        _overwritingTween = _assertThisInitialized(_this3);\n\n        _globalTimeline.killTweensOf(parsedTargets);\n\n        _overwritingTween = 0;\n      }\n\n      _addToTimeline(parent, _assertThisInitialized(_this3), position);\n\n      vars.reversed && _this3.reverse();\n      vars.paused && _this3.paused(true);\n\n      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n        _this3._tTime = -_tinyNum;\n\n        _this3.render(Math.max(0, -delay));\n      }\n\n      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n      return _this3;\n    }\n\n    var _proto3 = Tween.prototype;\n\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._tDur,\n          dur = this._dur,\n          tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n          time,\n          pt,\n          iteration,\n          cycleDuration,\n          prevIteration,\n          isYoyo,\n          ratio,\n          timeline,\n          yoyoEase;\n\n      if (!dur) {\n        _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== totalTime < 0) {\n        time = tTime;\n        timeline = this.timeline;\n\n        if (this._repeat) {\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && totalTime < 0) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          isYoyo = this._yoyo && iteration & 1;\n\n          if (isYoyo) {\n            yoyoEase = this._yEase;\n            time = dur - time;\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n\n          if (time === prevTime && !force && this._initted) {\n            return this;\n          }\n\n          if (iteration !== prevIteration) {\n            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);\n\n            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n              this._lock = force = 1;\n              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n            }\n          }\n        }\n\n        if (!this._initted) {\n          if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {\n            this._tTime = 0;\n            return this;\n          }\n\n          if (dur !== this._dur) {\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n\n        if (!this._act && this._ts) {\n          this._act = 1;\n          this._lazy = 0;\n        }\n\n        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n\n        if (this._from) {\n          this.ratio = ratio = 1 - ratio;\n        }\n\n        if (time && !prevTime && !suppressEvents) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        pt = this._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n\n        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * ratio, suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n\n        if (this._onUpdate && !suppressEvents) {\n          totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force);\n\n          _callback(this, \"onUpdate\");\n        }\n\n        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n\n        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n          totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);\n          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {\n            _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto3.targets = function targets() {\n      return this._targets;\n    };\n\n    _proto3.invalidate = function invalidate() {\n      this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;\n      this._ptLookup = [];\n      this.timeline && this.timeline.invalidate();\n      return _Animation2.prototype.invalidate.call(this);\n    };\n\n    _proto3.kill = function kill(targets, vars) {\n      if (vars === void 0) {\n        vars = \"all\";\n      }\n\n      if (!targets && (!vars || vars === \"all\")) {\n        this._lazy = this._pt = 0;\n        return this.parent ? _interrupt(this) : this;\n      }\n\n      if (this.timeline) {\n        var tDur = this.timeline.totalDuration();\n        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);\n        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);\n        return this;\n      }\n\n      var parsedTargets = this._targets,\n          killingTargets = targets ? toArray(targets) : parsedTargets,\n          propTweenLookup = this._ptLookup,\n          firstPT = this._pt,\n          overwrittenProps,\n          curLookup,\n          curOverwriteProps,\n          props,\n          p,\n          pt,\n          i;\n\n      if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n        vars === \"all\" && (this._pt = 0);\n        return _interrupt(this);\n      }\n\n      overwrittenProps = this._op = this._op || [];\n\n      if (vars !== \"all\") {\n        if (_isString(vars)) {\n          p = {};\n\n          _forEachName(vars, function (name) {\n            return p[name] = 1;\n          });\n\n          vars = p;\n        }\n\n        vars = _addAliasesToVars(parsedTargets, vars);\n      }\n\n      i = parsedTargets.length;\n\n      while (i--) {\n        if (~killingTargets.indexOf(parsedTargets[i])) {\n          curLookup = propTweenLookup[i];\n\n          if (vars === \"all\") {\n            overwrittenProps[i] = vars;\n            props = curLookup;\n            curOverwriteProps = {};\n          } else {\n            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n            props = vars;\n          }\n\n          for (p in props) {\n            pt = curLookup && curLookup[p];\n\n            if (pt) {\n              if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                _removeLinkedListItem(this, pt, \"_pt\");\n              }\n\n              delete curLookup[p];\n            }\n\n            if (curOverwriteProps !== \"all\") {\n              curOverwriteProps[p] = 1;\n            }\n          }\n        }\n      }\n\n      this._initted && !this._pt && firstPT && _interrupt(this);\n      return this;\n    };\n\n    Tween.to = function to(targets, vars) {\n      return new Tween(targets, vars, arguments[2]);\n    };\n\n    Tween.from = function from(targets, vars) {\n      return _createTweenType(1, arguments);\n    };\n\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n      return new Tween(callback, 0, {\n        immediateRender: false,\n        lazy: false,\n        overwrite: false,\n        delay: delay,\n        onComplete: callback,\n        onReverseComplete: callback,\n        onCompleteParams: params,\n        onReverseCompleteParams: params,\n        callbackScope: scope\n      });\n    };\n\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n      return _createTweenType(2, arguments);\n    };\n\n    Tween.set = function set(targets, vars) {\n      vars.duration = 0;\n      vars.repeatDelay || (vars.repeat = 0);\n      return new Tween(targets, vars);\n    };\n\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n\n    return Tween;\n  }(Animation);\n\n  _setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n  });\n\n  _forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function (name) {\n    Tween[name] = function () {\n      var tl = new Timeline(),\n          params = _slice.call(arguments, 0);\n\n      params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n      return tl[name].apply(tl, params);\n    };\n  });\n\n  var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n  },\n      _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n  },\n      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n  },\n      _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n  },\n      _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n  },\n      _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n  },\n      _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n  },\n      _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt,\n        s = \"\";\n\n    if (!ratio && data.b) {\n      s = data.b;\n    } else if (ratio === 1 && data.e) {\n      s = data.e;\n    } else {\n      while (pt) {\n        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;\n        pt = pt._next;\n      }\n\n      s += data.c;\n    }\n\n    data.set(data.t, data.p, s, data);\n  },\n      _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n  },\n      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt,\n        next;\n\n    while (pt) {\n      next = pt._next;\n      pt.p === property && pt.modifier(modifier, tween, target);\n      pt = next;\n    }\n  },\n      _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt,\n        hasNonDependentRemaining,\n        next;\n\n    while (pt) {\n      next = pt._next;\n\n      if (pt.p === property && !pt.op || pt.op === property) {\n        _removeLinkedListItem(this, pt, \"_pt\");\n      } else if (!pt.dep) {\n        hasNonDependentRemaining = 1;\n      }\n\n      pt = next;\n    }\n\n    return !hasNonDependentRemaining;\n  },\n      _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n  },\n      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt,\n        next,\n        pt2,\n        first,\n        last;\n\n    while (pt) {\n      next = pt._next;\n      pt2 = first;\n\n      while (pt2 && pt2.pr > pt.pr) {\n        pt2 = pt2._next;\n      }\n\n      if (pt._prev = pt2 ? pt2._prev : last) {\n        pt._prev._next = pt;\n      } else {\n        first = pt;\n      }\n\n      if (pt._next = pt2) {\n        pt2._prev = pt;\n      } else {\n        last = pt;\n      }\n\n      pt = next;\n    }\n\n    parent._pt = first;\n  };\n\n  var PropTween = function () {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n      this.t = target;\n      this.s = start;\n      this.c = change;\n      this.p = prop;\n      this.r = renderer || _renderPlain;\n      this.d = data || this;\n      this.set = setter || _setterPlain;\n      this.pr = priority || 0;\n      this._next = next;\n\n      if (next) {\n        next._prev = this;\n      }\n    }\n\n    var _proto4 = PropTween.prototype;\n\n    _proto4.modifier = function modifier(func, tween, target) {\n      this.mSet = this.mSet || this.set;\n      this.set = _setterWithModifier;\n      this.m = func;\n      this.mt = target;\n      this.tween = tween;\n    };\n\n    return PropTween;\n  }();\n\n  _forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function (name) {\n    return _reservedProps[name] = 1;\n  });\n\n  _globals.TweenMax = _globals.TweenLite = Tween;\n  _globals.TimelineLite = _globals.TimelineMax = Timeline;\n  _globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n  });\n  _config.stringFilter = _colorStringFilter;\n  var _gsap = {\n    registerPlugin: function registerPlugin() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      args.forEach(function (config) {\n        return _createPlugin(config);\n      });\n    },\n    timeline: function timeline(vars) {\n      return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n      return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n      _isString(target) && (target = toArray(target)[0]);\n\n      var getter = _getCache(target || {}).get,\n          format = unit ? _passThrough : _numericIfPossible;\n\n      unit === \"native\" && (unit = \"\");\n      return !target ? target : !property ? function (property, unit, uncache) {\n        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n      target = toArray(target);\n\n      if (target.length > 1) {\n        var setters = target.map(function (t) {\n          return gsap.quickSetter(t, property, unit);\n        }),\n            l = setters.length;\n        return function (value) {\n          var i = l;\n\n          while (i--) {\n            setters[i](value);\n          }\n        };\n      }\n\n      target = target[0] || {};\n\n      var Plugin = _plugins[property],\n          cache = _getCache(target),\n          p = cache.harness && (cache.harness.aliases || {})[property] || property,\n          setter = Plugin ? function (value) {\n        var p = new Plugin();\n        _quickTween._pt = 0;\n        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);\n        p.render(1, p);\n        _quickTween._pt && _renderPropTweens(1, _quickTween);\n      } : cache.set(target, p);\n\n      return Plugin ? setter : function (value) {\n        return setter(target, p, unit ? value + unit : value, cache, 1);\n      };\n    },\n    isTweening: function isTweening(targets) {\n      return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n      return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n      return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n      var name = _ref3.name,\n          effect = _ref3.effect,\n          plugins = _ref3.plugins,\n          defaults = _ref3.defaults,\n          extendTimeline = _ref3.extendTimeline;\n      (plugins || \"\").split(\",\").forEach(function (pluginName) {\n        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n      });\n\n      _effects[name] = function (targets, vars, tl) {\n        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n      };\n\n      if (extendTimeline) {\n        Timeline.prototype[name] = function (targets, vars, position) {\n          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n        };\n      }\n    },\n    registerEase: function registerEase(name, ease) {\n      _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n      return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      var tl = new Timeline(vars),\n          child,\n          next;\n      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n\n      _globalTimeline.remove(tl);\n\n      tl._dp = 0;\n      tl._time = tl._tTime = _globalTimeline._time;\n      child = _globalTimeline._first;\n\n      while (child) {\n        next = child._next;\n\n        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n          _addToTimeline(tl, child, child._start - child._delay);\n        }\n\n        child = next;\n      }\n\n      _addToTimeline(_globalTimeline, tl, 0);\n\n      return tl;\n    },\n    utils: {\n      wrap: wrap,\n      wrapYoyo: wrapYoyo,\n      distribute: distribute,\n      random: random,\n      snap: snap,\n      normalize: normalize,\n      getUnit: getUnit,\n      clamp: clamp,\n      splitColor: splitColor,\n      toArray: toArray,\n      selector: selector,\n      mapRange: mapRange,\n      pipe: pipe,\n      unitize: unitize,\n      interpolate: interpolate,\n      shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n      PropTween: PropTween,\n      globals: _addGlobal,\n      Tween: Tween,\n      Timeline: Timeline,\n      Animation: Animation,\n      getCache: _getCache,\n      _removeLinkedListItem: _removeLinkedListItem,\n      suppressOverwrites: function suppressOverwrites(value) {\n        return _suppressOverwrites = value;\n      }\n    }\n  };\n\n  _forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function (name) {\n    return _gsap[name] = Tween[name];\n  });\n\n  _ticker.add(Timeline.updateRoot);\n\n  _quickTween = _gsap.to({}, {\n    duration: 0\n  });\n\n  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n\n    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {\n      pt = pt._next;\n    }\n\n    return pt;\n  },\n      _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets,\n        p,\n        i,\n        pt;\n\n    for (p in modifiers) {\n      i = targets.length;\n\n      while (i--) {\n        pt = tween._ptLookup[i][p];\n\n        if (pt && (pt = pt.d)) {\n          if (pt._pt) {\n            pt = _getPluginPropTween(pt, p);\n          }\n\n          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n        }\n      }\n    }\n  },\n      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n      name: name,\n      rawVars: 1,\n      init: function init(target, vars, tween) {\n        tween._onInit = function (tween) {\n          var temp, p;\n\n          if (_isString(vars)) {\n            temp = {};\n\n            _forEachName(vars, function (name) {\n              return temp[name] = 1;\n            });\n\n            vars = temp;\n          }\n\n          if (modifier) {\n            temp = {};\n\n            for (p in vars) {\n              temp[p] = modifier(vars[p]);\n            }\n\n            vars = temp;\n          }\n\n          _addModifiers(tween, vars);\n        };\n      }\n    };\n  };\n\n  var gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n      var p, pt;\n\n      for (p in vars) {\n        pt = this.add(target, \"setAttribute\", (target.getAttribute(p) || 0) + \"\", vars[p], index, targets, 0, 0, p);\n        pt && (pt.op = p);\n\n        this._props.push(p);\n      }\n    }\n  }, {\n    name: \"endArray\",\n    init: function init(target, value) {\n      var i = value.length;\n\n      while (i--) {\n        this.add(target, i, target[i] || 0, value[i]);\n      }\n    }\n  }, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap;\n  Tween.version = Timeline.version = gsap.version = \"3.8.0\";\n  _coreReady = 1;\n  _windowExists() && _wake();\n  var Power0 = _easeMap.Power0,\n      Power1 = _easeMap.Power1,\n      Power2 = _easeMap.Power2,\n      Power3 = _easeMap.Power3,\n      Power4 = _easeMap.Power4,\n      Linear = _easeMap.Linear,\n      Quad = _easeMap.Quad,\n      Cubic = _easeMap.Cubic,\n      Quart = _easeMap.Quart,\n      Quint = _easeMap.Quint,\n      Strong = _easeMap.Strong,\n      Elastic = _easeMap.Elastic,\n      Back = _easeMap.Back,\n      SteppedEase = _easeMap.SteppedEase,\n      Bounce = _easeMap.Bounce,\n      Sine = _easeMap.Sine,\n      Expo = _easeMap.Expo,\n      Circ = _easeMap.Circ;\n\n  var _win$1,\n      _doc$1,\n      _docElement,\n      _pluginInitted,\n      _tempDiv,\n      _tempDivStyler,\n      _recentSetterPlugin,\n      _windowExists$1 = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _transformProps = {},\n      _RAD2DEG = 180 / Math.PI,\n      _DEG2RAD = Math.PI / 180,\n      _atan2 = Math.atan2,\n      _bigNum$1 = 1e8,\n      _capsExp = /([A-Z])/g,\n      _horizontalExp = /(?:left|right|width|margin|padding|x)/i,\n      _complexExp = /[\\s,\\(]\\S/,\n      _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n  },\n      _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n  },\n      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n  },\n      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n  },\n      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n  },\n      _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n  },\n      _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n  },\n      _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n  },\n      _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n  },\n      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _transformProp = \"transform\",\n      _transformOriginProp = _transformProp + \"Origin\",\n      _supports3D,\n      _createElement = function _createElement(type, ns) {\n    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc$1.createElement(type);\n    return e.style ? e : _doc$1.createElement(type);\n  },\n      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\";\n  },\n      _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"),\n      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv,\n        s = e.style,\n        i = 5;\n\n    if (property in s && !preferPrefix) {\n      return property;\n    }\n\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n\n    while (i-- && !(_prefixes[i] + property in s)) {}\n\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n  },\n      _initCore = function _initCore() {\n    if (_windowExists$1() && window.document) {\n      _win$1 = window;\n      _doc$1 = _win$1.document;\n      _docElement = _doc$1.documentElement;\n      _tempDiv = _createElement(\"div\") || {\n        style: {}\n      };\n      _tempDivStyler = _createElement(\"div\");\n      _transformProp = _checkPropPrefix(_transformProp);\n      _transformOriginProp = _transformProp + \"Origin\";\n      _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\";\n      _supports3D = !!_checkPropPrefix(\"perspective\");\n      _pluginInitted = 1;\n    }\n  },\n      _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"),\n        oldParent = this.parentNode,\n        oldSibling = this.nextSibling,\n        oldCSS = this.style.cssText,\n        bbox;\n\n    _docElement.appendChild(svg);\n\n    svg.appendChild(this);\n    this.style.display = \"block\";\n\n    if (swapIfPossible) {\n      try {\n        bbox = this.getBBox();\n        this._gsapBBox = this.getBBox;\n        this.getBBox = _getBBoxHack;\n      } catch (e) {}\n    } else if (this._gsapBBox) {\n      bbox = this._gsapBBox();\n    }\n\n    if (oldParent) {\n      if (oldSibling) {\n        oldParent.insertBefore(this, oldSibling);\n      } else {\n        oldParent.appendChild(this);\n      }\n    }\n\n    _docElement.removeChild(svg);\n\n    this.style.cssText = oldCSS;\n    return bbox;\n  },\n      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n\n    while (i--) {\n      if (target.hasAttribute(attributesArray[i])) {\n        return target.getAttribute(attributesArray[i]);\n      }\n    }\n  },\n      _getBBox = function _getBBox(target) {\n    var bounds;\n\n    try {\n      bounds = target.getBBox();\n    } catch (error) {\n      bounds = _getBBoxHack.call(target, true);\n    }\n\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n      x: +_getAttributeFallbacks(target, [\"x\", \"cx\", \"x1\"]) || 0,\n      y: +_getAttributeFallbacks(target, [\"y\", \"cy\", \"y1\"]) || 0,\n      width: 0,\n      height: 0\n    } : bounds;\n  },\n      _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n  },\n      _removeProperty = function _removeProperty(target, property) {\n    if (property) {\n      var style = target.style;\n\n      if (property in _transformProps && property !== _transformOriginProp) {\n        property = _transformProp;\n      }\n\n      if (style.removeProperty) {\n        if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n          property = \"-\" + property;\n        }\n\n        style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n      } else {\n        style.removeAttribute(property);\n      }\n    }\n  },\n      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n  },\n      _convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0,\n        curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\",\n        style = _tempDiv.style,\n        horizontal = _horizontalExp.test(property),\n        isRootSVG = target.tagName.toLowerCase() === \"svg\",\n        measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"),\n        amount = 100,\n        toPixels = unit === \"px\",\n        toPercent = unit === \"%\",\n        px,\n        parent,\n        cache,\n        isSVG;\n\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n      return curValue;\n    }\n\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n      px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n\n    if (isSVG) {\n      parent = (target.ownerSVGElement || {}).parentNode;\n    }\n\n    if (!parent || parent === _doc$1 || !parent.appendChild) {\n      parent = _doc$1.body;\n    }\n\n    cache = parent._gsap;\n\n    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time) {\n      return _round(curValue / cache.width * amount);\n    } else {\n      (toPercent || curUnit === \"%\") && (style.position = _getComputedProperty(target, \"position\"));\n      parent === target && (style.position = \"static\");\n      parent.appendChild(_tempDiv);\n      px = _tempDiv[measureProperty];\n      parent.removeChild(_tempDiv);\n      style.position = \"absolute\";\n\n      if (horizontal && toPercent) {\n        cache = _getCache(parent);\n        cache.time = _ticker.time;\n        cache.width = parent[measureProperty];\n      }\n    }\n\n    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n  },\n      _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n\n    if (property in _propertyAliases && property !== \"transform\") {\n      property = _propertyAliases[property];\n\n      if (~property.indexOf(\",\")) {\n        property = property.split(\",\")[0];\n      }\n    }\n\n    if (_transformProps[property] && property !== \"transform\") {\n      value = _parseTransform(target, uncache);\n      value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n      value = target.style[property];\n\n      if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0);\n      }\n    }\n\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n  },\n      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    if (!start || start === \"none\") {\n      var p = _checkPropPrefix(prop, target, 1),\n          s = p && _getComputedProperty(target, p, 1);\n\n      if (s && s !== start) {\n        prop = p;\n        start = s;\n      } else if (prop === \"borderColor\") {\n        start = _getComputedProperty(target, \"borderTopColor\");\n      }\n    }\n\n    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\n        index = 0,\n        matchIndex = 0,\n        a,\n        result,\n        startValues,\n        startNum,\n        color,\n        startValue,\n        endValue,\n        endNum,\n        chunk,\n        endUnit,\n        startUnit,\n        relative,\n        endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (end === \"auto\") {\n      target.style[prop] = end;\n      end = _getComputedProperty(target, prop) || end;\n      target.style[prop] = start;\n    }\n\n    a = [start, end];\n\n    _colorStringFilter(a);\n\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_numWithUnitExp) || [];\n    endValues = end.match(_numWithUnitExp) || [];\n\n    if (endValues.length) {\n      while (result = _numWithUnitExp.exec(end)) {\n        endValue = result[0];\n        chunk = end.substring(index, result.index);\n\n        if (color) {\n          color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n          color = 1;\n        }\n\n        if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n          startNum = parseFloat(startValue) || 0;\n          startUnit = startValue.substr((startNum + \"\").length);\n          relative = endValue.charAt(1) === \"=\" ? +(endValue.charAt(0) + \"1\") : 0;\n\n          if (relative) {\n            endValue = endValue.substr(2);\n          }\n\n          endNum = parseFloat(endValue);\n          endUnit = endValue.substr((endNum + \"\").length);\n          index = _numWithUnitExp.lastIndex - endUnit.length;\n\n          if (!endUnit) {\n            endUnit = endUnit || _config.units[prop] || startUnit;\n\n            if (index === end.length) {\n              end += endUnit;\n              pt.e += endUnit;\n            }\n          }\n\n          if (startUnit !== endUnit) {\n            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n          }\n\n          pt._pt = {\n            _next: pt._pt,\n            p: chunk || matchIndex === 1 ? chunk : \",\",\n            s: startNum,\n            c: relative ? relative * endNum : endNum - startNum,\n            m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n          };\n        }\n      }\n\n      pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    } else {\n      pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n\n    _relExp.test(end) && (pt.e = 0);\n    this._pt = pt;\n    return pt;\n  },\n      _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n  },\n      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"),\n        x = split[0],\n        y = split[1] || \"50%\";\n\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n      value = x;\n      x = y;\n      y = value;\n    }\n\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n  },\n      _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n      var target = data.t,\n          style = target.style,\n          props = data.u,\n          cache = target._gsap,\n          prop,\n          clearTransforms,\n          i;\n\n      if (props === \"all\" || props === true) {\n        style.cssText = \"\";\n        clearTransforms = 1;\n      } else {\n        props = props.split(\",\");\n        i = props.length;\n\n        while (--i > -1) {\n          prop = props[i];\n\n          if (_transformProps[prop]) {\n            clearTransforms = 1;\n            prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n          }\n\n          _removeProperty(target, prop);\n        }\n      }\n\n      if (clearTransforms) {\n        _removeProperty(target, _transformProp);\n\n        if (cache) {\n          cache.svg && target.removeAttribute(\"transform\");\n\n          _parseTransform(target, 1);\n\n          cache.uncache = 1;\n        }\n      }\n    }\n  },\n      _specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n      if (tween.data !== \"isFromStart\") {\n        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n        pt.u = endValue;\n        pt.pr = -10;\n        pt.tween = tween;\n\n        plugin._props.push(property);\n\n        return 1;\n      }\n    }\n  },\n      _identity2DMatrix = [1, 0, 0, 1, 0, 0],\n      _rotationalProperties = {},\n      _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n  },\n      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n  },\n      _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || _getCache(target),\n        style = target.style,\n        matrix = _getComputedTransformMatrixAsArray(target),\n        parent,\n        nextSibling,\n        temp,\n        addedToDOM;\n\n    if (cache.svg && target.getAttribute(\"transform\")) {\n      temp = target.transform.baseVal.consolidate().matrix;\n      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\n      return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n      temp = style.display;\n      style.display = \"block\";\n      parent = target.parentNode;\n\n      if (!parent || !target.offsetParent) {\n        addedToDOM = 1;\n        nextSibling = target.nextSibling;\n\n        _docElement.appendChild(target);\n      }\n\n      matrix = _getComputedTransformMatrixAsArray(target);\n      temp ? style.display = temp : _removeProperty(target, \"display\");\n\n      if (addedToDOM) {\n        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n      }\n    }\n\n    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\n  },\n      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap,\n        matrix = matrixArray || _getMatrix(target, true),\n        xOriginOld = cache.xOrigin || 0,\n        yOriginOld = cache.yOrigin || 0,\n        xOffsetOld = cache.xOffset || 0,\n        yOffsetOld = cache.yOffset || 0,\n        a = matrix[0],\n        b = matrix[1],\n        c = matrix[2],\n        d = matrix[3],\n        tx = matrix[4],\n        ty = matrix[5],\n        originSplit = origin.split(\" \"),\n        xOrigin = parseFloat(originSplit[0]) || 0,\n        yOrigin = parseFloat(originSplit[1]) || 0,\n        bounds,\n        determinant,\n        x,\n        y;\n\n    if (!originIsAbsolute) {\n      bounds = _getBBox(target);\n      xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n      xOrigin = x;\n      yOrigin = y;\n    }\n\n    if (smooth || smooth !== false && cache.smooth) {\n      tx = xOrigin - xOriginOld;\n      ty = yOrigin - yOriginOld;\n      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n      cache.xOffset = cache.yOffset = 0;\n    }\n\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\";\n\n    if (pluginToAddPropTweensTo) {\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n  },\n      _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new GSCache(target);\n\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n      return cache;\n    }\n\n    var style = target.style,\n        invertedScaleX = cache.scaleX < 0,\n        px = \"px\",\n        deg = \"deg\",\n        origin = _getComputedProperty(target, _transformOriginProp) || \"0\",\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        rotation,\n        rotationX,\n        rotationY,\n        skewX,\n        skewY,\n        perspective,\n        xOrigin,\n        yOrigin,\n        matrix,\n        angle,\n        cos,\n        sin,\n        a,\n        b,\n        c,\n        d,\n        a12,\n        a22,\n        t1,\n        t2,\n        t3,\n        a13,\n        a23,\n        a33,\n        a42,\n        a43,\n        a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n    matrix = _getMatrix(target, cache.svg);\n\n    if (cache.svg) {\n      t1 = (!cache.uncache || origin === \"0px 0px\") && !uncache && target.getAttribute(\"data-svg-origin\");\n\n      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n\n    if (matrix !== _identity2DMatrix) {\n      a = matrix[0];\n      b = matrix[1];\n      c = matrix[2];\n      d = matrix[3];\n      x = a12 = matrix[4];\n      y = a22 = matrix[5];\n\n      if (matrix.length === 6) {\n        scaleX = Math.sqrt(a * a + b * b);\n        scaleY = Math.sqrt(d * d + c * c);\n        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;\n        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n\n        if (cache.svg) {\n          x -= xOrigin - (xOrigin * a + yOrigin * c);\n          y -= yOrigin - (xOrigin * b + yOrigin * d);\n        }\n      } else {\n        a32 = matrix[6];\n        a42 = matrix[7];\n        a13 = matrix[8];\n        a23 = matrix[9];\n        a33 = matrix[10];\n        a43 = matrix[11];\n        x = matrix[12];\n        y = matrix[13];\n        z = matrix[14];\n        angle = _atan2(a32, a33);\n        rotationX = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a12 * cos + a13 * sin;\n          t2 = a22 * cos + a23 * sin;\n          t3 = a32 * cos + a33 * sin;\n          a13 = a12 * -sin + a13 * cos;\n          a23 = a22 * -sin + a23 * cos;\n          a33 = a32 * -sin + a33 * cos;\n          a43 = a42 * -sin + a43 * cos;\n          a12 = t1;\n          a22 = t2;\n          a32 = t3;\n        }\n\n        angle = _atan2(-c, a33);\n        rotationY = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a * cos - a13 * sin;\n          t2 = b * cos - a23 * sin;\n          t3 = c * cos - a33 * sin;\n          a43 = d * sin + a43 * cos;\n          a = t1;\n          b = t2;\n          c = t3;\n        }\n\n        angle = _atan2(b, a);\n        rotation = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(angle);\n          sin = Math.sin(angle);\n          t1 = a * cos + b * sin;\n          t2 = a12 * cos + a22 * sin;\n          b = b * cos - a * sin;\n          a22 = a22 * cos - a12 * sin;\n          a = t1;\n          a12 = t2;\n        }\n\n        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n          rotationX = rotation = 0;\n          rotationY = 180 - rotationY;\n        }\n\n        scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n        angle = _atan2(a12, a22);\n        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n      }\n\n      if (cache.svg) {\n        t1 = target.getAttribute(\"transform\");\n        cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n        t1 && target.setAttribute(\"transform\", t1);\n      }\n    }\n\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n      if (invertedScaleX) {\n        scaleX *= -1;\n        skewX += rotation <= 0 ? 180 : -180;\n        rotation += rotation <= 0 ? 180 : -180;\n      } else {\n        scaleY *= -1;\n        skewX += skewX <= 0 ? 180 : -180;\n      }\n    }\n\n    cache.x = x - ((cache.xPercent = x && (cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = _round(scaleX);\n    cache.scaleY = _round(scaleY);\n    cache.rotation = _round(rotation) + deg;\n    cache.rotationX = _round(rotationX) + deg;\n    cache.rotationY = _round(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n      style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n  },\n      _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n  },\n      _addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = getUnit(start);\n    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n  },\n      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n\n    _renderCSSTransforms(ratio, cache);\n  },\n      _zeroDeg = \"0deg\",\n      _zeroPx = \"0px\",\n      _endParenthesis = \") \",\n      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this,\n        xPercent = _ref.xPercent,\n        yPercent = _ref.yPercent,\n        x = _ref.x,\n        y = _ref.y,\n        z = _ref.z,\n        rotation = _ref.rotation,\n        rotationY = _ref.rotationY,\n        rotationX = _ref.rotationX,\n        skewX = _ref.skewX,\n        skewY = _ref.skewY,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        transformPerspective = _ref.transformPerspective,\n        force3D = _ref.force3D,\n        target = _ref.target,\n        zOrigin = _ref.zOrigin,\n        transforms = \"\",\n        use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true;\n\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n      var angle = parseFloat(rotationY) * _DEG2RAD,\n          a13 = Math.sin(angle),\n          a33 = Math.cos(angle),\n          cos;\n\n      angle = parseFloat(rotationX) * _DEG2RAD;\n      cos = Math.cos(angle);\n      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n\n    if (transformPerspective !== _zeroPx) {\n      transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n\n    if (xPercent || yPercent) {\n      transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n      transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n\n    if (rotation !== _zeroDeg) {\n      transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n\n    if (rotationY !== _zeroDeg) {\n      transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n\n    if (rotationX !== _zeroDeg) {\n      transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n      transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n\n    if (scaleX !== 1 || scaleY !== 1) {\n      transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n  },\n      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this,\n        xPercent = _ref2.xPercent,\n        yPercent = _ref2.yPercent,\n        x = _ref2.x,\n        y = _ref2.y,\n        rotation = _ref2.rotation,\n        skewX = _ref2.skewX,\n        skewY = _ref2.skewY,\n        scaleX = _ref2.scaleX,\n        scaleY = _ref2.scaleY,\n        target = _ref2.target,\n        xOrigin = _ref2.xOrigin,\n        yOrigin = _ref2.yOrigin,\n        xOffset = _ref2.xOffset,\n        yOffset = _ref2.yOffset,\n        forceCSS = _ref2.forceCSS,\n        tx = parseFloat(x),\n        ty = parseFloat(y),\n        a11,\n        a21,\n        a12,\n        a22,\n        temp;\n\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n\n    if (skewY) {\n      skewY = parseFloat(skewY);\n      skewX += skewY;\n      rotation += skewY;\n    }\n\n    if (rotation || skewX) {\n      rotation *= _DEG2RAD;\n      skewX *= _DEG2RAD;\n      a11 = Math.cos(rotation) * scaleX;\n      a21 = Math.sin(rotation) * scaleX;\n      a12 = Math.sin(rotation - skewX) * -scaleY;\n      a22 = Math.cos(rotation - skewX) * scaleY;\n\n      if (skewX) {\n        skewY *= _DEG2RAD;\n        temp = Math.tan(skewX - skewY);\n        temp = Math.sqrt(1 + temp * temp);\n        a12 *= temp;\n        a22 *= temp;\n\n        if (skewY) {\n          temp = Math.tan(skewY);\n          temp = Math.sqrt(1 + temp * temp);\n          a11 *= temp;\n          a21 *= temp;\n        }\n      }\n\n      a11 = _round(a11);\n      a21 = _round(a21);\n      a12 = _round(a12);\n      a22 = _round(a22);\n    } else {\n      a11 = scaleX;\n      a22 = scaleY;\n      a21 = a12 = 0;\n    }\n\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n      tx = _convertToUnit(target, \"x\", x, \"px\");\n      ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n\n    if (xPercent || yPercent) {\n      temp = target.getBBox();\n      tx = _round(tx + xPercent / 100 * temp.width);\n      ty = _round(ty + yPercent / 100 * temp.height);\n    }\n\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp);\n  },\n      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {\n    var cap = 360,\n        isString = _isString(endValue),\n        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1),\n        change = relative ? endNum * relative : endNum - startNum,\n        finalValue = startNum + change + \"deg\",\n        direction,\n        pt;\n\n    if (isString) {\n      direction = endValue.split(\"_\")[1];\n\n      if (direction === \"short\") {\n        change %= cap;\n\n        if (change !== change % (cap / 2)) {\n          change += change < 0 ? cap : -cap;\n        }\n      }\n\n      if (direction === \"cw\" && change < 0) {\n        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      } else if (direction === \"ccw\" && change > 0) {\n        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      }\n    }\n\n    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _assign = function _assign(target, source) {\n    for (var p in source) {\n      target[p] = source[p];\n    }\n\n    return target;\n  },\n      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    var startCache = _assign({}, target._gsap),\n        exclude = \"perspective,force3D,transformOrigin,svgOrigin\",\n        style = target.style,\n        endCache,\n        p,\n        startValue,\n        endValue,\n        startNum,\n        endNum,\n        startUnit,\n        endUnit;\n\n    if (startCache.svg) {\n      startValue = target.getAttribute(\"transform\");\n      target.setAttribute(\"transform\", \"\");\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n\n      _removeProperty(target, _transformProp);\n\n      target.setAttribute(\"transform\", startValue);\n    } else {\n      startValue = getComputedStyle(target)[_transformProp];\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n      style[_transformProp] = startValue;\n    }\n\n    for (p in _transformProps) {\n      startValue = startCache[p];\n      endValue = endCache[p];\n\n      if (startValue !== endValue && exclude.indexOf(p) < 0) {\n        startUnit = getUnit(startValue);\n        endUnit = getUnit(endValue);\n        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n        endNum = parseFloat(endValue);\n        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n        plugin._pt.u = endUnit || 0;\n\n        plugin._props.push(p);\n      }\n    }\n\n    _assign(endCache, startCache);\n  };\n\n  _forEachName(\"padding,margin,Width,Radius\", function (name, index) {\n    var t = \"Top\",\n        r = \"Right\",\n        b = \"Bottom\",\n        l = \"Left\",\n        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\n      return index < 2 ? name + side : \"border\" + side + name;\n    });\n\n    _specialProps[index > 1 ? \"border\" + name : name] = function (plugin, target, property, endValue, tween) {\n      var a, vars;\n\n      if (arguments.length < 4) {\n        a = props.map(function (prop) {\n          return _get(plugin, prop, property);\n        });\n        vars = a.join(\" \");\n        return vars.split(a[0]).length === 5 ? a[0] : vars;\n      }\n\n      a = (endValue + \"\").split(\" \");\n      vars = {};\n      props.forEach(function (prop, i) {\n        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n      });\n      plugin.init(target, vars, tween);\n    };\n  });\n\n  var CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n      return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n      var props = this._props,\n          style = target.style,\n          startAt = tween.vars.startAt,\n          startValue,\n          endValue,\n          endNum,\n          startNum,\n          type,\n          specialProp,\n          p,\n          startUnit,\n          endUnit,\n          relative,\n          isTransformRelated,\n          transformPropTween,\n          cache,\n          smooth,\n          hasPriority;\n      _pluginInitted || _initCore();\n\n      for (p in vars) {\n        if (p === \"autoRound\") {\n          continue;\n        }\n\n        endValue = vars[p];\n\n        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n          continue;\n        }\n\n        type = typeof endValue;\n        specialProp = _specialProps[p];\n\n        if (type === \"function\") {\n          endValue = endValue.call(tween, index, target, targets);\n          type = typeof endValue;\n        }\n\n        if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n          endValue = _replaceRandom(endValue);\n        }\n\n        if (specialProp) {\n          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n        } else if (p.substr(0, 2) === \"--\") {\n          startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n          endValue += \"\";\n          _colorExp.lastIndex = 0;\n\n          if (!_colorExp.test(startValue)) {\n            startUnit = getUnit(startValue);\n            endUnit = getUnit(endValue);\n          }\n\n          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n          this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n          props.push(p);\n        } else if (type !== \"undefined\") {\n          if (startAt && p in startAt) {\n            startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n            p in _config.units && !getUnit(startValue) && (startValue += _config.units[p]);\n            _isString(startValue) && ~startValue.indexOf(\"random(\") && (startValue = _replaceRandom(startValue));\n            (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p));\n          } else {\n            startValue = _get(target, p);\n          }\n\n          startNum = parseFloat(startValue);\n          relative = type === \"string\" && endValue.charAt(1) === \"=\" ? +(endValue.charAt(0) + \"1\") : 0;\n          relative && (endValue = endValue.substr(2));\n          endNum = parseFloat(endValue);\n\n          if (p in _propertyAliases) {\n            if (p === \"autoAlpha\") {\n              if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                startNum = 0;\n              }\n\n              _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n            }\n\n            if (p !== \"scale\" && p !== \"transform\") {\n              p = _propertyAliases[p];\n              ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n            }\n          }\n\n          isTransformRelated = p in _transformProps;\n\n          if (isTransformRelated) {\n            if (!transformPropTween) {\n              cache = target._gsap;\n              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);\n              smooth = vars.smoothOrigin !== false && cache.smooth;\n              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);\n              transformPropTween.dep = 1;\n            }\n\n            if (p === \"scale\") {\n              this._pt = new PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? relative * endNum : endNum - cache.scaleY) || 0);\n              props.push(\"scaleY\", p);\n              p += \"X\";\n            } else if (p === \"transformOrigin\") {\n              endValue = _convertKeywordsToPercentages(endValue);\n\n              if (cache.svg) {\n                _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n              } else {\n                endUnit = parseFloat(endValue.split(\" \")[2]) || 0;\n                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n\n                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n              }\n\n              continue;\n            } else if (p === \"svgOrigin\") {\n              _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n\n              continue;\n            } else if (p in _rotationalProperties) {\n              _addRotationalPropTween(this, cache, p, startNum, endValue, relative);\n\n              continue;\n            } else if (p === \"smoothOrigin\") {\n              _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n\n              continue;\n            } else if (p === \"force3D\") {\n              cache[p] = endValue;\n              continue;\n            } else if (p === \"transform\") {\n              _addRawTransformPTs(this, endValue, target);\n\n              continue;\n            }\n          } else if (!(p in style)) {\n            p = _checkPropPrefix(p) || p;\n          }\n\n          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n            startUnit = (startValue + \"\").substr((startNum + \"\").length);\n            endNum || (endNum = 0);\n            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n            this._pt.u = endUnit || 0;\n\n            if (startUnit !== endUnit && endUnit !== \"%\") {\n              this._pt.b = startValue;\n              this._pt.r = _renderCSSPropWithBeginning;\n            }\n          } else if (!(p in style)) {\n            if (p in target) {\n              this.add(target, p, startValue || target[p], endValue, index, targets);\n            } else {\n              _missingPlugin(p, endValue);\n\n              continue;\n            }\n          } else {\n            _tweenComplexCSSString.call(this, target, p, startValue, endValue);\n          }\n\n          props.push(p);\n        }\n      }\n\n      hasPriority && _sortPropTweensByPriority(this);\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n      var p = _propertyAliases[property];\n      p && p.indexOf(\",\") < 0 && (property = p);\n      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n    },\n    core: {\n      _removeProperty: _removeProperty,\n      _getMatrix: _getMatrix\n    }\n  };\n  gsap.utils.checkPrefix = _checkPropPrefix;\n\n  (function (positionAndScale, rotation, others, aliases) {\n    var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function (name) {\n      _transformProps[name] = 1;\n    });\n\n    _forEachName(rotation, function (name) {\n      _config.units[name] = \"deg\";\n      _rotationalProperties[name] = 1;\n    });\n\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n\n    _forEachName(aliases, function (name) {\n      var split = name.split(\":\");\n      _propertyAliases[split[1]] = all[split[0]];\n    });\n  })(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n\n  _forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function (name) {\n    _config.units[name] = \"px\";\n  });\n\n  gsap.registerPlugin(CSSPlugin);\n\n  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\n      TweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n  exports.Back = Back;\n  exports.Bounce = Bounce;\n  exports.CSSPlugin = CSSPlugin;\n  exports.Circ = Circ;\n  exports.Cubic = Cubic;\n  exports.Elastic = Elastic;\n  exports.Expo = Expo;\n  exports.Linear = Linear;\n  exports.Power0 = Power0;\n  exports.Power1 = Power1;\n  exports.Power2 = Power2;\n  exports.Power3 = Power3;\n  exports.Power4 = Power4;\n  exports.Quad = Quad;\n  exports.Quart = Quart;\n  exports.Quint = Quint;\n  exports.Sine = Sine;\n  exports.SteppedEase = SteppedEase;\n  exports.Strong = Strong;\n  exports.TimelineLite = Timeline;\n  exports.TimelineMax = Timeline;\n  exports.TweenLite = Tween;\n  exports.TweenMax = TweenMaxWithCSS;\n  exports.default = gsapWithCSS;\n  exports.gsap = gsapWithCSS;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n","import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class ScrollMarquee {\n    constructor() {\n        this.DOM = {\n            mainWrapper: \".js-scroll-marquee\",\n            topLine: \".js-scroll-marquee-top\",\n            bottomLine: \".js-scroll-marquee-bottom\",\n        };\n\n        this.mainWrappers = document.querySelectorAll(this.DOM.mainWrapper);\n    }\n\n    init() {\n        if (this.mainWrappers.length < 1) {\n            return;\n        }\n\n        this.mainWrappers.forEach((wrapper) => {\n            this.singleLine(wrapper);\n        });\n    }\n\n    singleLine(wrapper) {\n        const topLine = wrapper.querySelector(this.DOM.topLine);\n        const bottomLine = wrapper.querySelector(this.DOM.bottomLine);\n\n        if (topLine != null) {\n            this.animateLine(topLine, 1, wrapper);\n        }\n\n        if (bottomLine != null) {\n            this.animateLine(bottomLine, -1, wrapper);\n        }\n\n        ScrollTrigger.create({\n            trigger: wrapper,\n            pin: true,\n            start: \"top top\",\n            end: \"150%\",\n            onEnter: () => {\n                console.log(\"enter\");\n            },\n        });\n    }\n\n    animateLine(line, direction, wrapper) {\n        let start = -(line.offsetWidth - window.innerWidth);\n        let end = 0;\n\n        if (direction === -1) {\n            start = 0;\n            end = -(line.offsetWidth - window.innerWidth);\n        }\n\n        gsap.fromTo(\n            line,\n            {\n                x: start,\n            },\n            {\n                x: end,\n                scrollTrigger: {\n                    trigger: wrapper,\n                    start: \"top bottom\",\n                    end: `bottom+=${wrapper.offsetHeight * 1} top`,\n                    scrub: 1,\n                },\n                ease: \"none\",\n            },\n        );\n    }\n}\n","import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nimport {DRACOLoader} from \"three/examples/jsm/loaders/DRACOLoader\";\n\nimport ScrollMarquee from \"./ScrollMarquee\";\n\nexport default class ThreeScrollytelling {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-model-scroll-canvas\",\n            section: \".js-model-scroll-section\",\n            mainWrapper: \".js-model-scroll\",\n        };\n\n        this.models = [];\n\n        this.scrollTop = false;\n\n        // config\n        this.config = {\n            environment: {\n                scale: 16,\n            },\n        };\n    }\n\n    /**\n     * main init - all dom elements and method calls\n     */\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            if (\"scrollRestoration\" in window.history) {\n                window.history.scrollRestoration = \"manual\";\n            }\n\n            const scrollMarquee = new ScrollMarquee();\n            scrollMarquee.init();\n\n            console.log(\"ModelScrollSections init()\");\n\n            THREE.Cache.enabled = true;\n\n            this.width = window.innerWidth;\n            this.height = window.innerHeight;\n\n            // reflection map\n            const path = window.modelMaps;\n            const mapUrls = [path + \"posx.jpg\", path + \"negx.jpg\", path + \"posy.jpg\", path + \"negy.jpg\", path + \"posz.jpg\", path + \"negz.jpg\"];\n\n            this.cubeMap = new THREE.CubeTextureLoader().load(mapUrls);\n            this.cubeMap.format = THREE.RGBFormat;\n            this.cubeMap.encoding = THREE.sRGBEncoding;\n\n            this.initCamera();\n            this.initScene();\n            this.initLights();\n            this.initRenderer();\n\n            let waitModels = new Promise((resolve, reject) => {\n                this.throughSections(resolve);\n            });\n\n            waitModels.then(() => {\n                this.scrollController();\n                this.animate();\n                this.checkScroll();\n\n                this.models.filter((model) => {\n                    if (model.index !== 0) {\n                        this.modelHide(model.model, true);\n                    } else {\n                        gsap.fromTo(\n                            model.model.position,\n                            {\n                                x: 450,\n                                z: 0,\n                            },\n                            {\n                                x: 150 * model.direction,\n                                z: 0,\n                                duration: 0.8,\n                                delay: 0.3,\n                                ease: \"power4.out\",\n                            },\n                        );\n\n                        gsap.fromTo(\n                            model.model.rotation,\n                            {\n                                z: -Math.PI * 2,\n                            },\n                            {\n                                z: 0,\n                                duration: 0.8,\n                                delay: 0.3,\n                                ease: \"power4.out\",\n                            },\n                        );\n                    }\n                });\n            });\n\n            // handle resize\n            window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n        }\n    }\n\n    /**\n     * camera setup\n     */\n    initCamera() {\n        this.camera = new THREE.PerspectiveCamera(\n            35,\n            this.width / this.height,\n            0.5 * this.config.environment.scale,\n            130 * this.config.environment.scale,\n        );\n        this.camera.position.set(0, 0, 40 * this.config.environment.scale);\n    }\n\n    /**\n     * scene setup\n     */\n    initScene() {\n        this.scene = new THREE.Scene();\n    }\n\n    /**\n     * lights setup - because of performance > all in one object\n     */\n    initLights() {\n        const lightWrapper = new THREE.Object3D();\n\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x999999);\n        hemiLight.position.set(0, 200 * this.config.environment.scale, 0);\n\n        this.ambientLight = new THREE.AmbientLight(0x404040);\n\n        // this is just back light - without it back side of model would be barely visible\n        this.dirSubLight = new THREE.DirectionalLight(0xcccccc, 1);\n        this.dirSubLight.position.set(-20 * this.config.environment.scale, 20 * this.config.environment.scale, -20 * this.config.environment.scale);\n\n        this.dirLight = new THREE.DirectionalLight(0xcccccc, 3.5);\n        this.dirLight.position.set(20 * this.config.environment.scale, 30 * this.config.environment.scale, 10 * this.config.environment.scale);\n\n        lightWrapper.add(this.dirLight);\n        lightWrapper.add(this.dirSubLight);\n        lightWrapper.add(this.ambientLight);\n        lightWrapper.add(hemiLight);\n\n        this.scene.add(lightWrapper);\n    }\n\n    /**\n     * renderer setup\n     */\n    initRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            powerPreference: \"high-performance\",\n            alpha: true,\n        });\n        this.renderer.setClearColor(0x000000, 0);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.physicallyCorrectLights = true;\n        this.modelContainer.appendChild(this.renderer.domElement);\n    }\n\n    /**\n     * go through sections and load models\n     */\n    throughSections(resolve) {\n        this.sections = document.querySelectorAll(this.DOM.section);\n\n        if (this.sections.length < 1) {\n            return;\n        }\n\n        this.sections.forEach((section, index) => {\n            const modelUrl = section.dataset.model;\n            const modelName = section.dataset.name;\n            if (modelUrl !== \"\" && modelUrl != null) {\n                this.initModel(modelUrl, index, resolve, modelName);\n            }\n        });\n    }\n\n    /**\n     * model setup and load call\n     */\n    initModel(modelUrl, index, resolve, modelName) {\n        let model = null;\n\n        // loader\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath(\"https://threejs.org/examples/js/libs/draco/\");\n        dracoLoader.setDecoderConfig({\n            type: \"js\",\n        });\n\n        dracoLoader.load(modelUrl, (geometry) => {\n            geometry.computeVertexNormals();\n            const material = new THREE.MeshStandardMaterial();\n            const mesh = new THREE.Mesh(geometry, material);\n\n            this.loadModel(mesh);\n            model = mesh;\n\n            this.models.push({model, index});\n\n            mesh.name = modelName;\n\n            this.scene.add(mesh);\n\n            dracoLoader.dispose();\n\n            this.dirLight.updateMatrix();\n            this.dirSubLight.updateMatrix();\n            this.ambientLight.updateMatrix();\n\n            if (index === this.sections.length - 1) {\n                setTimeout(() => {\n                    resolve();\n                }, 100);\n            }\n        });\n    }\n\n    /**\n     * moadel loading and controller call\n     * @param [object] object\n     */\n    loadModel(object) {\n        if (object.isMesh) {\n            const box = new THREE.Box3().setFromObject(object);\n            let z = Math.abs(box.min.z);\n\n            if (z === 0) {\n                z = -Math.abs(box.max.z);\n            }\n\n            object.geometry.translate(0, 0, z / 2);\n            object.rotation.x = Math.PI / 2;\n            object.castShadow = true;\n            // object.material.side = 2;\n            // object.material.shadowSide = 1;\n            object.material.emissive.set(0x020000);\n            object.material.metalness = 0;\n            // object.material.opacity = 0.3;\n            object.material.depthFunc = false;\n            // object.material.depthWrite = true;\n            object.material.transparent = false;\n            object.material.color.set(0x000dff);\n            object.material.color.convertSRGBToLinear();\n            // // object.matrixAutoUpdate = false;\n            // // object.material.needsUpdate = false;\n            object.material.envMap = this.cubeMap;\n            object.material.refractionRatio = 1;\n            object.material.reflectivity = 1;\n            object.material.roughness = 0;\n            object.material.clearcoat = 1;\n            object.material.clearcoatRoughness = 0;\n        }\n    }\n\n    /**\n     *\n     */\n    onWindowResize() {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    /**\n     * requestAnimationFrame\n     */\n    animate() {\n        this.renderer.render(this.scene, this.camera);\n        if (this.renderer != null) {\n            requestAnimationFrame(() => this.animate());\n        }\n    }\n\n    /**\n     * scrollTrigger\n     */\n    scrollController() {\n        // sort by index\n        this.models.sort((a, b) => {\n            return a.index - b.index;\n        });\n\n        this.models.forEach((model, index) => {\n            const direction = this.checkDirection(this.sections[model.index].dataset.position);\n            let nextDirection = 0;\n\n            if (this.sections[index + 1] != null) {\n                nextDirection = this.checkDirection(this.sections[index + 1].dataset.position);\n            }\n\n            model.direction = direction;\n\n            this.changeModelPosition(direction, nextDirection, model);\n\n            gsap.to(model.model.rotation, {\n                scrollTrigger: {\n                    trigger: this.sections[model.index],\n                    start: \"top 50%\",\n                    end: `bottom ${model.index === this.sections.length - 1 ? \"top\" : \"50%\"}`,\n                    scrub: true,\n                    onEnter: () => {\n                        this.modelShow(model.model);\n                    },\n                    onLeave: () => {\n                        this.modelHide(model.model, model.index !== this.models.length - 1);\n                    },\n                    onEnterBack: () => {\n                        this.modelShow(model.model);\n                    },\n                    onLeaveBack: () => {\n                        this.modelHide(model.model, model.index !== 0);\n                    },\n                },\n                ease: \"none\",\n            });\n        });\n    }\n\n    /**\n     *\n     * @param direction\n     * @returns {number}\n     */\n    // -1 = left\n    // 0 = center\n    // 1 = right\n    checkDirection(direction) {\n        switch (direction) {\n            case \"left\":\n                return -1;\n            case \"right\":\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     *\n     * @param current\n     * @param next\n     * @param model\n     */\n    changeModelPosition(current, next, model) {\n        let rotation = model.index === this.sections.length - 1 ? -2 : -1;\n\n        if (current > next) {\n            rotation = model.index === this.sections.length - 1 ? 2 : 1;\n        }\n\n        this.models.filter((modelSingle) => {\n            if (modelSingle.index === model.index) {\n                modelSingle.endTilt = 0.25 * current;\n            }\n        });\n\n        this.models.filter((modelSingle) => {\n            if (modelSingle.index === model.index + 1) {\n                modelSingle.startTilt = model.endTilt;\n            }\n        });\n\n        this.models.filter((modelSingle) => {\n            let tl = gsap\n                .timeline({\n                    // ease: \"none\",\n                    scrollTrigger: {\n                        trigger: this.sections[model.index],\n                        start: `${model.index === 0 ? \"top\" : \"top\"} top`,\n                        end: \"bottom top\",\n                        scrub: true,\n                    },\n                })\n                .addLabel(\"start\")\n                .add(\"start\")\n                .fromTo(\n                    modelSingle.model.position,\n                    {\n                        x: 150 * current,\n                    },\n                    {\n                        x: 150 * next,\n                        ease: \"none\",\n                        duration: 2,\n                    },\n                    \"start\",\n                )\n                .fromTo(\n                    modelSingle.model.position,\n                    {\n                        z: 0,\n                    },\n                    {\n                        z: 150,\n                        ease: \"none\",\n                        duration: 1,\n                    },\n                    \"start\",\n                )\n                .fromTo(\n                    modelSingle.model.position,\n                    {\n                        z: 150,\n                    },\n                    {\n                        z: 0,\n                        ease: \"none\",\n                        duration: 1,\n                    },\n                    \"-=1\",\n                )\n                .addLabel(\"end\");\n\n            gsap.fromTo(\n                modelSingle.model.rotation,\n                {\n                    y: modelSingle.index === 0 ? 0 : model.startTilt || 0,\n                    z: 0,\n                },\n                {\n                    y: model.endTilt || 0,\n                    z: Math.PI * 2 * (this.scrollTop ? -1 : 1) * rotation,\n                    ease: \"none\",\n                    scrollTrigger: {\n                        trigger: this.sections[model.index],\n                        start: `${model.index === 0 ? \"top\" : \"top\"} top`,\n                        end: \"bottom top\",\n                        scrub: true,\n                    },\n                },\n            );\n\n            gsap.set(modelSingle.model.position, {\n                x: 150 * this.models[0].direction,\n            });\n        });\n    }\n\n    /**\n     *\n     * @param model\n     * @param hide\n     */\n    modelHide(model, hide = true) {\n        if (hide === false) {\n            return;\n        }\n\n        gsap.set(model.material, {\n            opacity: 0.7,\n            overwrite: true,\n            onComplete: () => {\n                model.visible = false;\n            },\n        });\n    }\n\n    /**\n     *\n     * @param model\n     */\n    modelShow(model) {\n        gsap.to(model.material, {\n            opacity: 1,\n            duration: 0.3,\n            ease: \"none\",\n            overwrite: true,\n            onStart: () => {\n                model.visible = true;\n            },\n        });\n    }\n\n    checkScroll() {\n        let currentTop = window.pageYOffset | document.body.scrollTop;\n        let pervTop = 0;\n        document.addEventListener(\"scroll\", () => {\n            currentTop = window.pageYOffset | document.body.scrollTop;\n            this.scrollTop = pervTop >= currentTop;\n        });\n    }\n}\n","import gsap from \"gsap\";\n\nexport default class HoverClippingNavigation {\n    constructor() {\n        this.DOM = {\n            wrapper: \".js-list-wrapper\",\n            clipList: \".js-clip-list\",\n            clipListWrapper: \".js-clip-list-wrapper\",\n        };\n    }\n\n    /**\n     * Init\n     */\n    init() {\n        let wrapper = document.querySelector(this.DOM.wrapper);\n\n        if (wrapper == null) {\n            return;\n        }\n\n\n        let clipList = document.querySelector(this.DOM.clipList);\n        let clipListWrapper = document.querySelector(this.DOM.clipListWrapper);\n        let centerHeight = clipListWrapper.offsetHeight / 2;\n\n        gsap.set(clipListWrapper, {\n            y: 0\n        });\n\n        gsap.set(clipList, {\n            y: 0\n        });\n\n        wrapper.addEventListener(\"mousemove\", ev => {\n            const posY = ev.pageY - wrapper.offsetTop;\n            const offsetWrapper = posY - centerHeight;\n            const offsetList = -posY + centerHeight;\n\n            gsap.to(clipListWrapper, {\n                duration: 0.5,\n                delay: 0.1,\n                ease: \"power4.out\",\n                y: offsetWrapper\n            });\n\n            gsap.to(clipList, {\n                duration: 0.5,\n                delay: 0.1,\n                ease: \"power4.out\",\n                y: offsetList\n            });\n        });\n    }\n}\n","import {gsap} from \"gsap\";\nimport {ScrollTrigger} from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class ContentAnimation {\n    constructor(resolve) {\n        this.DOM = {\n            content: \".js-sequence-step-content\",\n            step: \".js-sequence-step\",\n        };\n\n        this.resolve = resolve;\n    }\n\n    init() {\n        this.steps = document.querySelectorAll(this.DOM.step);\n\n        if (this.steps.length < 1) {\n            return;\n        }\n\n        this.steps.forEach((step) => {\n            this.singleStep(step);\n        });\n\n        this.resolve();\n    }\n\n    singleStep(step) {\n        const content = step.querySelector(this.DOM.content);\n\n        if (content == null) {\n            return;\n        }\n\n        gsap.set(content, {\n            autoAlpha: 0,\n            y: \"5vh\"\n        });\n\n        let tl = gsap\n            .timeline({\n                scrollTrigger: {\n                    trigger: step,\n                    start: \"top top\",\n                    end: \"bottom top\",\n                    scrub: true,\n                    pin: true,\n                },\n            })\n            .to(content, {\n                duration: 1,\n                y: \"0vh\",\n                autoAlpha: 1,\n            })\n            .to(content, {\n                y: \"-2.5vh\",\n                autoAlpha: 0,\n            });\n    }\n\n}\n","import {gsap} from \"gsap\";\nimport {ScrollTrigger} from \"gsap/ScrollTrigger\";\nimport is from \"is_js\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class ImageSequence {\n    constructor() {\n        this.DOM = {\n            sequence: \".js-image-sequence\",\n            sequenceWrapper: \".js-image-sequence-wrapper\",\n            canvasWrapper: \".js-image-sequence-canvas-wrapper\",\n            step: \".js-sequence-step\",\n        };\n    }\n\n    init() {\n        this.sequence = document.querySelector(this.DOM.sequence);\n\n        if (!this.sequence) {\n            return;\n        }\n\n        // set scroll position to top\n        if (\"scrollRestoration\" in window.history) {\n            window.history.scrollRestoration = \"manual\";\n        }\n\n        this.sequenceWrapper = document.querySelector(this.DOM.sequenceWrapper);\n        this.canvasWrapper = document.querySelector(this.DOM.canvasWrapper);\n\n\n        this.loaded = false;\n\n        this.frameIndex = 0;\n        this.sequenceVisible = true;\n\n        this.imagesArray = [];\n\n        this.imagesArray = window.imgArray;\n\n        // is its string\n        // this.imagesArray = JSON.parse(window.imgArray);\n\n        if (is.mobile()) {\n            this.imagesArray = window.imgArray;\n            // this.imagesArray = JSON.parse(window.imgArray);\n        }\n\n        if (this.imagesArray && this.imagesArray.length > 0) {\n            this.steps = gsap.utils.toArray(this.DOM.step);\n\n            this.timeSequenceSegments = [0];\n\n            this.steps.forEach((step) => {\n                this.timeSequenceSegments.push(parseFloat(step.dataset.frameSecond));\n            });\n\n            this.segmentsLoaded = 0;\n\n            // don't squish img when resized\n            window.addEventListener(\"resize\", () => this.resize());\n\n            this.canvasLoad();\n            this.sequenceController();\n        }\n    }\n\n    canvasLoad() {\n        this.context = this.sequence.getContext(\"2d\");\n        this.context.imageSmoothingEnabled = true;\n        this.imageUrl = this.sequence.dataset.desktopUrl;\n\n        // for retina screens\n        // this.retinaScale();\n\n        // num of images\n        this.frameCount = this.imagesArray.length;\n        this.framesLoaded = 0;\n\n        // initial image load\n        this.img = new Image();\n        this.img.src = this.currentFrame(0);\n\n        this.sequence.width = this.canvasWrapper.offsetWidth;\n        this.sequence.height = this.canvasWrapper.offsetHeight;\n\n        this.img.onload = () => {\n            this.drawImage(this.img);\n        };\n\n        this.singleChunk = Math.floor(\n            this.frameCount / this.timeSequenceSegments.length,\n        );\n\n        this.images = [];\n\n        this.preloadImages();\n    }\n\n    preloadImages() {\n        if (this.segmentsLoaded < this.timeSequenceSegments.length) {\n            for (\n                let i = this.singleChunk * this.segmentsLoaded;\n                i < this.singleChunk * (this.segmentsLoaded + 1);\n                i++\n            ) {\n                const img = new Image();\n                img.src = this.currentFrame(i);\n                const imageProps = [img, i];\n                this.images.push(imageProps);\n                img.onload = () => {\n                    this.framesLoaded += 1;\n\n                    if (this.framesLoaded > 0) {\n                        this.progressController();\n                    }\n                };\n            }\n\n            this.segmentsLoaded++;\n            setTimeout(() => {\n                this.preloadImages();\n            }, 500);\n        }\n    }\n\n    currentFrame(index) {\n        return `${this.imagesArray[index].url}`;\n    }\n\n    drawImage(img) {\n        if (img != null) {\n            this.context.drawImage(img, 0, 0, this.sequence.width, this.sequence.height);\n        }\n    }\n\n    updateImage(index) {\n        if (this.images[index] != null) {\n            this.drawImage(this.images[index][0]);\n        }\n    }\n\n    sequenceController() {\n        let scrollDirection = 1;\n\n        this.steps.forEach((step, i) => {\n            const segmentLength =\n                this.timeSequenceSegments[i + 1] - this.timeSequenceSegments[i];\n            const inc =\n                segmentLength / this.timeSequenceSegments[this.steps.length];\n\n            this.scrollInteractions(inc, scrollDirection, i, step);\n        });\n    }\n\n    scrollInteractions(inc, scrollDirection, i, step) {\n        let trigger = step;\n\n        if (step.parentNode.classList.contains(\"pin-spacer\")) {\n            trigger = step.parentNode;\n        }\n\n        let starting;\n        let ending = \"bottom bottom\";\n\n        if (i === 0) {\n            starting = \"top top\";\n        } else {\n            starting = \"top bottom\";\n        }\n\n        ScrollTrigger.create({\n            trigger: trigger,\n            start: starting,\n            end: ending,\n            onUpdate: (self) => {\n                let progress = 0;\n                if (this.timeSequenceSegments[this.steps.length] != null) {\n                    progress =\n                        this.timeSequenceSegments[i] /\n                        this.timeSequenceSegments[this.steps.length] +\n                        self.progress * inc;\n                }\n\n                this.frameIndex = Math.floor(progress * this.frameCount);\n\n                this.updateImage(this.frameIndex);\n            },\n        });\n    }\n\n    fadeVideo() {\n        if (this.sequenceVisible === true) {\n            this.sequenceVisible = false;\n            gsap.to(this.sequence, {\n                autoAlpha: 0,\n            });\n        } else if (this.sequenceVisible === false) {\n            this.sequenceVisible = true;\n            gsap.to(this.sequence, {\n                autoAlpha: 1,\n            });\n        }\n    }\n\n    progressController() {\n        const frameCount = parseFloat(this.steps[1].dataset.frameSecond) / parseFloat(this.steps[this.steps.length - 1].dataset.frameSecond) * this.frameCount;\n        const progress = Math.floor((100 / (frameCount)) * this.framesLoaded);\n\n        if (progress < 100) {\n            // console.log(progress);\n        } else if (progress >= 100 && !this.loaded) {\n            console.log(\"Images for first section loaded!\");\n            this.loaded = true;\n            gsap.to(this.sequenceWrapper, {\n                autoAlpha: 1,\n            });\n        }\n    }\n\n    resize() {\n        this.sequence.width = this.canvasWrapper.clientWidth;\n        this.sequence.height = this.canvasWrapper.clientHeight;\n\n        // this.retinaScale();\n        this.updateImage(this.frameIndex);\n    }\n\n    retinaScale() {\n        // for retina screens\n        if (window.devicePixelRatio !== 1) {\n            const width = this.canvasWrapper.clientWidth;\n            const height = this.canvasWrapper.clientHeight;\n\n            // scale the canvas by window.devicePixelRatio\n            this.sequence.setAttribute('width', width * window.devicePixelRatio);\n            this.sequence.setAttribute('height', height * window.devicePixelRatio);\n\n            // use css to bring it back to regular size\n            this.sequence.setAttribute('style', 'width=\"' + width + '\"; height=\"' + height + '\";')\n\n            // set the scale of the context\n            this.sequence.getContext('2d').scale(window.devicePixelRatio, window.devicePixelRatio);\n        }\n    }\n}\n","import gsap from \"gsap\";\n\nexport default class VerticalMouseDrivenCarousel {\n    constructor() {\n        this.defaults = {\n            carousel: \".js-mouse-driven-vertical-carousel\",\n            bgImg: \".js-mouse-driven-vertical-carousel-bg-img\",\n            list: \".js-mouse-driven-vertical-carousel-list\",\n            listItem: \".js-mouse-driven-vertical-carousel-list-item\"\n        };\n\n        this.posY = 0;\n\n        if (this.getCarousel() == null) {\n            return;\n        }\n\n        this.initCursor();\n        this.init();\n        this.bgImgController();\n    }\n\n    //region getters\n    getBgImgs() {\n        return document.querySelectorAll(this.defaults.bgImg);\n    }\n\n    getListItems() {\n        return document.querySelectorAll(this.defaults.listItem);\n    }\n\n    getList() {\n        return document.querySelector(this.defaults.list);\n    }\n\n    getCarousel() {\n        return document.querySelector(this.defaults.carousel);\n    }\n\n    init() {\n        gsap.set(this.getBgImgs(), {\n            autoAlpha: 0,\n            scale: 1.05,\n            overwrite: true\n        });\n\n        gsap.set(this.getBgImgs()[0], {\n            autoAlpha: 1,\n            scale: 1,\n            overwrite: true\n        });\n\n        this.listItems = this.getListItems().length - 1;\n\n        this.listOpacityController(0);\n    }\n\n    initCursor() {\n        const listHeight = this.getList().clientHeight;\n        const carouselHeight = this.getCarousel().clientHeight;\n\n        this.getCarousel().addEventListener(\n            \"mousemove\",\n            event => {\n                this.posY = event.pageY - this.getCarousel().offsetTop;\n                let offset = -this.posY / carouselHeight * listHeight;\n\n                gsap.to(this.getList(), {\n                    duration: 0.3,\n                    y: offset,\n                    ease: \"power4.out\",\n                    overwrite: true\n                });\n            },\n            false\n        );\n    }\n\n    bgImgController() {\n        for (const link of this.getListItems()) {\n            link.addEventListener(\"mouseenter\", ev => {\n                let currentId = ev.currentTarget.dataset.itemId;\n\n                this.listOpacityController(currentId);\n\n                gsap.to(ev.currentTarget, {\n                    duration: 0.3,\n                    autoAlpha: 1,\n                    overwrite: true\n                });\n\n                gsap.to(\".is-visible\", {\n                    duration: 0.2,\n                    autoAlpha: 0,\n                    scale: 1.05,\n                    overwrite: true\n                });\n\n                if (!this.getBgImgs()[currentId].classList.contains(\"is-visible\")) {\n                    this.getBgImgs()[currentId].classList.add(\"is-visible\");\n                }\n\n                gsap.to(this.getBgImgs()[currentId], {\n                    duration: 0.6,\n                    autoAlpha: 1,\n                    scale: 1,\n                    overwrite: true\n                });\n            });\n        }\n    }\n\n    listOpacityController(id) {\n        id = parseInt(id);\n        let aboveCurrent = this.listItems - id;\n        let belowCurrent = parseInt(id);\n\n        if (aboveCurrent > 0) {\n            for (let i = 1; i <= aboveCurrent; i++) {\n                let opacity = 0.5 / i;\n                let offset = 2 * i;\n                gsap.to(this.getListItems()[id + i], {\n                    duration: 0.5,\n                    autoAlpha: opacity,\n                    x: `${offset}vw`,\n                    ease: \"power3.out\",\n                    overwrite: true\n                });\n            }\n        }\n\n        if (belowCurrent > 0) {\n            for (let i = 0; i <= belowCurrent; i++) {\n                let opacity = 0.5 / i;\n                let offset = 2 * i;\n                gsap.to(this.getListItems()[id - i], {\n                    duration: 0.5,\n                    autoAlpha: opacity,\n                    x: `${offset}vw`,\n                    ease: \"power3.out\",\n                    overwrite: true\n                });\n            }\n        }\n    }\n}\n","import {gsap} from \"gsap/dist/gsap\";\nimport {SplitText} from \"gsap/dist/SplitText\";\n\ngsap.registerPlugin(SplitText);\n\nexport default class PanningGallery {\n    constructor() {\n        this.DOM = {\n            panningContainer: \".js-panning-container\",\n            panningElement: \".js-panning-element\",\n            panningItem: \".js-panning-item\",\n\n            //\n            titleNumberCurrent: \".js-title-number-current\",\n\n            //\n            titleCurrent: \".js-title-current\",\n        };\n\n        //\n        this.zeroPad = (num, places) => String(num).padStart(places, \"0\");\n\n        this.panningContainer = document.querySelector(this.DOM.panningContainer);\n        this.panningElement = document.querySelector(this.DOM.panningElement);\n\n        //\n        this.panningItem = document.querySelectorAll(this.DOM.panningItem);\n\n        //\n        this.titleNumberCurrent = document.querySelector(this.DOM.titleNumberCurrent);\n\n        //\n        this.title = document.querySelector(this.DOM.title);\n        this.titleCurrent = document.querySelector(this.DOM.titleCurrent);\n    }\n\n    init() {\n        if (this.panningElement == null) {\n            return;\n        }\n\n        console.log(\"PanningGallery init()\");\n\n        let panElementW = this.panningElement.clientWidth;\n        let panElementH = this.panningElement.clientHeight;\n\n        gsap.set(this.panningElement, {\n            x: -(panElementW - window.innerWidth) * 0.5,\n            y: -(panElementH - window.innerHeight) * 0.5,\n        });\n\n        this.initMousemove();\n        this.initMouseEnter();\n    }\n\n    initMousemove() {\n        window.addEventListener(\"mousemove\", (ev) => {\n            this.onMouseMove(ev);\n        });\n    }\n\n    initMouseEnter() {\n        for (let i = 0, l = this.panningItem.length; i < l; i++) {\n            this.panningItem[i].addEventListener(\"mouseenter\", (ev) => {\n                ev.preventDefault();\n\n                this.changeTitleNumber(i + 1);\n                this.changeTitle(ev.currentTarget);\n            });\n        }\n    }\n\n    initMouseLeave() {\n    }\n\n    onMouseMove(ev) {\n        let mouseX = ev.clientX;\n        let mouseY = ev.clientY;\n\n        let panElementW = this.panningElement.clientWidth;\n        let panElementH = this.panningElement.clientHeight;\n\n        let offsetX = window.innerWidth - panElementW;\n        let offsetY = window.innerHeight - panElementH;\n\n        gsap.to(this.panningElement, {\n            duration: 1,\n            x: (mouseX / window.innerWidth) * offsetX,\n            y: (mouseY / window.innerHeight) * offsetY,\n            ease: \"power3.out\",\n        });\n    }\n\n    changeTitleNumber(index) {\n        this.titleNumberCurrent.textContent = this.zeroPad(index, 3);\n    }\n\n    changeTitle(item) {\n        this.titleCurrent.textContent = item.getAttribute(\"data-title\");\n\n        let titleSplit = new SplitText(this.titleCurrent);\n        let titleSplitTimeline = gsap.timeline();\n\n        titleSplitTimeline.clear().time(0);\n        titleSplit.revert();\n\n        titleSplit.split({type: \"chars\"});\n        titleSplitTimeline.from(titleSplit.chars, {\n            duration: 1,\n            scale: 1.15,\n            autoAlpha: 0,\n            ease: \"power3.out\",\n            stagger: {\n                grid: [1, 15],\n                from: \"random\",\n                amount: 0.35,\n            },\n        });\n    }\n}\n","import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class ScrollingMarquee {\n    constructor() {\n        this.dividers = document.querySelectorAll(\".js-scrolling-marquee-divider\");\n        this.lines = document.querySelectorAll(\".js-scrolling-marquee-line\");\n\n        if (this.dividers.length < 1 || this.lines.length < 1) {\n            return;\n        }\n\n        this.topAnimOffset = this.lines[0].offsetHeight;\n        this.winWidth = window.innerWidth;\n        this.randomDividerPosition();\n        this.linesTrigger();\n    }\n\n    randomDividerPosition() {\n        this.dividers.forEach((divider, index) => {\n            let random = Math.random();\n\n            if (random > 0.8) {\n                random = 0.7;\n            } else if (random < 0.1) {\n                random = 0.3;\n            }\n\n            divider.style.left = `${this.winWidth * random}px`;\n            this.dividerController(divider, index);\n        });\n    }\n\n    linesTrigger() {\n        this.lines.forEach((line) => {\n            this.lineController(line);\n        });\n    }\n\n    lineController(line) {\n        gsap.to(line, {\n            scrollTrigger: {\n                trigger: line,\n                start: \"top bottom\",\n                end: `bottom+=${this.topAnimOffset * 2} top`,\n                scrub: true\n            },\n            x: \"-100%\",\n            ease: \"power3.inOut\"\n        });\n    }\n\n    dividerController(divider, index) {\n        const random = Math.random();\n        let offset = random * 200;\n        if (index % 2 === 0) {\n            offset = -offset;\n        }\n\n        gsap.to(divider, {\n            scrollTrigger: {\n                trigger: divider,\n                start: \"top bottom\",\n                end: \"bottom top\",\n                scrub: true\n            },\n            x: `${offset}%`,\n            scaleX: 1 + random\n        });\n    }\n}\n","/**\n * Template component\n * explain what this class is doing\n */\nexport default class TemplateComponent {\n    constructor() {\n        /**\n         * Template component DOM selectors\n         * @type {{templateComponentArray: string, templateComponent: string, states: {isActive: string}}}\n         */\n        this.DOM = {\n            templateComponent: \".js-template-component\",\n            templateComponentArray: \".js-template-component-array\",\n            states: {\n                isActive: \"is-active\",\n            },\n        };\n\n        /**\n         * Fetch template component DOM element\n         * @type {Element}\n         */\n        this.templateComponent = document.querySelector(this.DOM.templateComponent);\n\n        /**\n         * Fetch template component list of DOM elements\n         * @type {NodeListOf<Element>}\n         */\n        this.templateComponentArray = document.querySelectorAll(this.DOM.templateComponentArray);\n    }\n\n    /**\n     * Init\n     */\n    init() {\n        if (this.templateComponent === null) {\n            return;\n        }\n        // if (this.templateComponentArray.length < 1) {\n        //     return;\n        // }\n        console.log(\"Template component init\");\n        this.templateMethod();\n    }\n\n    /**\n     * Template method\n     * explain what this method is doing\n     */\n    templateMethod() {\n        console.log(\"Template method init\");\n    }\n}\n","/**\n * MAIN JS FILE\n */\n\n/**\n * Helpers\n * Imports of helper functions are stripped out of bundle\n * Include them within \"start-strip-code\" and \"end-strip-code\" comments\n */\n\n/**\n * Components\n */\nimport TemplateComponent from \"./examples/TemplateExample/TemplateComponent\";\nimport VerticalMouseDrivenCarousel from \"./examples/MouseDrivenVerticalCarousel/MouseDrivenVerticalCarousel\";\nimport ScrollingMarquee from \"./examples/ScrollingMarquee/ScrollingMarquee\";\nimport ThreeScrollytelling from \"./examples/3dScrollytelling/ThreeScrollytelling\";\nimport PanningGallery from \"./examples/PanningGallery/PanningGallery\";\nimport HoverClippingNavigation from \"./examples/HoverClippingNavigation/HoverClippingNavigation\";\nimport ImageSequence from \"./examples/ImageSequence/ImageSequence\";\nimport ContentAnimation from \"./examples/ImageSequence/ContentAnimation\";\n\n/**\n * Check if document is ready cross-browser\n * @param callback\n */\nconst ready = (callback) => {\n    if (document.readyState !== \"loading\") {\n        /**\n         * Document is already ready, call the callback directly\n         */\n        callback();\n    } else if (document.addEventListener) {\n        /**\n         * All modern browsers to register DOMContentLoaded\n         */\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    } else {\n        /**\n         * Old IE browsers\n         */\n        document.attachEvent(\"onreadystatechange\", function () {\n            if (document.readyState === \"complete\") {\n                callback();\n            }\n        });\n    }\n};\n\n/**\n * Document ready callback\n */\nready(() => {\n    /**\n     * HELPERS INIT\n     * Only init helpers if they exist\n     * Will be undefined on production because of import stripping\n     */\n\n    /**\n     * CREDITS INIT\n     */\n    const credits = [\n        \"background-color: #000000\",\n        \"color: white\",\n        \"display: block\",\n        \"line-height: 24px\",\n        \"text-align: center\",\n        \"border: 1px solid #ffffff\",\n        \"font-weight: bold\",\n    ].join(\";\");\n    console.info(\"dev by: %c Bornfight FE Team \", credits);\n\n    /**\n     * COMPONENTS INIT\n     */\n\n    /**\n     * Template component\n     * @type {TemplateComponent}\n     */\n    const templateComponent = new TemplateComponent();\n    templateComponent.init();\n\n    /**\n     * VerticalMouseDrivenCarousel component\n     * @type {VerticalMouseDrivenCarousel}\n     */\n    const verticalMouseDrivenCarousel = new VerticalMouseDrivenCarousel();\n\n    /**\n     * ScrollingMarquee component\n     * @type {ScrollingMarquee}\n     */\n    const scrollingMarquee = new ScrollingMarquee();\n\n    /**\n     * threeScrollytelling component\n     * @type {threeScrollytelling}\n     */\n    const threeScrollytelling = new ThreeScrollytelling();\n    threeScrollytelling.init();\n\n    /**\n     * PanningGallery component\n     * @type {PanningGallery}\n     */\n    const panningGallery = new PanningGallery();\n    panningGallery.init();\n\n    /**\n     * HoverClippingNavigation component\n     * @type {HoverClippingNavigation}\n     */\n    const hoverClippingNavigation = new HoverClippingNavigation();\n    hoverClippingNavigation.init();\n\n    /**\n     * ContentAnimation component\n     * @type {ContentAnimation}\n     */\n    const waitForScrollContentAnimations = new Promise((resolve, reject) => {\n        const contentAnimation = new ContentAnimation(resolve);\n        contentAnimation.init();\n    });\n\n\n    /**\n     * ImageSequence component\n     * @type {ImageSequence}\n     */\n    waitForScrollContentAnimations.then(() => {\n        const imageSequence = new ImageSequence();\n        imageSequence.init();\n    });\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}