{"version":3,"sources":["node_modules/browser-pack/_prelude.js","static/js/examples/MouseDrivenVerticalCarousel/MouseDrivenVerticalCarousel.js","static/js/examples/TemplateExample/TemplateComponent.js","static/js/index.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import gsap from \"gsap\";\n\nexport default class VerticalMouseDrivenCarousel {\n    constructor() {\n        this.defaults = {\n            carousel: \".js-mouse-driven-vertical-carousel\",\n            bgImg: \".js-mouse-driven-vertical-carousel-bg-img\",\n            list: \".js-mouse-driven-vertical-carousel-list\",\n            listItem: \".js-mouse-driven-vertical-carousel-list-item\"\n        };\n\n        this.posY = 0;\n\n        this.initCursor();\n        this.init();\n        this.bgImgController();\n    }\n\n    //region getters\n    getBgImgs() {\n        return document.querySelectorAll(this.defaults.bgImg);\n    }\n\n    getListItems() {\n        return document.querySelectorAll(this.defaults.listItem);\n    }\n\n    getList() {\n        return document.querySelector(this.defaults.list);\n    }\n\n    getCarousel() {\n        return document.querySelector(this.defaults.carousel);\n    }\n\n    init() {\n        gsap.set(this.getBgImgs(), {\n            autoAlpha: 0,\n            scale: 1.05\n        });\n\n        gsap.set(this.getBgImgs()[0], {\n            autoAlpha: 1,\n            scale: 1\n        });\n\n        this.listItems = this.getListItems().length - 1;\n\n        this.listOpacityController(0);\n    }\n\n    initCursor() {\n        const listHeight = this.getList().clientHeight;\n        const carouselHeight = this.getCarousel().clientHeight;\n\n        this.getCarousel().addEventListener(\n            \"mousemove\",\n            event => {\n                this.posY = event.pageY - this.getCarousel().offsetTop;\n                let offset = -this.posY / carouselHeight * listHeight;\n\n                gsap.to(this.getList(), {\n                    duration: 0.3,\n                    y: offset,\n                    ease: \"power4.out\"\n                });\n            },\n            false\n        );\n    }\n\n    bgImgController() {\n        for (const link of this.getListItems()) {\n            link.addEventListener(\"mouseenter\", ev => {\n                let currentId = ev.currentTarget.dataset.itemId;\n\n                this.listOpacityController(currentId);\n\n                gsap.to(ev.currentTarget, {\n                    duration: 0.3,\n                    autoAlpha: 1\n                });\n\n                gsap.to(\".is-visible\", {\n                    duration: 0.2,\n                    autoAlpha: 0,\n                    scale: 1.05\n                });\n\n                if (!this.getBgImgs()[currentId].classList.contains(\"is-visible\")) {\n                    this.getBgImgs()[currentId].classList.add(\"is-visible\");\n                }\n\n                gsap.to(this.getBgImgs()[currentId], {\n                    duration: 0.6,\n                    autoAlpha: 1,\n                    scale: 1\n                });\n            });\n        }\n    }\n\n    listOpacityController(id) {\n        id = parseInt(id);\n        let aboveCurrent = this.listItems - id;\n        let belowCurrent = parseInt(id);\n\n        if (aboveCurrent > 0) {\n            for (let i = 1; i <= aboveCurrent; i++) {\n                let opacity = 0.5 / i;\n                let offset = 5 * i;\n                gsap.to(this.getListItems()[id + i], {\n                    duration: 0.5,\n                    autoAlpha: opacity,\n                    x: offset,\n                    ease: \"power3.out\"\n                });\n            }\n        }\n\n        if (belowCurrent > 0) {\n            for (let i = 0; i <= belowCurrent; i++) {\n                let opacity = 0.5 / i;\n                let offset = 5 * i;\n                gsap.to(this.getListItems()[id - i], {\n                    duration: 0.5,\n                    autoAlpha: opacity,\n                    x: offset,\n                    ease: \"power3.out\"\n                });\n            }\n        }\n    }\n}\n","/**\n * Template component\n * explain what this class is doing\n */\nexport default class TemplateComponent {\n    constructor() {\n        /**\n         * Template component DOM selectors\n         * @type {{templateComponentArray: string, templateComponent: string, states: {isActive: string}}}\n         */\n        this.DOM = {\n            templateComponent: \".js-template-component\",\n            templateComponentArray: \".js-template-component-array\",\n            states: {\n                isActive: \"is-active\",\n            },\n        };\n\n        /**\n         * Fetch template component DOM element\n         * @type {Element}\n         */\n        this.templateComponent = document.querySelector(this.DOM.templateComponent);\n\n        /**\n         * Fetch template component list of DOM elements\n         * @type {NodeListOf<Element>}\n         */\n        this.templateComponentArray = document.querySelectorAll(this.DOM.templateComponentArray);\n    }\n\n    /**\n     * Init\n     */\n    init() {\n        if (this.templateComponent === null) {\n            return;\n        }\n        // if (this.templateComponentArray.length < 1) {\n        //     return;\n        // }\n        console.log(\"Template component init\");\n        this.templateMethod();\n    }\n\n    /**\n     * Template method\n     * explain what this method is doing\n     */\n    templateMethod() {\n        console.log(\"Template method init\");\n    }\n}\n","/**\n * MAIN JS FILE\n */\n\n/**\n * Helpers\n * Imports of helper functions are stripped out of bundle\n * Include them within \"start-strip-code\" and \"end-strip-code\" comments\n */\n\n/**\n * Components\n */\nimport TemplateComponent from \"./examples/TemplateExample/TemplateComponent\";\nimport VerticalMouseDrivenCarousel from \"./examples/MouseDrivenVerticalCarousel/MouseDrivenVerticalCarousel\";\n\n/**\n * Check if document is ready cross-browser\n * @param callback\n */\nconst ready = (callback) => {\n    if (document.readyState !== \"loading\") {\n        /**\n         * Document is already ready, call the callback directly\n         */\n        callback();\n    } else if (document.addEventListener) {\n        /**\n         * All modern browsers to register DOMContentLoaded\n         */\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    } else {\n        /**\n         * Old IE browsers\n         */\n        document.attachEvent(\"onreadystatechange\", function () {\n            if (document.readyState === \"complete\") {\n                callback();\n            }\n        });\n    }\n};\n\n/**\n * Document ready callback\n */\nready(() => {\n    /**\n     * HELPERS INIT\n     * Only init helpers if they exist\n     * Will be undefined on production because of import stripping\n     */\n\n    /**\n     * CREDITS INIT\n     */\n    const credits = [\n        \"background-color: #000000\",\n        \"color: white\",\n        \"display: block\",\n        \"line-height: 24px\",\n        \"text-align: center\",\n        \"border: 1px solid #ffffff\",\n        \"font-weight: bold\",\n    ].join(\";\");\n    console.info(\"dev by: %c Bornfight FE Team \", credits);\n\n    /**\n     * COMPONENTS INIT\n     */\n\n    /**\n     * Template component\n     * @type {TemplateComponent}\n     */\n    const templateComponent = new TemplateComponent();\n    templateComponent.init();\n\n    /**\n     * VerticalMouseDrivenCarousel component\n     * @type {VerticalMouseDrivenCarousel}\n     */\n    const verticalMouseDrivenCarousel = new VerticalMouseDrivenCarousel();\n    verticalMouseDrivenCarousel.init();\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}