{"version":3,"sources":["node_modules/browser-pack/_prelude.js","static/js/examples/3dScrollytelling/ScrollMarquee.js","static/js/examples/3dScrollytelling/ThreeScrollytelling.js","static/js/examples/MouseDrivenVerticalCarousel/MouseDrivenVerticalCarousel.js","static/js/examples/ScrollingMarquee/ScrollingMarquee.js","static/js/examples/TemplateExample/TemplateComponent.js","static/js/index.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class ScrollMarquee {\n    constructor() {\n        this.DOM = {\n            mainWrapper: \".js-scroll-marquee\",\n            topLine: \".js-scroll-marquee-top\",\n            bottomLine: \".js-scroll-marquee-bottom\",\n        };\n\n        this.mainWrappers = document.querySelectorAll(this.DOM.mainWrapper);\n    }\n\n    init() {\n        if (this.mainWrappers.length < 1) {\n            return;\n        }\n\n        this.mainWrappers.forEach((wrapper) => {\n            this.singleLine(wrapper);\n        });\n    }\n\n    singleLine(wrapper) {\n        const topLine = wrapper.querySelector(this.DOM.topLine);\n        const bottomLine = wrapper.querySelector(this.DOM.bottomLine);\n\n        if (topLine != null) {\n            this.animateLine(topLine, 1, wrapper);\n        }\n\n        if (bottomLine != null) {\n            this.animateLine(bottomLine, -1, wrapper);\n        }\n\n        ScrollTrigger.create({\n            trigger: wrapper,\n            pin: true,\n            start: \"top top\",\n            end: \"150%\",\n            onEnter: () => {\n                console.log(\"enter\");\n            },\n        });\n    }\n\n    animateLine(line, direction, wrapper) {\n        let start = -(line.offsetWidth - window.innerWidth);\n        let end = 0;\n\n        if (direction === -1) {\n            start = 0;\n            end = -(line.offsetWidth - window.innerWidth);\n        }\n\n        gsap.fromTo(\n            line,\n            {\n                x: start,\n            },\n            {\n                x: end,\n                scrollTrigger: {\n                    trigger: wrapper,\n                    start: \"top bottom\",\n                    end: `bottom+=${wrapper.offsetHeight * 1} top`,\n                    scrub: 1,\n                },\n                ease: \"none\",\n            },\n        );\n    }\n}\n","import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nimport {DRACOLoader} from \"three/examples/jsm/loaders/DRACOLoader\";\n\nimport ScrollMarquee from \"./ScrollMarquee\";\n\nexport default class ThreeScrollytelling {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-model-scroll-canvas\",\n            section: \".js-model-scroll-section\",\n            mainWrapper: \".js-model-scroll\",\n        };\n\n        this.models = [];\n\n        this.scrollTop = false;\n\n        // config\n        this.config = {\n            environment: {\n                scale: 16,\n            },\n        };\n    }\n\n    /**\n     * main init - all dom elements and method calls\n     */\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            if (\"scrollRestoration\" in window.history) {\n                window.history.scrollRestoration = \"manual\";\n            }\n\n            const scrollMarquee = new ScrollMarquee();\n            scrollMarquee.init();\n\n            console.log(\"ModelScrollSections init()\");\n\n            THREE.Cache.enabled = true;\n\n            this.width = window.innerWidth;\n            this.height = window.innerHeight;\n\n            // reflection map\n            const path = window.modelMaps;\n            const mapUrls = [path + \"posx.jpg\", path + \"negx.jpg\", path + \"posy.jpg\", path + \"negy.jpg\", path + \"posz.jpg\", path + \"negz.jpg\"];\n\n            this.cubeMap = new THREE.CubeTextureLoader().load(mapUrls);\n            this.cubeMap.format = THREE.RGBFormat;\n            this.cubeMap.encoding = THREE.sRGBEncoding;\n\n            this.initCamera();\n            this.initScene();\n            this.initLights();\n            this.initRenderer();\n\n            let waitModels = new Promise((resolve, reject) => {\n                this.throughSections(resolve);\n            });\n\n            waitModels.then(() => {\n                this.scrollController();\n                this.animate();\n                this.checkScroll();\n\n                this.models.filter((model) => {\n                    if (model.index !== 0) {\n                        this.modelHide(model.model, true);\n                    } else {\n                        gsap.fromTo(\n                            model.model.position,\n                            {\n                                x: 450,\n                                z: 0,\n                            },\n                            {\n                                x: 150 * model.direction,\n                                z: 0,\n                                duration: 0.8,\n                                delay: 0.3,\n                                ease: \"power4.out\",\n                            },\n                        );\n\n                        gsap.fromTo(\n                            model.model.rotation,\n                            {\n                                z: -Math.PI * 2,\n                            },\n                            {\n                                z: 0,\n                                duration: 0.8,\n                                delay: 0.3,\n                                ease: \"power4.out\",\n                            },\n                        );\n                    }\n                });\n            });\n\n            // handle resize\n            window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n        }\n    }\n\n    /**\n     * camera setup\n     */\n    initCamera() {\n        this.camera = new THREE.PerspectiveCamera(\n            35,\n            this.width / this.height,\n            0.5 * this.config.environment.scale,\n            130 * this.config.environment.scale,\n        );\n        this.camera.position.set(0, 0, 40 * this.config.environment.scale);\n    }\n\n    /**\n     * scene setup\n     */\n    initScene() {\n        this.scene = new THREE.Scene();\n    }\n\n    /**\n     * lights setup - because of performance > all in one object\n     */\n    initLights() {\n        const lightWrapper = new THREE.Object3D();\n\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x999999);\n        hemiLight.position.set(0, 200 * this.config.environment.scale, 0);\n\n        this.ambientLight = new THREE.AmbientLight(0x404040);\n\n        // this is just back light - without it back side of model would be barely visible\n        this.dirSubLight = new THREE.DirectionalLight(0xcccccc, 1);\n        this.dirSubLight.position.set(-20 * this.config.environment.scale, 20 * this.config.environment.scale, -20 * this.config.environment.scale);\n\n        this.dirLight = new THREE.DirectionalLight(0xcccccc, 3.5);\n        this.dirLight.position.set(20 * this.config.environment.scale, 30 * this.config.environment.scale, 10 * this.config.environment.scale);\n\n        lightWrapper.add(this.dirLight);\n        lightWrapper.add(this.dirSubLight);\n        lightWrapper.add(this.ambientLight);\n        lightWrapper.add(hemiLight);\n\n        this.scene.add(lightWrapper);\n    }\n\n    /**\n     * renderer setup\n     */\n    initRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            powerPreference: \"high-performance\",\n            alpha: true,\n        });\n        this.renderer.setClearColor(0x000000, 0);\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.physicallyCorrectLights = true;\n        this.modelContainer.appendChild(this.renderer.domElement);\n    }\n\n    /**\n     * go through sections and load models\n     */\n    throughSections(resolve) {\n        this.sections = document.querySelectorAll(this.DOM.section);\n\n        if (this.sections.length < 1) {\n            return;\n        }\n\n        this.sections.forEach((section, index) => {\n            const modelUrl = section.dataset.model;\n            const modelName = section.dataset.name;\n            if (modelUrl !== \"\" && modelUrl != null) {\n                this.initModel(modelUrl, index, resolve, modelName);\n            }\n        });\n    }\n\n    /**\n     * model setup and load call\n     */\n    initModel(modelUrl, index, resolve, modelName) {\n        let model = null;\n\n        // loader\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath(\"https://threejs.org/examples/js/libs/draco/\");\n        dracoLoader.setDecoderConfig({\n            type: \"js\",\n        });\n\n        dracoLoader.load(modelUrl, (geometry) => {\n            geometry.computeVertexNormals();\n            const material = new THREE.MeshStandardMaterial();\n            const mesh = new THREE.Mesh(geometry, material);\n\n            this.loadModel(mesh);\n            model = mesh;\n\n            this.models.push({model, index});\n\n            mesh.name = modelName;\n\n            this.scene.add(mesh);\n\n            dracoLoader.dispose();\n\n            this.dirLight.updateMatrix();\n            this.dirSubLight.updateMatrix();\n            this.ambientLight.updateMatrix();\n\n            if (index === this.sections.length - 1) {\n                setTimeout(() => {\n                    resolve();\n                }, 100);\n            }\n        });\n    }\n\n    /**\n     * moadel loading and controller call\n     * @param [object] object\n     */\n    loadModel(object) {\n        if (object.isMesh) {\n            const box = new THREE.Box3().setFromObject(object);\n            let z = Math.abs(box.min.z);\n\n            if (z === 0) {\n                z = -Math.abs(box.max.z);\n            }\n\n            object.geometry.translate(0, 0, z / 2);\n            object.rotation.x = Math.PI / 2;\n            object.castShadow = true;\n            // object.material.side = 2;\n            // object.material.shadowSide = 1;\n            object.material.emissive.set(0x020000);\n            object.material.metalness = 0;\n            // object.material.opacity = 0.3;\n            object.material.depthFunc = false;\n            // object.material.depthWrite = true;\n            object.material.transparent = false;\n            object.material.color.set(0x000dff);\n            object.material.color.convertSRGBToLinear();\n            // // object.matrixAutoUpdate = false;\n            // // object.material.needsUpdate = false;\n            object.material.envMap = this.cubeMap;\n            object.material.refractionRatio = 1;\n            object.material.reflectivity = 1;\n            object.material.roughness = 0;\n            object.material.clearcoat = 1;\n            object.material.clearcoatRoughness = 0;\n        }\n    }\n\n    /**\n     *\n     */\n    onWindowResize() {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    /**\n     * requestAnimationFrame\n     */\n    animate() {\n        this.renderer.render(this.scene, this.camera);\n        if (this.renderer != null) {\n            requestAnimationFrame(() => this.animate());\n        }\n    }\n\n    /**\n     * scrollTrigger\n     */\n    scrollController() {\n        // sort by index\n        this.models.sort((a, b) => {\n            return a.index - b.index;\n        });\n\n        this.models.forEach((model, index) => {\n            const direction = this.checkDirection(this.sections[model.index].dataset.position);\n            let nextDirection = 0;\n\n            if (this.sections[index + 1] != null) {\n                nextDirection = this.checkDirection(this.sections[index + 1].dataset.position);\n            }\n\n            model.direction = direction;\n\n            this.changeModelPosition(direction, nextDirection, model);\n\n            gsap.to(model.model.rotation, {\n                scrollTrigger: {\n                    trigger: this.sections[model.index],\n                    start: \"top 50%\",\n                    end: `bottom ${model.index === this.sections.length - 1 ? \"top\" : \"50%\"}`,\n                    scrub: true,\n                    onEnter: () => {\n                        this.modelShow(model.model);\n                    },\n                    onLeave: () => {\n                        this.modelHide(model.model, model.index !== this.models.length - 1);\n                    },\n                    onEnterBack: () => {\n                        this.modelShow(model.model);\n                    },\n                    onLeaveBack: () => {\n                        this.modelHide(model.model, model.index !== 0);\n                    },\n                },\n                ease: \"none\",\n            });\n        });\n    }\n\n    /**\n     *\n     * @param direction\n     * @returns {number}\n     */\n    // -1 = left\n    // 0 = center\n    // 1 = right\n    checkDirection(direction) {\n        switch (direction) {\n            case \"left\":\n                return -1;\n            case \"right\":\n                return 1;\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     *\n     * @param current\n     * @param next\n     * @param model\n     */\n    changeModelPosition(current, next, model) {\n        let rotation = model.index === this.sections.length - 1 ? -2 : -1;\n\n        if (current > next) {\n            rotation = model.index === this.sections.length - 1 ? 2 : 1;\n        }\n\n        this.models.filter((modelSingle) => {\n            if (modelSingle.index === model.index) {\n                modelSingle.endTilt = 0.25 * current;\n            }\n        });\n\n        this.models.filter((modelSingle) => {\n            if (modelSingle.index === model.index + 1) {\n                modelSingle.startTilt = model.endTilt;\n            }\n        });\n\n        this.models.filter((modelSingle) => {\n            let tl = gsap\n                .timeline({\n                    // ease: \"none\",\n                    scrollTrigger: {\n                        trigger: this.sections[model.index],\n                        start: `${model.index === 0 ? \"top\" : \"top\"} top`,\n                        end: \"bottom top\",\n                        scrub: true,\n                    },\n                })\n                .addLabel(\"start\")\n                .add(\"start\")\n                .fromTo(\n                    modelSingle.model.position,\n                    {\n                        x: 150 * current,\n                    },\n                    {\n                        x: 150 * next,\n                        ease: \"none\",\n                        duration: 2,\n                    },\n                    \"start\",\n                )\n                .fromTo(\n                    modelSingle.model.position,\n                    {\n                        z: 0,\n                    },\n                    {\n                        z: 150,\n                        ease: \"none\",\n                        duration: 1,\n                    },\n                    \"start\",\n                )\n                .fromTo(\n                    modelSingle.model.position,\n                    {\n                        z: 150,\n                    },\n                    {\n                        z: 0,\n                        ease: \"none\",\n                        duration: 1,\n                    },\n                    \"-=1\",\n                )\n                .addLabel(\"end\");\n\n            gsap.fromTo(\n                modelSingle.model.rotation,\n                {\n                    y: modelSingle.index === 0 ? 0 : model.startTilt || 0,\n                    z: 0,\n                },\n                {\n                    y: model.endTilt || 0,\n                    z: Math.PI * 2 * (this.scrollTop ? -1 : 1) * rotation,\n                    ease: \"none\",\n                    scrollTrigger: {\n                        trigger: this.sections[model.index],\n                        start: `${model.index === 0 ? \"top\" : \"top\"} top`,\n                        end: \"bottom top\",\n                        scrub: true,\n                    },\n                },\n            );\n\n            gsap.set(modelSingle.model.position, {\n                x: 150 * this.models[0].direction,\n            });\n        });\n    }\n\n    /**\n     *\n     * @param model\n     * @param hide\n     */\n    modelHide(model, hide = true) {\n        if (hide === false) {\n            return;\n        }\n\n        gsap.set(model.material, {\n            opacity: 0.7,\n            overwrite: true,\n            onComplete: () => {\n                model.visible = false;\n            },\n        });\n    }\n\n    /**\n     *\n     * @param model\n     */\n    modelShow(model) {\n        gsap.to(model.material, {\n            opacity: 1,\n            duration: 0.3,\n            ease: \"none\",\n            overwrite: true,\n            onStart: () => {\n                model.visible = true;\n            },\n        });\n    }\n\n    checkScroll() {\n        let currentTop = window.pageYOffset | document.body.scrollTop;\n        let pervTop = 0;\n        document.addEventListener(\"scroll\", () => {\n            currentTop = window.pageYOffset | document.body.scrollTop;\n            this.scrollTop = pervTop >= currentTop;\n        });\n    }\n}\n","import gsap from \"gsap\";\n\nexport default class VerticalMouseDrivenCarousel {\n    constructor() {\n        this.defaults = {\n            carousel: \".js-mouse-driven-vertical-carousel\",\n            bgImg: \".js-mouse-driven-vertical-carousel-bg-img\",\n            list: \".js-mouse-driven-vertical-carousel-list\",\n            listItem: \".js-mouse-driven-vertical-carousel-list-item\"\n        };\n\n        this.posY = 0;\n\n        if (this.getCarousel() == null) {\n            return;\n        }\n\n        this.initCursor();\n        this.init();\n        this.bgImgController();\n    }\n\n    //region getters\n    getBgImgs() {\n        return document.querySelectorAll(this.defaults.bgImg);\n    }\n\n    getListItems() {\n        return document.querySelectorAll(this.defaults.listItem);\n    }\n\n    getList() {\n        return document.querySelector(this.defaults.list);\n    }\n\n    getCarousel() {\n        return document.querySelector(this.defaults.carousel);\n    }\n\n    init() {\n        gsap.set(this.getBgImgs(), {\n            autoAlpha: 0,\n            scale: 1.05,\n            overwrite: true\n        });\n\n        gsap.set(this.getBgImgs()[0], {\n            autoAlpha: 1,\n            scale: 1,\n            overwrite: true\n        });\n\n        this.listItems = this.getListItems().length - 1;\n\n        this.listOpacityController(0);\n    }\n\n    initCursor() {\n        const listHeight = this.getList().clientHeight;\n        const carouselHeight = this.getCarousel().clientHeight;\n\n        this.getCarousel().addEventListener(\n            \"mousemove\",\n            event => {\n                this.posY = event.pageY - this.getCarousel().offsetTop;\n                let offset = -this.posY / carouselHeight * listHeight;\n\n                gsap.to(this.getList(), {\n                    duration: 0.3,\n                    y: offset,\n                    ease: \"power4.out\",\n                    overwrite: true\n                });\n            },\n            false\n        );\n    }\n\n    bgImgController() {\n        for (const link of this.getListItems()) {\n            link.addEventListener(\"mouseenter\", ev => {\n                let currentId = ev.currentTarget.dataset.itemId;\n\n                this.listOpacityController(currentId);\n\n                gsap.to(ev.currentTarget, {\n                    duration: 0.3,\n                    autoAlpha: 1,\n                    overwrite: true\n                });\n\n                gsap.to(\".is-visible\", {\n                    duration: 0.2,\n                    autoAlpha: 0,\n                    scale: 1.05,\n                    overwrite: true\n                });\n\n                if (!this.getBgImgs()[currentId].classList.contains(\"is-visible\")) {\n                    this.getBgImgs()[currentId].classList.add(\"is-visible\");\n                }\n\n                gsap.to(this.getBgImgs()[currentId], {\n                    duration: 0.6,\n                    autoAlpha: 1,\n                    scale: 1,\n                    overwrite: true\n                });\n            });\n        }\n    }\n\n    listOpacityController(id) {\n        id = parseInt(id);\n        let aboveCurrent = this.listItems - id;\n        let belowCurrent = parseInt(id);\n\n        if (aboveCurrent > 0) {\n            for (let i = 1; i <= aboveCurrent; i++) {\n                let opacity = 0.5 / i;\n                let offset = 2 * i;\n                gsap.to(this.getListItems()[id + i], {\n                    duration: 0.5,\n                    autoAlpha: opacity,\n                    x: `${offset}vw`,\n                    ease: \"power3.out\",\n                    overwrite: true\n                });\n            }\n        }\n\n        if (belowCurrent > 0) {\n            for (let i = 0; i <= belowCurrent; i++) {\n                let opacity = 0.5 / i;\n                let offset = 2 * i;\n                gsap.to(this.getListItems()[id - i], {\n                    duration: 0.5,\n                    autoAlpha: opacity,\n                    x: `${offset}vw`,\n                    ease: \"power3.out\",\n                    overwrite: true\n                });\n            }\n        }\n    }\n}\n","import gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nexport default class ScrollingMarquee {\n    constructor() {\n        this.dividers = document.querySelectorAll(\".js-scrolling-marquee-divider\");\n        this.lines = document.querySelectorAll(\".js-scrolling-marquee-line\");\n\n        if (this.dividers.length < 1 || this.lines.length < 1) {\n            return;\n        }\n\n        this.topAnimOffset = this.lines[0].offsetHeight;\n        this.winWidth = window.innerWidth;\n        this.randomDividerPosition();\n        this.linesTrigger();\n    }\n\n    randomDividerPosition() {\n        this.dividers.forEach((divider, index) => {\n            let random = Math.random();\n\n            if (random > 0.8) {\n                random = 0.7;\n            } else if (random < 0.1) {\n                random = 0.3;\n            }\n\n            divider.style.left = `${this.winWidth * random}px`;\n            this.dividerController(divider, index);\n        });\n    }\n\n    linesTrigger() {\n        this.lines.forEach((line) => {\n            this.lineController(line);\n        });\n    }\n\n    lineController(line) {\n        gsap.to(line, {\n            scrollTrigger: {\n                trigger: line,\n                start: \"top bottom\",\n                end: `bottom+=${this.topAnimOffset * 2} top`,\n                scrub: true\n            },\n            x: \"-100%\",\n            ease: \"power3.inOut\"\n        });\n    }\n\n    dividerController(divider, index) {\n        const random = Math.random();\n        let offset = random * 200;\n        if (index % 2 === 0) {\n            offset = -offset;\n        }\n\n        gsap.to(divider, {\n            scrollTrigger: {\n                trigger: divider,\n                start: \"top bottom\",\n                end: \"bottom top\",\n                scrub: true\n            },\n            x: `${offset}%`,\n            scaleX: 1 + random\n        });\n    }\n}\n","/**\n * Template component\n * explain what this class is doing\n */\nexport default class TemplateComponent {\n    constructor() {\n        /**\n         * Template component DOM selectors\n         * @type {{templateComponentArray: string, templateComponent: string, states: {isActive: string}}}\n         */\n        this.DOM = {\n            templateComponent: \".js-template-component\",\n            templateComponentArray: \".js-template-component-array\",\n            states: {\n                isActive: \"is-active\",\n            },\n        };\n\n        /**\n         * Fetch template component DOM element\n         * @type {Element}\n         */\n        this.templateComponent = document.querySelector(this.DOM.templateComponent);\n\n        /**\n         * Fetch template component list of DOM elements\n         * @type {NodeListOf<Element>}\n         */\n        this.templateComponentArray = document.querySelectorAll(this.DOM.templateComponentArray);\n    }\n\n    /**\n     * Init\n     */\n    init() {\n        if (this.templateComponent === null) {\n            return;\n        }\n        // if (this.templateComponentArray.length < 1) {\n        //     return;\n        // }\n        console.log(\"Template component init\");\n        this.templateMethod();\n    }\n\n    /**\n     * Template method\n     * explain what this method is doing\n     */\n    templateMethod() {\n        console.log(\"Template method init\");\n    }\n}\n","/**\n * MAIN JS FILE\n */\n\n/**\n * Helpers\n * Imports of helper functions are stripped out of bundle\n * Include them within \"start-strip-code\" and \"end-strip-code\" comments\n */\n\n/**\n * Components\n */\nimport TemplateComponent from \"./examples/TemplateExample/TemplateComponent\";\nimport VerticalMouseDrivenCarousel from \"./examples/MouseDrivenVerticalCarousel/MouseDrivenVerticalCarousel\";\nimport ScrollingMarquee from \"./examples/ScrollingMarquee/ScrollingMarquee\";\nimport ThreeScrollytelling from \"./examples/3dScrollytelling/ThreeScrollytelling\";\n\n/**\n * Check if document is ready cross-browser\n * @param callback\n */\nconst ready = (callback) => {\n    if (document.readyState !== \"loading\") {\n        /**\n         * Document is already ready, call the callback directly\n         */\n        callback();\n    } else if (document.addEventListener) {\n        /**\n         * All modern browsers to register DOMContentLoaded\n         */\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    } else {\n        /**\n         * Old IE browsers\n         */\n        document.attachEvent(\"onreadystatechange\", function () {\n            if (document.readyState === \"complete\") {\n                callback();\n            }\n        });\n    }\n};\n\n/**\n * Document ready callback\n */\nready(() => {\n    /**\n     * HELPERS INIT\n     * Only init helpers if they exist\n     * Will be undefined on production because of import stripping\n     */\n\n    /**\n     * CREDITS INIT\n     */\n    const credits = [\n        \"background-color: #000000\",\n        \"color: white\",\n        \"display: block\",\n        \"line-height: 24px\",\n        \"text-align: center\",\n        \"border: 1px solid #ffffff\",\n        \"font-weight: bold\",\n    ].join(\";\");\n    console.info(\"dev by: %c Bornfight FE Team \", credits);\n\n    /**\n     * COMPONENTS INIT\n     */\n\n    /**\n     * Template component\n     * @type {TemplateComponent}\n     */\n    const templateComponent = new TemplateComponent();\n    templateComponent.init();\n\n    /**\n     * VerticalMouseDrivenCarousel component\n     * @type {VerticalMouseDrivenCarousel}\n     */\n    const verticalMouseDrivenCarousel = new VerticalMouseDrivenCarousel();\n\n    /**\n     * ScrollingMarquee component\n     * @type {ScrollingMarquee}\n     */\n    const scrollingMarquee = new ScrollingMarquee();\n\n    /**\n     * threeScrollytelling component\n     * @type {threeScrollytelling}\n     */\n    const threeScrollytelling = new ThreeScrollytelling();\n    threeScrollytelling.init();\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzdGF0aWMvanMvZXhhbXBsZXMvM2RTY3JvbGx5dGVsbGluZy9TY3JvbGxNYXJxdWVlLmpzIiwic3RhdGljL2pzL2V4YW1wbGVzLzNkU2Nyb2xseXRlbGxpbmcvVGhyZWVTY3JvbGx5dGVsbGluZy5qcyIsInN0YXRpYy9qcy9leGFtcGxlcy9Nb3VzZURyaXZlblZlcnRpY2FsQ2Fyb3VzZWwvTW91c2VEcml2ZW5WZXJ0aWNhbENhcm91c2VsLmpzIiwic3RhdGljL2pzL2V4YW1wbGVzL1Njcm9sbGluZ01hcnF1ZWUvU2Nyb2xsaW5nTWFycXVlZS5qcyIsInN0YXRpYy9qcy9leGFtcGxlcy9UZW1wbGF0ZUV4YW1wbGUvVGVtcGxhdGVDb21wb25lbnQuanMiLCJzdGF0aWMvanMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FDQUE7O0FBQ0E7Ozs7Ozs7Ozs7QUFFQSxjQUFLLGNBQUwsQ0FBb0Isc0JBQXBCOztJQUVxQixhO0FBQ2pCLDJCQUFjO0FBQUE7O0FBQ1YsU0FBSyxHQUFMLEdBQVc7QUFDUCxNQUFBLFdBQVcsRUFBRSxvQkFETjtBQUVQLE1BQUEsT0FBTyxFQUFFLHdCQUZGO0FBR1AsTUFBQSxVQUFVLEVBQUU7QUFITCxLQUFYO0FBTUEsU0FBSyxZQUFMLEdBQW9CLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixLQUFLLEdBQUwsQ0FBUyxXQUFuQyxDQUFwQjtBQUNIOzs7O1dBRUQsZ0JBQU87QUFBQTs7QUFDSCxVQUFJLEtBQUssWUFBTCxDQUFrQixNQUFsQixHQUEyQixDQUEvQixFQUFrQztBQUM5QjtBQUNIOztBQUVELFdBQUssWUFBTCxDQUFrQixPQUFsQixDQUEwQixVQUFDLE9BQUQsRUFBYTtBQUNuQyxRQUFBLEtBQUksQ0FBQyxVQUFMLENBQWdCLE9BQWhCO0FBQ0gsT0FGRDtBQUdIOzs7V0FFRCxvQkFBVyxPQUFYLEVBQW9CO0FBQ2hCLFVB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QUFiLEVBQStCO0FBQ2xDO0FBQ1I7QUFDQTtBQUNRLElBQUEsUUFBUSxDQUFDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxRQUE5QztBQUNILEdBTE0sTUFLQTtBQUNIO0FBQ1I7QUFDQTtBQUNRLElBQUEsUUFBUSxDQUFDLFdBQVQsQ0FBcUIsb0JBQXJCLEVBQTJDLFlBQVk7QUFDbkQsVUFBSSxRQUFRLENBQUMsVUFBVCxLQUF3QixVQUE1QixFQUF3QztBQUNwQyxRQUFBLFFBQVE7QUFDWDtBQUNKLEtBSkQ7QUFLSDtBQUNKLENBckJEO0FBdUJBO0FBQ0E7QUFDQTs7O0FBQ0EsS0FBSyxDQUFDLFlBQU07QUFDUjtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVJO0FBQ0o7QUFDQTtBQUNJLE1BQU0sT0FBTyxHQUFHLENBQ1osMkJBRFksRUFFWixjQUZZLEVBR1osZ0JBSFksRUFJWixtQkFKWSxFQUtaLG9CQUxZLEVBTVosMkJBTlksRUFPWixtQkFQWSxFQVFkLElBUmMsQ0FRVCxHQVJTLENBQWhCO0FBU0EsRUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLCtCQUFiLEVBQThDLE9BQTlDO0FBRUE7QUFDSjtBQUNBOztBQUVJO0FBQ0o7QUFDQTtBQUNBOztBQUNJLE1BQU0saUJBQWlCLEdBQUcsSUFBSSwwQkFBSixFQUExQjtBQUNBLEVBQUEsaUJBQWlCLENBQUMsSUFBbEI7QUFFQTtBQUNKO0FBQ0E7QUFDQTs7QUFDSSxNQUFNLDJCQUEyQixHQUFHLElBQUksb0NBQUosRUFBcEM7QUFFQTtBQUNKO0FBQ0E7QUFDQTs7QUFDSSxNQUFNLGdCQUFnQixHQUFHLElBQUkseUJBQUosRUFBekI7QUFFQTtBQUNKO0FBQ0E7QUFDQTs7QUFDSSxNQUFNLG1CQUFtQixHQUFHLElBQUksNEJBQUosRUFBNUI7QUFDQSxFQUFBLG1CQUFtQixDQUFDLElBQXBCO0FBQ0gsQ0FsREksQ0FBTCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5pbXBvcnQgU2Nyb2xsVHJpZ2dlciBmcm9tIFwiZ3NhcC9TY3JvbGxUcmlnZ2VyXCI7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcm9sbE1hcnF1ZWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLkRPTSA9IHtcbiAgICAgICAgICAgIG1haW5XcmFwcGVyOiBcIi5qcy1zY3JvbGwtbWFycXVlZVwiLFxuICAgICAgICAgICAgdG9wTGluZTogXCIuanMtc2Nyb2xsLW1hcnF1ZWUtdG9wXCIsXG4gICAgICAgICAgICBib3R0b21MaW5lOiBcIi5qcy1zY3JvbGwtbWFycXVlZS1ib3R0b21cIixcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm1haW5XcmFwcGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5ET00ubWFpbldyYXBwZXIpO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLm1haW5XcmFwcGVycy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1haW5XcmFwcGVycy5mb3JFYWNoKCh3cmFwcGVyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNpbmdsZUxpbmUod3JhcHBlcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNpbmdsZUxpbmUod3JhcHBlcikge1xuICAgICAgICBjb25zdCB0b3BMaW5lID0gd3JhcHBlci5xdWVyeVNlbGVjdG9yKHRoaXMuRE9NLnRvcExpbmUpO1xuICAgICAgICBjb25zdCBib3R0b21MaW5lID0gd3JhcHBlci5xdWVyeVNlbGVjdG9yKHRoaXMuRE9NLmJvdHRvbUxpbmUpO1xuXG4gICAgICAgIGlmICh0b3BMaW5lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUxpbmUodG9wTGluZSwgMSwgd3JhcHBlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm90dG9tTGluZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGVMaW5lKGJvdHRvbUxpbmUsIC0xLCB3cmFwcGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFNjcm9sbFRyaWdnZXIuY3JlYXRlKHtcbiAgICAgICAgICAgIHRyaWdnZXI6IHdyYXBwZXIsXG4gICAgICAgICAgICBwaW46IHRydWUsXG4gICAgICAgICAgICBzdGFydDogXCJ0b3AgdG9wXCIsXG4gICAgICAgICAgICBlbmQ6IFwiMTUwJVwiLFxuICAgICAgICAgICAgb25FbnRlcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZW50ZXJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhbmltYXRlTGluZShsaW5lLCBkaXJlY3Rpb24sIHdyYXBwZXIpIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gLShsaW5lLm9mZnNldFdpZHRoIC0gd2luZG93LmlubmVyV2lkdGgpO1xuICAgICAgICBsZXQgZW5kID0gMDtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAtMSkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgZW5kID0gLShsaW5lLm9mZnNldFdpZHRoIC0gd2luZG93LmlubmVyV2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3NhcC5mcm9tVG8oXG4gICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IHN0YXJ0LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB4OiBlbmQsXG4gICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiB3cmFwcGVyLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJ0b3AgYm90dG9tXCIsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogYGJvdHRvbSs9JHt3cmFwcGVyLm9mZnNldEhlaWdodCAqIDF9IHRvcGAsXG4gICAgICAgICAgICAgICAgICAgIHNjcnViOiAxLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZWFzZTogXCJub25lXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5pbXBvcnQgU2Nyb2xsVHJpZ2dlciBmcm9tIFwiZ3NhcC9TY3JvbGxUcmlnZ2VyXCI7XG5cbmdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5cbmltcG9ydCB7RFJBQ09Mb2FkZXJ9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9EUkFDT0xvYWRlclwiO1xuXG5pbXBvcnQgU2Nyb2xsTWFycXVlZSBmcm9tIFwiLi9TY3JvbGxNYXJxdWVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRocmVlU2Nyb2xseXRlbGxpbmcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLkRPTSA9IHtcbiAgICAgICAgICAgIG1vZGVsQ29udGFpbmVyOiBcIi5qcy1tb2RlbC1zY3JvbGwtY2FudmFzXCIsXG4gICAgICAgICAgICBzZWN0aW9uOiBcIi5qcy1tb2RlbC1zY3JvbGwtc2VjdGlvblwiLFxuICAgICAgICAgICAgbWFpbldyYXBwZXI6IFwiLmpzLW1vZGVsLXNjcm9sbFwiLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubW9kZWxzID0gW107XG5cbiAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSBmYWxzZTtcblxuICAgICAgICAvLyBjb25maWdcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgICAgIHNjYWxlOiAxNixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbWFpbiBpbml0IC0gYWxsIGRvbSBlbGVtZW50cyBhbmQgbWV0aG9kIGNhbGxzXG4gICAgICovXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5tb2RlbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5ET00ubW9kZWxDb250YWluZXIpO1xuICAgICAgICBpZiAodGhpcy5tb2RlbENvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKFwic2Nyb2xsUmVzdG9yYXRpb25cIiBpbiB3aW5kb3cuaGlzdG9yeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsTWFycXVlZSA9IG5ldyBTY3JvbGxNYXJxdWVlKCk7XG4gICAgICAgICAgICBzY3JvbGxNYXJxdWVlLmluaXQoKTtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJNb2RlbFNjcm9sbFNlY3Rpb25zIGluaXQoKVwiKTtcblxuICAgICAgICAgICAgVEhSRUUuQ2FjaGUuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgICAvLyByZWZsZWN0aW9uIG1hcFxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHdpbmRvdy5tb2RlbE1hcHM7XG4gICAgICAgICAgICBjb25zdCBtYXBVcmxzID0gW3BhdGggKyBcInBvc3guanBnXCIsIHBhdGggKyBcIm5lZ3guanBnXCIsIHBhdGggKyBcInBvc3kuanBnXCIsIHBhdGggKyBcIm5lZ3kuanBnXCIsIHBhdGggKyBcInBvc3ouanBnXCIsIHBhdGggKyBcIm5lZ3ouanBnXCJdO1xuXG4gICAgICAgICAgICB0aGlzLmN1YmVNYXAgPSBuZXcgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKS5sb2FkKG1hcFVybHMpO1xuICAgICAgICAgICAgdGhpcy5jdWJlTWFwLmZvcm1hdCA9IFRIUkVFLlJHQkZvcm1hdDtcbiAgICAgICAgICAgIHRoaXMuY3ViZU1hcC5lbmNvZGluZyA9IFRIUkVFLnNSR0JFbmNvZGluZztcblxuICAgICAgICAgICAgdGhpcy5pbml0Q2FtZXJhKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRTY2VuZSgpO1xuICAgICAgICAgICAgdGhpcy5pbml0TGlnaHRzKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRSZW5kZXJlcigpO1xuXG4gICAgICAgICAgICBsZXQgd2FpdE1vZGVscyA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRocm91Z2hTZWN0aW9ucyhyZXNvbHZlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3YWl0TW9kZWxzLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsQ29udHJvbGxlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tTY3JvbGwoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxzLmZpbHRlcigobW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGVsLmluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsSGlkZShtb2RlbC5tb2RlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnc2FwLmZyb21UbyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5tb2RlbC5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IDQ1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgejogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDogMTUwICogbW9kZWwuZGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC44LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogMC4zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcInBvd2VyNC5vdXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZ3NhcC5mcm9tVG8oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwubW9kZWwucm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6OiAtTWF0aC5QSSAqIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiAwLjMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2U6IFwicG93ZXI0Lm91dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gaGFuZGxlIHJlc2l6ZVxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgKCkgPT4gdGhpcy5vbldpbmRvd1Jlc2l6ZSgpLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjYW1lcmEgc2V0dXBcbiAgICAgKi9cbiAgICBpbml0Q2FtZXJhKCkge1xuICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcbiAgICAgICAgICAgIDM1LFxuICAgICAgICAgICAgdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgMC41ICogdGhpcy5jb25maWcuZW52aXJvbm1lbnQuc2NhbGUsXG4gICAgICAgICAgICAxMzAgKiB0aGlzLmNvbmZpZy5lbnZpcm9ubWVudC5zY2FsZSxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDQwICogdGhpcy5jb25maWcuZW52aXJvbm1lbnQuc2NhbGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNjZW5lIHNldHVwXG4gICAgICovXG4gICAgaW5pdFNjZW5lKCkge1xuICAgICAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbGlnaHRzIHNldHVwIC0gYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSA+IGFsbCBpbiBvbmUgb2JqZWN0XG4gICAgICovXG4gICAgaW5pdExpZ2h0cygpIHtcbiAgICAgICAgY29uc3QgbGlnaHRXcmFwcGVyID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG5cbiAgICAgICAgY29uc3QgaGVtaUxpZ2h0ID0gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodCgweGZmZmZmZiwgMHg5OTk5OTkpO1xuICAgICAgICBoZW1pTGlnaHQucG9zaXRpb24uc2V0KDAsIDIwMCAqIHRoaXMuY29uZmlnLmVudmlyb25tZW50LnNjYWxlLCAwKTtcblxuICAgICAgICB0aGlzLmFtYmllbnRMaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHg0MDQwNDApO1xuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBiYWNrIGxpZ2h0IC0gd2l0aG91dCBpdCBiYWNrIHNpZGUgb2YgbW9kZWwgd291bGQgYmUgYmFyZWx5IHZpc2libGVcbiAgICAgICAgdGhpcy5kaXJTdWJMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4Y2NjY2NjLCAxKTtcbiAgICAgICAgdGhpcy5kaXJTdWJMaWdodC5wb3NpdGlvbi5zZXQoLTIwICogdGhpcy5jb25maWcuZW52aXJvbm1lbnQuc2NhbGUsIDIwICogdGhpcy5jb25maWcuZW52aXJvbm1lbnQuc2NhbGUsIC0yMCAqIHRoaXMuY29uZmlnLmVudmlyb25tZW50LnNjYWxlKTtcblxuICAgICAgICB0aGlzLmRpckxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhjY2NjY2MsIDMuNSk7XG4gICAgICAgIHRoaXMuZGlyTGlnaHQucG9zaXRpb24uc2V0KDIwICogdGhpcy5jb25maWcuZW52aXJvbm1lbnQuc2NhbGUsIDMwICogdGhpcy5jb25maWcuZW52aXJvbm1lbnQuc2NhbGUsIDEwICogdGhpcy5jb25maWcuZW52aXJvbm1lbnQuc2NhbGUpO1xuXG4gICAgICAgIGxpZ2h0V3JhcHBlci5hZGQodGhpcy5kaXJMaWdodCk7XG4gICAgICAgIGxpZ2h0V3JhcHBlci5hZGQodGhpcy5kaXJTdWJMaWdodCk7XG4gICAgICAgIGxpZ2h0V3JhcHBlci5hZGQodGhpcy5hbWJpZW50TGlnaHQpO1xuICAgICAgICBsaWdodFdyYXBwZXIuYWRkKGhlbWlMaWdodCk7XG5cbiAgICAgICAgdGhpcy5zY2VuZS5hZGQobGlnaHRXcmFwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXJlciBzZXR1cFxuICAgICAqL1xuICAgIGluaXRSZW5kZXJlcigpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcbiAgICAgICAgICAgIGFudGlhbGlhczogdHJ1ZSxcbiAgICAgICAgICAgIHBvd2VyUHJlZmVyZW5jZTogXCJoaWdoLXBlcmZvcm1hbmNlXCIsXG4gICAgICAgICAgICBhbHBoYTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDAwMCwgMCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgPSB0cnVlO1xuICAgICAgICB0aGlzLm1vZGVsQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ28gdGhyb3VnaCBzZWN0aW9ucyBhbmQgbG9hZCBtb2RlbHNcbiAgICAgKi9cbiAgICB0aHJvdWdoU2VjdGlvbnMocmVzb2x2ZSkge1xuICAgICAgICB0aGlzLnNlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLkRPTS5zZWN0aW9uKTtcblxuICAgICAgICBpZiAodGhpcy5zZWN0aW9ucy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlY3Rpb25zLmZvckVhY2goKHNlY3Rpb24sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2RlbFVybCA9IHNlY3Rpb24uZGF0YXNldC5tb2RlbDtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsTmFtZSA9IHNlY3Rpb24uZGF0YXNldC5uYW1lO1xuICAgICAgICAgICAgaWYgKG1vZGVsVXJsICE9PSBcIlwiICYmIG1vZGVsVXJsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRNb2RlbChtb2RlbFVybCwgaW5kZXgsIHJlc29sdmUsIG1vZGVsTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG1vZGVsIHNldHVwIGFuZCBsb2FkIGNhbGxcbiAgICAgKi9cbiAgICBpbml0TW9kZWwobW9kZWxVcmwsIGluZGV4LCByZXNvbHZlLCBtb2RlbE5hbWUpIHtcbiAgICAgICAgbGV0IG1vZGVsID0gbnVsbDtcblxuICAgICAgICAvLyBsb2FkZXJcbiAgICAgICAgY29uc3QgZHJhY29Mb2FkZXIgPSBuZXcgRFJBQ09Mb2FkZXIoKTtcbiAgICAgICAgZHJhY29Mb2FkZXIuc2V0RGVjb2RlclBhdGgoXCJodHRwczovL3RocmVlanMub3JnL2V4YW1wbGVzL2pzL2xpYnMvZHJhY28vXCIpO1xuICAgICAgICBkcmFjb0xvYWRlci5zZXREZWNvZGVyQ29uZmlnKHtcbiAgICAgICAgICAgIHR5cGU6IFwianNcIixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZHJhY29Mb2FkZXIubG9hZChtb2RlbFVybCwgKGdlb21ldHJ5KSA9PiB7XG4gICAgICAgICAgICBnZW9tZXRyeS5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuXG4gICAgICAgICAgICB0aGlzLmxvYWRNb2RlbChtZXNoKTtcbiAgICAgICAgICAgIG1vZGVsID0gbWVzaDtcblxuICAgICAgICAgICAgdGhpcy5tb2RlbHMucHVzaCh7bW9kZWwsIGluZGV4fSk7XG5cbiAgICAgICAgICAgIG1lc2gubmFtZSA9IG1vZGVsTmFtZTtcblxuICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQobWVzaCk7XG5cbiAgICAgICAgICAgIGRyYWNvTG9hZGVyLmRpc3Bvc2UoKTtcblxuICAgICAgICAgICAgdGhpcy5kaXJMaWdodC51cGRhdGVNYXRyaXgoKTtcbiAgICAgICAgICAgIHRoaXMuZGlyU3ViTGlnaHQudXBkYXRlTWF0cml4KCk7XG4gICAgICAgICAgICB0aGlzLmFtYmllbnRMaWdodC51cGRhdGVNYXRyaXgoKTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0aGlzLnNlY3Rpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG1vYWRlbCBsb2FkaW5nIGFuZCBjb250cm9sbGVyIGNhbGxcbiAgICAgKiBAcGFyYW0gW29iamVjdF0gb2JqZWN0XG4gICAgICovXG4gICAgbG9hZE1vZGVsKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0LmlzTWVzaCkge1xuICAgICAgICAgICAgY29uc3QgYm94ID0gbmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KG9iamVjdCk7XG4gICAgICAgICAgICBsZXQgeiA9IE1hdGguYWJzKGJveC5taW4ueik7XG5cbiAgICAgICAgICAgIGlmICh6ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgeiA9IC1NYXRoLmFicyhib3gubWF4LnopO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYmplY3QuZ2VvbWV0cnkudHJhbnNsYXRlKDAsIDAsIHogLyAyKTtcbiAgICAgICAgICAgIG9iamVjdC5yb3RhdGlvbi54ID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICAgICAgICAvLyBvYmplY3QubWF0ZXJpYWwuc2lkZSA9IDI7XG4gICAgICAgICAgICAvLyBvYmplY3QubWF0ZXJpYWwuc2hhZG93U2lkZSA9IDE7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuZW1pc3NpdmUuc2V0KDB4MDIwMDAwKTtcbiAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5tZXRhbG5lc3MgPSAwO1xuICAgICAgICAgICAgLy8gb2JqZWN0Lm1hdGVyaWFsLm9wYWNpdHkgPSAwLjM7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuZGVwdGhGdW5jID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBvYmplY3QubWF0ZXJpYWwuZGVwdGhXcml0ZSA9IHRydWU7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwudHJhbnNwYXJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5jb2xvci5zZXQoMHgwMDBkZmYpO1xuICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmNvbG9yLmNvbnZlcnRTUkdCVG9MaW5lYXIoKTtcbiAgICAgICAgICAgIC8vIC8vIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAvLyAvLyBvYmplY3QubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5lbnZNYXAgPSB0aGlzLmN1YmVNYXA7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvID0gMTtcbiAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5yZWZsZWN0aXZpdHkgPSAxO1xuICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLnJvdWdobmVzcyA9IDA7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuY2xlYXJjb2F0ID0gMTtcbiAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICovXG4gICAgYW5pbWF0ZSgpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJlciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hbmltYXRlKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2Nyb2xsVHJpZ2dlclxuICAgICAqL1xuICAgIHNjcm9sbENvbnRyb2xsZXIoKSB7XG4gICAgICAgIC8vIHNvcnQgYnkgaW5kZXhcbiAgICAgICAgdGhpcy5tb2RlbHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1vZGVscy5mb3JFYWNoKChtb2RlbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuY2hlY2tEaXJlY3Rpb24odGhpcy5zZWN0aW9uc1ttb2RlbC5pbmRleF0uZGF0YXNldC5wb3NpdGlvbik7XG4gICAgICAgICAgICBsZXQgbmV4dERpcmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNlY3Rpb25zW2luZGV4ICsgMV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG5leHREaXJlY3Rpb24gPSB0aGlzLmNoZWNrRGlyZWN0aW9uKHRoaXMuc2VjdGlvbnNbaW5kZXggKyAxXS5kYXRhc2V0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kZWwuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuXG4gICAgICAgICAgICB0aGlzLmNoYW5nZU1vZGVsUG9zaXRpb24oZGlyZWN0aW9uLCBuZXh0RGlyZWN0aW9uLCBtb2RlbCk7XG5cbiAgICAgICAgICAgIGdzYXAudG8obW9kZWwubW9kZWwucm90YXRpb24sIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IHRoaXMuc2VjdGlvbnNbbW9kZWwuaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJ0b3AgNTAlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogYGJvdHRvbSAke21vZGVsLmluZGV4ID09PSB0aGlzLnNlY3Rpb25zLmxlbmd0aCAtIDEgPyBcInRvcFwiIDogXCI1MCVcIn1gLFxuICAgICAgICAgICAgICAgICAgICBzY3J1YjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgb25FbnRlcjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbFNob3cobW9kZWwubW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkxlYXZlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsSGlkZShtb2RlbC5tb2RlbCwgbW9kZWwuaW5kZXggIT09IHRoaXMubW9kZWxzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkVudGVyQmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbFNob3cobW9kZWwubW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkxlYXZlQmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbEhpZGUobW9kZWwubW9kZWwsIG1vZGVsLmluZGV4ICE9PSAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVhc2U6IFwibm9uZVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRpcmVjdGlvblxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgLy8gLTEgPSBsZWZ0XG4gICAgLy8gMCA9IGNlbnRlclxuICAgIC8vIDEgPSByaWdodFxuICAgIGNoZWNrRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjdXJyZW50XG4gICAgICogQHBhcmFtIG5leHRcbiAgICAgKiBAcGFyYW0gbW9kZWxcbiAgICAgKi9cbiAgICBjaGFuZ2VNb2RlbFBvc2l0aW9uKGN1cnJlbnQsIG5leHQsIG1vZGVsKSB7XG4gICAgICAgIGxldCByb3RhdGlvbiA9IG1vZGVsLmluZGV4ID09PSB0aGlzLnNlY3Rpb25zLmxlbmd0aCAtIDEgPyAtMiA6IC0xO1xuXG4gICAgICAgIGlmIChjdXJyZW50ID4gbmV4dCkge1xuICAgICAgICAgICAgcm90YXRpb24gPSBtb2RlbC5pbmRleCA9PT0gdGhpcy5zZWN0aW9ucy5sZW5ndGggLSAxID8gMiA6IDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1vZGVscy5maWx0ZXIoKG1vZGVsU2luZ2xlKSA9PiB7XG4gICAgICAgICAgICBpZiAobW9kZWxTaW5nbGUuaW5kZXggPT09IG1vZGVsLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgbW9kZWxTaW5nbGUuZW5kVGlsdCA9IDAuMjUgKiBjdXJyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1vZGVscy5maWx0ZXIoKG1vZGVsU2luZ2xlKSA9PiB7XG4gICAgICAgICAgICBpZiAobW9kZWxTaW5nbGUuaW5kZXggPT09IG1vZGVsLmluZGV4ICsgMSkge1xuICAgICAgICAgICAgICAgIG1vZGVsU2luZ2xlLnN0YXJ0VGlsdCA9IG1vZGVsLmVuZFRpbHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubW9kZWxzLmZpbHRlcigobW9kZWxTaW5nbGUpID0+IHtcbiAgICAgICAgICAgIGxldCB0bCA9IGdzYXBcbiAgICAgICAgICAgICAgICAudGltZWxpbmUoe1xuICAgICAgICAgICAgICAgICAgICAvLyBlYXNlOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogdGhpcy5zZWN0aW9uc1ttb2RlbC5pbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogYCR7bW9kZWwuaW5kZXggPT09IDAgPyBcInRvcFwiIDogXCJ0b3BcIn0gdG9wYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogXCJib3R0b20gdG9wXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3J1YjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hZGRMYWJlbChcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgLmFkZChcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgLmZyb21UbyhcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxTaW5nbGUubW9kZWwucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IDE1MCAqIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IDE1MCAqIG5leHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5mcm9tVG8oXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsU2luZ2xlLm1vZGVsLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB6OiAwLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB6OiAxNTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcInN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5mcm9tVG8oXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsU2luZ2xlLm1vZGVsLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB6OiAxNTAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBlYXNlOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcIi09MVwiLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuYWRkTGFiZWwoXCJlbmRcIik7XG5cbiAgICAgICAgICAgIGdzYXAuZnJvbVRvKFxuICAgICAgICAgICAgICAgIG1vZGVsU2luZ2xlLm1vZGVsLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgeTogbW9kZWxTaW5nbGUuaW5kZXggPT09IDAgPyAwIDogbW9kZWwuc3RhcnRUaWx0IHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHk6IG1vZGVsLmVuZFRpbHQgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgejogTWF0aC5QSSAqIDIgKiAodGhpcy5zY3JvbGxUb3AgPyAtMSA6IDEpICogcm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGVhc2U6IFwibm9uZVwiLFxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxUcmlnZ2VyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiB0aGlzLnNlY3Rpb25zW21vZGVsLmluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBgJHttb2RlbC5pbmRleCA9PT0gMCA/IFwidG9wXCIgOiBcInRvcFwifSB0b3BgLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBcImJvdHRvbSB0b3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcnViOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBnc2FwLnNldChtb2RlbFNpbmdsZS5tb2RlbC5wb3NpdGlvbiwge1xuICAgICAgICAgICAgICAgIHg6IDE1MCAqIHRoaXMubW9kZWxzWzBdLmRpcmVjdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtb2RlbFxuICAgICAqIEBwYXJhbSBoaWRlXG4gICAgICovXG4gICAgbW9kZWxIaWRlKG1vZGVsLCBoaWRlID0gdHJ1ZSkge1xuICAgICAgICBpZiAoaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGdzYXAuc2V0KG1vZGVsLm1hdGVyaWFsLCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLjcsXG4gICAgICAgICAgICBvdmVyd3JpdGU6IHRydWUsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9kZWwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbW9kZWxcbiAgICAgKi9cbiAgICBtb2RlbFNob3cobW9kZWwpIHtcbiAgICAgICAgZ3NhcC50byhtb2RlbC5tYXRlcmlhbCwge1xuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAwLjMsXG4gICAgICAgICAgICBlYXNlOiBcIm5vbmVcIixcbiAgICAgICAgICAgIG92ZXJ3cml0ZTogdHJ1ZSxcbiAgICAgICAgICAgIG9uU3RhcnQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBtb2RlbC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNoZWNrU2Nyb2xsKCkge1xuICAgICAgICBsZXQgY3VycmVudFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuICAgICAgICBsZXQgcGVydlRvcCA9IDA7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY3VycmVudFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb3AgPSBwZXJ2VG9wID49IGN1cnJlbnRUb3A7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlcnRpY2FsTW91c2VEcml2ZW5DYXJvdXNlbCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBjYXJvdXNlbDogXCIuanMtbW91c2UtZHJpdmVuLXZlcnRpY2FsLWNhcm91c2VsXCIsXG4gICAgICAgICAgICBiZ0ltZzogXCIuanMtbW91c2UtZHJpdmVuLXZlcnRpY2FsLWNhcm91c2VsLWJnLWltZ1wiLFxuICAgICAgICAgICAgbGlzdDogXCIuanMtbW91c2UtZHJpdmVuLXZlcnRpY2FsLWNhcm91c2VsLWxpc3RcIixcbiAgICAgICAgICAgIGxpc3RJdGVtOiBcIi5qcy1tb3VzZS1kcml2ZW4tdmVydGljYWwtY2Fyb3VzZWwtbGlzdC1pdGVtXCJcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnBvc1kgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLmdldENhcm91c2VsKCkgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbml0Q3Vyc29yKCk7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICB0aGlzLmJnSW1nQ29udHJvbGxlcigpO1xuICAgIH1cblxuICAgIC8vcmVnaW9uIGdldHRlcnNcbiAgICBnZXRCZ0ltZ3MoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuZGVmYXVsdHMuYmdJbWcpO1xuICAgIH1cblxuICAgIGdldExpc3RJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5kZWZhdWx0cy5saXN0SXRlbSk7XG4gICAgfVxuXG4gICAgZ2V0TGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5kZWZhdWx0cy5saXN0KTtcbiAgICB9XG5cbiAgICBnZXRDYXJvdXNlbCgpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5kZWZhdWx0cy5jYXJvdXNlbCk7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgZ3NhcC5zZXQodGhpcy5nZXRCZ0ltZ3MoKSwge1xuICAgICAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICAgICAgc2NhbGU6IDEuMDUsXG4gICAgICAgICAgICBvdmVyd3JpdGU6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZ3NhcC5zZXQodGhpcy5nZXRCZ0ltZ3MoKVswXSwge1xuICAgICAgICAgICAgYXV0b0FscGhhOiAxLFxuICAgICAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgICAgICBvdmVyd3JpdGU6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5saXN0SXRlbXMgPSB0aGlzLmdldExpc3RJdGVtcygpLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgdGhpcy5saXN0T3BhY2l0eUNvbnRyb2xsZXIoMCk7XG4gICAgfVxuXG4gICAgaW5pdEN1cnNvcigpIHtcbiAgICAgICAgY29uc3QgbGlzdEhlaWdodCA9IHRoaXMuZ2V0TGlzdCgpLmNsaWVudEhlaWdodDtcbiAgICAgICAgY29uc3QgY2Fyb3VzZWxIZWlnaHQgPSB0aGlzLmdldENhcm91c2VsKCkuY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuZ2V0Q2Fyb3VzZWwoKS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgXCJtb3VzZW1vdmVcIixcbiAgICAgICAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1kgPSBldmVudC5wYWdlWSAtIHRoaXMuZ2V0Q2Fyb3VzZWwoKS5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IC10aGlzLnBvc1kgLyBjYXJvdXNlbEhlaWdodCAqIGxpc3RIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBnc2FwLnRvKHRoaXMuZ2V0TGlzdCgpLCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjMsXG4gICAgICAgICAgICAgICAgICAgIHk6IG9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJwb3dlcjQub3V0XCIsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYmdJbWdDb250cm9sbGVyKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmsgb2YgdGhpcy5nZXRMaXN0SXRlbXMoKSkge1xuICAgICAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBldiA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRJZCA9IGV2LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pdGVtSWQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RPcGFjaXR5Q29udHJvbGxlcihjdXJyZW50SWQpO1xuXG4gICAgICAgICAgICAgICAgZ3NhcC50byhldi5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjMsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXRlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBnc2FwLnRvKFwiLmlzLXZpc2libGVcIiwge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMC4yLFxuICAgICAgICAgICAgICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlOiAxLjA1LFxuICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5nZXRCZ0ltZ3MoKVtjdXJyZW50SWRdLmNsYXNzTGlzdC5jb250YWlucyhcImlzLXZpc2libGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRCZ0ltZ3MoKVtjdXJyZW50SWRdLmNsYXNzTGlzdC5hZGQoXCJpcy12aXNpYmxlXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGdzYXAudG8odGhpcy5nZXRCZ0ltZ3MoKVtjdXJyZW50SWRdLCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjYsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsaXN0T3BhY2l0eUNvbnRyb2xsZXIoaWQpIHtcbiAgICAgICAgaWQgPSBwYXJzZUludChpZCk7XG4gICAgICAgIGxldCBhYm92ZUN1cnJlbnQgPSB0aGlzLmxpc3RJdGVtcyAtIGlkO1xuICAgICAgICBsZXQgYmVsb3dDdXJyZW50ID0gcGFyc2VJbnQoaWQpO1xuXG4gICAgICAgIGlmIChhYm92ZUN1cnJlbnQgPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBhYm92ZUN1cnJlbnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBvcGFjaXR5ID0gMC41IC8gaTtcbiAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMiAqIGk7XG4gICAgICAgICAgICAgICAgZ3NhcC50byh0aGlzLmdldExpc3RJdGVtcygpW2lkICsgaV0sIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDAuNSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b0FscGhhOiBvcGFjaXR5LFxuICAgICAgICAgICAgICAgICAgICB4OiBgJHtvZmZzZXR9dndgLFxuICAgICAgICAgICAgICAgICAgICBlYXNlOiBcInBvd2VyMy5vdXRcIixcbiAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXRlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYmVsb3dDdXJyZW50ID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gYmVsb3dDdXJyZW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgb3BhY2l0eSA9IDAuNSAvIGk7XG4gICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IDIgKiBpO1xuICAgICAgICAgICAgICAgIGdzYXAudG8odGhpcy5nZXRMaXN0SXRlbXMoKVtpZCAtIGldLCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwLjUsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9BbHBoYTogb3BhY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgeDogYCR7b2Zmc2V0fXZ3YCxcbiAgICAgICAgICAgICAgICAgICAgZWFzZTogXCJwb3dlcjMub3V0XCIsXG4gICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcbmltcG9ydCBTY3JvbGxUcmlnZ2VyIGZyb20gXCJnc2FwL1Njcm9sbFRyaWdnZXJcIjtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsaW5nTWFycXVlZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGl2aWRlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLXNjcm9sbGluZy1tYXJxdWVlLWRpdmlkZXJcIik7XG4gICAgICAgIHRoaXMubGluZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLXNjcm9sbGluZy1tYXJxdWVlLWxpbmVcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuZGl2aWRlcnMubGVuZ3RoIDwgMSB8fCB0aGlzLmxpbmVzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9wQW5pbU9mZnNldCA9IHRoaXMubGluZXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB0aGlzLndpbldpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIHRoaXMucmFuZG9tRGl2aWRlclBvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMubGluZXNUcmlnZ2VyKCk7XG4gICAgfVxuXG4gICAgcmFuZG9tRGl2aWRlclBvc2l0aW9uKCkge1xuICAgICAgICB0aGlzLmRpdmlkZXJzLmZvckVhY2goKGRpdmlkZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBsZXQgcmFuZG9tID0gTWF0aC5yYW5kb20oKTtcblxuICAgICAgICAgICAgaWYgKHJhbmRvbSA+IDAuOCkge1xuICAgICAgICAgICAgICAgIHJhbmRvbSA9IDAuNztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmFuZG9tIDwgMC4xKSB7XG4gICAgICAgICAgICAgICAgcmFuZG9tID0gMC4zO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaXZpZGVyLnN0eWxlLmxlZnQgPSBgJHt0aGlzLndpbldpZHRoICogcmFuZG9tfXB4YDtcbiAgICAgICAgICAgIHRoaXMuZGl2aWRlckNvbnRyb2xsZXIoZGl2aWRlciwgaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsaW5lc1RyaWdnZXIoKSB7XG4gICAgICAgIHRoaXMubGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5saW5lQ29udHJvbGxlcihsaW5lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGluZUNvbnRyb2xsZXIobGluZSkge1xuICAgICAgICBnc2FwLnRvKGxpbmUsIHtcbiAgICAgICAgICAgIHNjcm9sbFRyaWdnZXI6IHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyOiBsaW5lLFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBcInRvcCBib3R0b21cIixcbiAgICAgICAgICAgICAgICBlbmQ6IGBib3R0b20rPSR7dGhpcy50b3BBbmltT2Zmc2V0ICogMn0gdG9wYCxcbiAgICAgICAgICAgICAgICBzY3J1YjogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHg6IFwiLTEwMCVcIixcbiAgICAgICAgICAgIGVhc2U6IFwicG93ZXIzLmluT3V0XCJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGl2aWRlckNvbnRyb2xsZXIoZGl2aWRlciwgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgbGV0IG9mZnNldCA9IHJhbmRvbSAqIDIwMDtcbiAgICAgICAgaWYgKGluZGV4ICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdzYXAudG8oZGl2aWRlciwge1xuICAgICAgICAgICAgc2Nyb2xsVHJpZ2dlcjoge1xuICAgICAgICAgICAgICAgIHRyaWdnZXI6IGRpdmlkZXIsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IFwidG9wIGJvdHRvbVwiLFxuICAgICAgICAgICAgICAgIGVuZDogXCJib3R0b20gdG9wXCIsXG4gICAgICAgICAgICAgICAgc2NydWI6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4OiBgJHtvZmZzZXR9JWAsXG4gICAgICAgICAgICBzY2FsZVg6IDEgKyByYW5kb21cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBUZW1wbGF0ZSBjb21wb25lbnRcbiAqIGV4cGxhaW4gd2hhdCB0aGlzIGNsYXNzIGlzIGRvaW5nXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbXBsYXRlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRlbXBsYXRlIGNvbXBvbmVudCBET00gc2VsZWN0b3JzXG4gICAgICAgICAqIEB0eXBlIHt7dGVtcGxhdGVDb21wb25lbnRBcnJheTogc3RyaW5nLCB0ZW1wbGF0ZUNvbXBvbmVudDogc3RyaW5nLCBzdGF0ZXM6IHtpc0FjdGl2ZTogc3RyaW5nfX19XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLkRPTSA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlQ29tcG9uZW50OiBcIi5qcy10ZW1wbGF0ZS1jb21wb25lbnRcIixcbiAgICAgICAgICAgIHRlbXBsYXRlQ29tcG9uZW50QXJyYXk6IFwiLmpzLXRlbXBsYXRlLWNvbXBvbmVudC1hcnJheVwiLFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgaXNBY3RpdmU6IFwiaXMtYWN0aXZlXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGZXRjaCB0ZW1wbGF0ZSBjb21wb25lbnQgRE9NIGVsZW1lbnRcbiAgICAgICAgICogQHR5cGUge0VsZW1lbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRlbXBsYXRlQ29tcG9uZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS50ZW1wbGF0ZUNvbXBvbmVudCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZldGNoIHRlbXBsYXRlIGNvbXBvbmVudCBsaXN0IG9mIERPTSBlbGVtZW50c1xuICAgICAgICAgKiBAdHlwZSB7Tm9kZUxpc3RPZjxFbGVtZW50Pn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGVtcGxhdGVDb21wb25lbnRBcnJheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5ET00udGVtcGxhdGVDb21wb25lbnRBcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdFxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRlbXBsYXRlQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgKHRoaXMudGVtcGxhdGVDb21wb25lbnRBcnJheS5sZW5ndGggPCAxKSB7XG4gICAgICAgIC8vICAgICByZXR1cm47XG4gICAgICAgIC8vIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJUZW1wbGF0ZSBjb21wb25lbnQgaW5pdFwiKTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZU1ldGhvZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlbXBsYXRlIG1ldGhvZFxuICAgICAqIGV4cGxhaW4gd2hhdCB0aGlzIG1ldGhvZCBpcyBkb2luZ1xuICAgICAqL1xuICAgIHRlbXBsYXRlTWV0aG9kKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlRlbXBsYXRlIG1ldGhvZCBpbml0XCIpO1xuICAgIH1cbn1cbiIsIi8qKlxuICogTUFJTiBKUyBGSUxFXG4gKi9cblxuLyoqXG4gKiBIZWxwZXJzXG4gKiBJbXBvcnRzIG9mIGhlbHBlciBmdW5jdGlvbnMgYXJlIHN0cmlwcGVkIG91dCBvZiBidW5kbGVcbiAqIEluY2x1ZGUgdGhlbSB3aXRoaW4gXCJzdGFydC1zdHJpcC1jb2RlXCIgYW5kIFwiZW5kLXN0cmlwLWNvZGVcIiBjb21tZW50c1xuICovXG5cbi8qKlxuICogQ29tcG9uZW50c1xuICovXG5pbXBvcnQgVGVtcGxhdGVDb21wb25lbnQgZnJvbSBcIi4vZXhhbXBsZXMvVGVtcGxhdGVFeGFtcGxlL1RlbXBsYXRlQ29tcG9uZW50XCI7XG5pbXBvcnQgVmVydGljYWxNb3VzZURyaXZlbkNhcm91c2VsIGZyb20gXCIuL2V4YW1wbGVzL01vdXNlRHJpdmVuVmVydGljYWxDYXJvdXNlbC9Nb3VzZURyaXZlblZlcnRpY2FsQ2Fyb3VzZWxcIjtcbmltcG9ydCBTY3JvbGxpbmdNYXJxdWVlIGZyb20gXCIuL2V4YW1wbGVzL1Njcm9sbGluZ01hcnF1ZWUvU2Nyb2xsaW5nTWFycXVlZVwiO1xuaW1wb3J0IFRocmVlU2Nyb2xseXRlbGxpbmcgZnJvbSBcIi4vZXhhbXBsZXMvM2RTY3JvbGx5dGVsbGluZy9UaHJlZVNjcm9sbHl0ZWxsaW5nXCI7XG5cbi8qKlxuICogQ2hlY2sgaWYgZG9jdW1lbnQgaXMgcmVhZHkgY3Jvc3MtYnJvd3NlclxuICogQHBhcmFtIGNhbGxiYWNrXG4gKi9cbmNvbnN0IHJlYWR5ID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEb2N1bWVudCBpcyBhbHJlYWR5IHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayBkaXJlY3RseVxuICAgICAgICAgKi9cbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBtb2Rlcm4gYnJvd3NlcnMgdG8gcmVnaXN0ZXIgRE9NQ29udGVudExvYWRlZFxuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPbGQgSUUgYnJvd3NlcnNcbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHJlYWR5IGNhbGxiYWNrXG4gKi9cbnJlYWR5KCgpID0+IHtcbiAgICAvKipcbiAgICAgKiBIRUxQRVJTIElOSVRcbiAgICAgKiBPbmx5IGluaXQgaGVscGVycyBpZiB0aGV5IGV4aXN0XG4gICAgICogV2lsbCBiZSB1bmRlZmluZWQgb24gcHJvZHVjdGlvbiBiZWNhdXNlIG9mIGltcG9ydCBzdHJpcHBpbmdcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIENSRURJVFMgSU5JVFxuICAgICAqL1xuICAgIGNvbnN0IGNyZWRpdHMgPSBbXG4gICAgICAgIFwiYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMFwiLFxuICAgICAgICBcImNvbG9yOiB3aGl0ZVwiLFxuICAgICAgICBcImRpc3BsYXk6IGJsb2NrXCIsXG4gICAgICAgIFwibGluZS1oZWlnaHQ6IDI0cHhcIixcbiAgICAgICAgXCJ0ZXh0LWFsaWduOiBjZW50ZXJcIixcbiAgICAgICAgXCJib3JkZXI6IDFweCBzb2xpZCAjZmZmZmZmXCIsXG4gICAgICAgIFwiZm9udC13ZWlnaHQ6IGJvbGRcIixcbiAgICBdLmpvaW4oXCI7XCIpO1xuICAgIGNvbnNvbGUuaW5mbyhcImRldiBieTogJWMgQm9ybmZpZ2h0IEZFIFRlYW0gXCIsIGNyZWRpdHMpO1xuXG4gICAgLyoqXG4gICAgICogQ09NUE9ORU5UUyBJTklUXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUZW1wbGF0ZSBjb21wb25lbnRcbiAgICAgKiBAdHlwZSB7VGVtcGxhdGVDb21wb25lbnR9XG4gICAgICovXG4gICAgY29uc3QgdGVtcGxhdGVDb21wb25lbnQgPSBuZXcgVGVtcGxhdGVDb21wb25lbnQoKTtcbiAgICB0ZW1wbGF0ZUNvbXBvbmVudC5pbml0KCk7XG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbE1vdXNlRHJpdmVuQ2Fyb3VzZWwgY29tcG9uZW50XG4gICAgICogQHR5cGUge1ZlcnRpY2FsTW91c2VEcml2ZW5DYXJvdXNlbH1cbiAgICAgKi9cbiAgICBjb25zdCB2ZXJ0aWNhbE1vdXNlRHJpdmVuQ2Fyb3VzZWwgPSBuZXcgVmVydGljYWxNb3VzZURyaXZlbkNhcm91c2VsKCk7XG5cbiAgICAvKipcbiAgICAgKiBTY3JvbGxpbmdNYXJxdWVlIGNvbXBvbmVudFxuICAgICAqIEB0eXBlIHtTY3JvbGxpbmdNYXJxdWVlfVxuICAgICAqL1xuICAgIGNvbnN0IHNjcm9sbGluZ01hcnF1ZWUgPSBuZXcgU2Nyb2xsaW5nTWFycXVlZSgpO1xuXG4gICAgLyoqXG4gICAgICogdGhyZWVTY3JvbGx5dGVsbGluZyBjb21wb25lbnRcbiAgICAgKiBAdHlwZSB7dGhyZWVTY3JvbGx5dGVsbGluZ31cbiAgICAgKi9cbiAgICBjb25zdCB0aHJlZVNjcm9sbHl0ZWxsaW5nID0gbmV3IFRocmVlU2Nyb2xseXRlbGxpbmcoKTtcbiAgICB0aHJlZVNjcm9sbHl0ZWxsaW5nLmluaXQoKTtcbn0pO1xuIl19"}